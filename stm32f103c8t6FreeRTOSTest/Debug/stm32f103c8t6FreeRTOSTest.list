
stm32f103c8t6FreeRTOSTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043bc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080044cc  080044cc  000054cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a0  080045a0  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080045a0  080045a0  00006060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080045a0  080045a0  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045a0  080045a0  000055a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045a4  080045a4  000055a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080045a8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b9c  20000060  08004608  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bfc  08004608  00006bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e8a  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f27  00000000  00000000  00018f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0001be40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7b  00000000  00000000  0001cfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019715  00000000  00000000  0001dd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132fc  00000000  00000000  00037460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092076  00000000  00000000  0004a75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc7d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b74  00000000  00000000  000dc818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e138c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080044b4 	.word	0x080044b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080044b4 	.word	0x080044b4

08000150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000154:	4a0c      	ldr	r2, [pc, #48]	@ (8000188 <MX_FREERTOS_Init+0x38>)
 8000156:	2100      	movs	r1, #0
 8000158:	480c      	ldr	r0, [pc, #48]	@ (800018c <MX_FREERTOS_Init+0x3c>)
 800015a:	f001 fbc7 	bl	80018ec <osThreadNew>
 800015e:	4603      	mov	r3, r0
 8000160:	4a0b      	ldr	r2, [pc, #44]	@ (8000190 <MX_FREERTOS_Init+0x40>)
 8000162:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000164:	4a0b      	ldr	r2, [pc, #44]	@ (8000194 <MX_FREERTOS_Init+0x44>)
 8000166:	2100      	movs	r1, #0
 8000168:	480b      	ldr	r0, [pc, #44]	@ (8000198 <MX_FREERTOS_Init+0x48>)
 800016a:	f001 fbbf 	bl	80018ec <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a0a      	ldr	r2, [pc, #40]	@ (800019c <MX_FREERTOS_Init+0x4c>)
 8000172:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000174:	4a0a      	ldr	r2, [pc, #40]	@ (80001a0 <MX_FREERTOS_Init+0x50>)
 8000176:	2100      	movs	r1, #0
 8000178:	480a      	ldr	r0, [pc, #40]	@ (80001a4 <MX_FREERTOS_Init+0x54>)
 800017a:	f001 fbb7 	bl	80018ec <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a09      	ldr	r2, [pc, #36]	@ (80001a8 <MX_FREERTOS_Init+0x58>)
 8000182:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000184:	bf00      	nop
 8000186:	bd80      	pop	{r7, pc}
 8000188:	08004508 	.word	0x08004508
 800018c:	080001ad 	.word	0x080001ad
 8000190:	2000007c 	.word	0x2000007c
 8000194:	0800452c 	.word	0x0800452c
 8000198:	080001bd 	.word	0x080001bd
 800019c:	20000080 	.word	0x20000080
 80001a0:	08004550 	.word	0x08004550
 80001a4:	080001d5 	.word	0x080001d5
 80001a8:	20000084 	.word	0x20000084

080001ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80001b4:	2001      	movs	r0, #1
 80001b6:	f001 fc2b 	bl	8001a10 <osDelay>
 80001ba:	e7fb      	b.n	80001b4 <StartDefaultTask+0x8>

080001bc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80001c4:	2101      	movs	r1, #1
 80001c6:	4802      	ldr	r0, [pc, #8]	@ (80001d0 <StartTask02+0x14>)
 80001c8:	f000 fc80 	bl	8000acc <HAL_GPIO_TogglePin>
 80001cc:	e7fa      	b.n	80001c4 <StartTask02+0x8>
 80001ce:	bf00      	nop
 80001d0:	40010c00 	.word	0x40010c00

080001d4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80001dc:	2102      	movs	r1, #2
 80001de:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <StartTask03+0x1c>)
 80001e0:	f000 fc74 	bl	8000acc <HAL_GPIO_TogglePin>
    osDelay(2000);
 80001e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001e8:	f001 fc12 	bl	8001a10 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80001ec:	bf00      	nop
 80001ee:	e7f5      	b.n	80001dc <StartTask03+0x8>
 80001f0:	40010c00 	.word	0x40010c00

080001f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b088      	sub	sp, #32
 80001f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001fa:	f107 0310 	add.w	r3, r7, #16
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000208:	4b1d      	ldr	r3, [pc, #116]	@ (8000280 <MX_GPIO_Init+0x8c>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a1c      	ldr	r2, [pc, #112]	@ (8000280 <MX_GPIO_Init+0x8c>)
 800020e:	f043 0320 	orr.w	r3, r3, #32
 8000212:	6193      	str	r3, [r2, #24]
 8000214:	4b1a      	ldr	r3, [pc, #104]	@ (8000280 <MX_GPIO_Init+0x8c>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	f003 0320 	and.w	r3, r3, #32
 800021c:	60fb      	str	r3, [r7, #12]
 800021e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000220:	4b17      	ldr	r3, [pc, #92]	@ (8000280 <MX_GPIO_Init+0x8c>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	4a16      	ldr	r2, [pc, #88]	@ (8000280 <MX_GPIO_Init+0x8c>)
 8000226:	f043 0308 	orr.w	r3, r3, #8
 800022a:	6193      	str	r3, [r2, #24]
 800022c:	4b14      	ldr	r3, [pc, #80]	@ (8000280 <MX_GPIO_Init+0x8c>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	f003 0308 	and.w	r3, r3, #8
 8000234:	60bb      	str	r3, [r7, #8]
 8000236:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000238:	4b11      	ldr	r3, [pc, #68]	@ (8000280 <MX_GPIO_Init+0x8c>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a10      	ldr	r2, [pc, #64]	@ (8000280 <MX_GPIO_Init+0x8c>)
 800023e:	f043 0304 	orr.w	r3, r3, #4
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b0e      	ldr	r3, [pc, #56]	@ (8000280 <MX_GPIO_Init+0x8c>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0304 	and.w	r3, r3, #4
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000250:	2200      	movs	r2, #0
 8000252:	2103      	movs	r1, #3
 8000254:	480b      	ldr	r0, [pc, #44]	@ (8000284 <MX_GPIO_Init+0x90>)
 8000256:	f000 fc21 	bl	8000a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800025a:	2303      	movs	r3, #3
 800025c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800025e:	2301      	movs	r3, #1
 8000260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000262:	2300      	movs	r3, #0
 8000264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000266:	2302      	movs	r3, #2
 8000268:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800026a:	f107 0310 	add.w	r3, r7, #16
 800026e:	4619      	mov	r1, r3
 8000270:	4804      	ldr	r0, [pc, #16]	@ (8000284 <MX_GPIO_Init+0x90>)
 8000272:	f000 fa8f 	bl	8000794 <HAL_GPIO_Init>

}
 8000276:	bf00      	nop
 8000278:	3720      	adds	r7, #32
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40021000 	.word	0x40021000
 8000284:	40010c00 	.word	0x40010c00

08000288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800028c:	f000 f970 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000290:	f000 f80a 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000294:	f7ff ffae 	bl	80001f4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000298:	f001 fae0 	bl	800185c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800029c:	f7ff ff58 	bl	8000150 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80002a0:	f001 fafe 	bl	80018a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a4:	bf00      	nop
 80002a6:	e7fd      	b.n	80002a4 <main+0x1c>

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b090      	sub	sp, #64	@ 0x40
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0318 	add.w	r3, r7, #24
 80002b2:	2228      	movs	r2, #40	@ 0x28
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f004 f80e 	bl	80042d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ca:	2301      	movs	r3, #1
 80002cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d8:	2301      	movs	r3, #1
 80002da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002dc:	2302      	movs	r3, #2
 80002de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002e6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ec:	f107 0318 	add.w	r3, r7, #24
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 fc05 	bl	8000b00 <HAL_RCC_OscConfig>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002fc:	f000 f82c 	bl	8000358 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000300:	230f      	movs	r3, #15
 8000302:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000304:	2302      	movs	r3, #2
 8000306:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800030c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000310:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2102      	movs	r1, #2
 800031a:	4618      	mov	r0, r3
 800031c:	f000 fe72 	bl	8001004 <HAL_RCC_ClockConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000326:	f000 f817 	bl	8000358 <Error_Handler>
  }
}
 800032a:	bf00      	nop
 800032c:	3740      	adds	r7, #64	@ 0x40
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a04      	ldr	r2, [pc, #16]	@ (8000354 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d101      	bne.n	800034a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000346:	f000 f929 	bl	800059c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40000400 	.word	0x40000400

08000358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800035c:	b672      	cpsid	i
}
 800035e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000360:	bf00      	nop
 8000362:	e7fd      	b.n	8000360 <Error_Handler+0x8>

08000364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800036a:	4b18      	ldr	r3, [pc, #96]	@ (80003cc <HAL_MspInit+0x68>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	4a17      	ldr	r2, [pc, #92]	@ (80003cc <HAL_MspInit+0x68>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6193      	str	r3, [r2, #24]
 8000376:	4b15      	ldr	r3, [pc, #84]	@ (80003cc <HAL_MspInit+0x68>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	60bb      	str	r3, [r7, #8]
 8000380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000382:	4b12      	ldr	r3, [pc, #72]	@ (80003cc <HAL_MspInit+0x68>)
 8000384:	69db      	ldr	r3, [r3, #28]
 8000386:	4a11      	ldr	r2, [pc, #68]	@ (80003cc <HAL_MspInit+0x68>)
 8000388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800038c:	61d3      	str	r3, [r2, #28]
 800038e:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <HAL_MspInit+0x68>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800039a:	2200      	movs	r2, #0
 800039c:	210f      	movs	r1, #15
 800039e:	f06f 0001 	mvn.w	r0, #1
 80003a2:	f000 f9cc 	bl	800073e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003a6:	4b0a      	ldr	r3, [pc, #40]	@ (80003d0 <HAL_MspInit+0x6c>)
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	4a04      	ldr	r2, [pc, #16]	@ (80003d0 <HAL_MspInit+0x6c>)
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c2:	bf00      	nop
 80003c4:	3710      	adds	r7, #16
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40010000 	.word	0x40010000

080003d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08e      	sub	sp, #56	@ 0x38
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80003dc:	2300      	movs	r3, #0
 80003de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80003e0:	2300      	movs	r3, #0
 80003e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80003e4:	2300      	movs	r3, #0
 80003e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80003ea:	4b34      	ldr	r3, [pc, #208]	@ (80004bc <HAL_InitTick+0xe8>)
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	4a33      	ldr	r2, [pc, #204]	@ (80004bc <HAL_InitTick+0xe8>)
 80003f0:	f043 0302 	orr.w	r3, r3, #2
 80003f4:	61d3      	str	r3, [r2, #28]
 80003f6:	4b31      	ldr	r3, [pc, #196]	@ (80004bc <HAL_InitTick+0xe8>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	f003 0302 	and.w	r3, r3, #2
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000402:	f107 0210 	add.w	r2, r7, #16
 8000406:	f107 0314 	add.w	r3, r7, #20
 800040a:	4611      	mov	r1, r2
 800040c:	4618      	mov	r0, r3
 800040e:	f000 ff55 	bl	80012bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000412:	6a3b      	ldr	r3, [r7, #32]
 8000414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000418:	2b00      	cmp	r3, #0
 800041a:	d103      	bne.n	8000424 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800041c:	f000 ff3a 	bl	8001294 <HAL_RCC_GetPCLK1Freq>
 8000420:	6378      	str	r0, [r7, #52]	@ 0x34
 8000422:	e004      	b.n	800042e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000424:	f000 ff36 	bl	8001294 <HAL_RCC_GetPCLK1Freq>
 8000428:	4603      	mov	r3, r0
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800042e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000430:	4a23      	ldr	r2, [pc, #140]	@ (80004c0 <HAL_InitTick+0xec>)
 8000432:	fba2 2303 	umull	r2, r3, r2, r3
 8000436:	0c9b      	lsrs	r3, r3, #18
 8000438:	3b01      	subs	r3, #1
 800043a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800043c:	4b21      	ldr	r3, [pc, #132]	@ (80004c4 <HAL_InitTick+0xf0>)
 800043e:	4a22      	ldr	r2, [pc, #136]	@ (80004c8 <HAL_InitTick+0xf4>)
 8000440:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000442:	4b20      	ldr	r3, [pc, #128]	@ (80004c4 <HAL_InitTick+0xf0>)
 8000444:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000448:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800044a:	4a1e      	ldr	r2, [pc, #120]	@ (80004c4 <HAL_InitTick+0xf0>)
 800044c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800044e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000450:	4b1c      	ldr	r3, [pc, #112]	@ (80004c4 <HAL_InitTick+0xf0>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000456:	4b1b      	ldr	r3, [pc, #108]	@ (80004c4 <HAL_InitTick+0xf0>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800045c:	4b19      	ldr	r3, [pc, #100]	@ (80004c4 <HAL_InitTick+0xf0>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000462:	4818      	ldr	r0, [pc, #96]	@ (80004c4 <HAL_InitTick+0xf0>)
 8000464:	f000 ff78 	bl	8001358 <HAL_TIM_Base_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800046e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000472:	2b00      	cmp	r3, #0
 8000474:	d11b      	bne.n	80004ae <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000476:	4813      	ldr	r0, [pc, #76]	@ (80004c4 <HAL_InitTick+0xf0>)
 8000478:	f000 ffc6 	bl	8001408 <HAL_TIM_Base_Start_IT>
 800047c:	4603      	mov	r3, r0
 800047e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000482:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000486:	2b00      	cmp	r3, #0
 8000488:	d111      	bne.n	80004ae <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800048a:	201d      	movs	r0, #29
 800048c:	f000 f973 	bl	8000776 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b0f      	cmp	r3, #15
 8000494:	d808      	bhi.n	80004a8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000496:	2200      	movs	r2, #0
 8000498:	6879      	ldr	r1, [r7, #4]
 800049a:	201d      	movs	r0, #29
 800049c:	f000 f94f 	bl	800073e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004a0:	4a0a      	ldr	r2, [pc, #40]	@ (80004cc <HAL_InitTick+0xf8>)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	6013      	str	r3, [r2, #0]
 80004a6:	e002      	b.n	80004ae <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80004a8:	2301      	movs	r3, #1
 80004aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80004ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3738      	adds	r7, #56	@ 0x38
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000
 80004c0:	431bde83 	.word	0x431bde83
 80004c4:	20000088 	.word	0x20000088
 80004c8:	40000400 	.word	0x40000400
 80004cc:	20000004 	.word	0x20000004

080004d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <NMI_Handler+0x4>

080004d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <HardFault_Handler+0x4>

080004e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <MemManage_Handler+0x4>

080004e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <BusFault_Handler+0x4>

080004f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <UsageFault_Handler+0x4>

080004f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000508:	4802      	ldr	r0, [pc, #8]	@ (8000514 <TIM3_IRQHandler+0x10>)
 800050a:	f000 ffcf 	bl	80014ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000088 	.word	0x20000088

08000518 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000524:	f7ff fff8 	bl	8000518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000528:	480b      	ldr	r0, [pc, #44]	@ (8000558 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800052a:	490c      	ldr	r1, [pc, #48]	@ (800055c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800052c:	4a0c      	ldr	r2, [pc, #48]	@ (8000560 <LoopFillZerobss+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000530:	e002      	b.n	8000538 <LoopCopyDataInit>

08000532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000536:	3304      	adds	r3, #4

08000538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800053c:	d3f9      	bcc.n	8000532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053e:	4a09      	ldr	r2, [pc, #36]	@ (8000564 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000540:	4c09      	ldr	r4, [pc, #36]	@ (8000568 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000544:	e001      	b.n	800054a <LoopFillZerobss>

08000546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000548:	3204      	adds	r2, #4

0800054a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800054c:	d3fb      	bcc.n	8000546 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800054e:	f003 ff29 	bl	80043a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000552:	f7ff fe99 	bl	8000288 <main>
  bx lr
 8000556:	4770      	bx	lr
  ldr r0, =_sdata
 8000558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800055c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000560:	080045a8 	.word	0x080045a8
  ldr r2, =_sbss
 8000564:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000568:	20001bfc 	.word	0x20001bfc

0800056c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800056c:	e7fe      	b.n	800056c <ADC1_2_IRQHandler>
	...

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000574:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <HAL_Init+0x28>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a07      	ldr	r2, [pc, #28]	@ (8000598 <HAL_Init+0x28>)
 800057a:	f043 0310 	orr.w	r3, r3, #16
 800057e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000580:	2003      	movs	r0, #3
 8000582:	f000 f8d1 	bl	8000728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000586:	200f      	movs	r0, #15
 8000588:	f7ff ff24 	bl	80003d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800058c:	f7ff feea 	bl	8000364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000590:	2300      	movs	r3, #0
}
 8000592:	4618      	mov	r0, r3
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40022000 	.word	0x40022000

0800059c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a0:	4b05      	ldr	r3, [pc, #20]	@ (80005b8 <HAL_IncTick+0x1c>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b05      	ldr	r3, [pc, #20]	@ (80005bc <HAL_IncTick+0x20>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4413      	add	r3, r2
 80005ac:	4a03      	ldr	r2, [pc, #12]	@ (80005bc <HAL_IncTick+0x20>)
 80005ae:	6013      	str	r3, [r2, #0]
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	20000008 	.word	0x20000008
 80005bc:	200000d0 	.word	0x200000d0

080005c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return uwTick;
 80005c4:	4b02      	ldr	r3, [pc, #8]	@ (80005d0 <HAL_GetTick+0x10>)
 80005c6:	681b      	ldr	r3, [r3, #0]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	200000d0 	.word	0x200000d0

080005d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f003 0307 	and.w	r3, r3, #7
 80005e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <__NVIC_SetPriorityGrouping+0x44>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005f0:	4013      	ands	r3, r2
 80005f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000606:	4a04      	ldr	r2, [pc, #16]	@ (8000618 <__NVIC_SetPriorityGrouping+0x44>)
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	60d3      	str	r3, [r2, #12]
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000620:	4b04      	ldr	r3, [pc, #16]	@ (8000634 <__NVIC_GetPriorityGrouping+0x18>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	f003 0307 	and.w	r3, r3, #7
}
 800062a:	4618      	mov	r0, r3
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	2b00      	cmp	r3, #0
 8000648:	db0b      	blt.n	8000662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	f003 021f 	and.w	r2, r3, #31
 8000650:	4906      	ldr	r1, [pc, #24]	@ (800066c <__NVIC_EnableIRQ+0x34>)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	095b      	lsrs	r3, r3, #5
 8000658:	2001      	movs	r0, #1
 800065a:	fa00 f202 	lsl.w	r2, r0, r2
 800065e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	e000e100 	.word	0xe000e100

08000670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	6039      	str	r1, [r7, #0]
 800067a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000680:	2b00      	cmp	r3, #0
 8000682:	db0a      	blt.n	800069a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	b2da      	uxtb	r2, r3
 8000688:	490c      	ldr	r1, [pc, #48]	@ (80006bc <__NVIC_SetPriority+0x4c>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	0112      	lsls	r2, r2, #4
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	440b      	add	r3, r1
 8000694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000698:	e00a      	b.n	80006b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4908      	ldr	r1, [pc, #32]	@ (80006c0 <__NVIC_SetPriority+0x50>)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	f003 030f 	and.w	r3, r3, #15
 80006a6:	3b04      	subs	r3, #4
 80006a8:	0112      	lsls	r2, r2, #4
 80006aa:	b2d2      	uxtb	r2, r2
 80006ac:	440b      	add	r3, r1
 80006ae:	761a      	strb	r2, [r3, #24]
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000e100 	.word	0xe000e100
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b089      	sub	sp, #36	@ 0x24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	f1c3 0307 	rsb	r3, r3, #7
 80006de:	2b04      	cmp	r3, #4
 80006e0:	bf28      	it	cs
 80006e2:	2304      	movcs	r3, #4
 80006e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3304      	adds	r3, #4
 80006ea:	2b06      	cmp	r3, #6
 80006ec:	d902      	bls.n	80006f4 <NVIC_EncodePriority+0x30>
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3b03      	subs	r3, #3
 80006f2:	e000      	b.n	80006f6 <NVIC_EncodePriority+0x32>
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	f04f 32ff 	mov.w	r2, #4294967295
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	43da      	mvns	r2, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	401a      	ands	r2, r3
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800070c:	f04f 31ff 	mov.w	r1, #4294967295
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	43d9      	mvns	r1, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	4313      	orrs	r3, r2
         );
}
 800071e:	4618      	mov	r0, r3
 8000720:	3724      	adds	r7, #36	@ 0x24
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff ff4f 	bl	80005d4 <__NVIC_SetPriorityGrouping>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800073e:	b580      	push	{r7, lr}
 8000740:	b086      	sub	sp, #24
 8000742:	af00      	add	r7, sp, #0
 8000744:	4603      	mov	r3, r0
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
 800074a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000750:	f7ff ff64 	bl	800061c <__NVIC_GetPriorityGrouping>
 8000754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	68b9      	ldr	r1, [r7, #8]
 800075a:	6978      	ldr	r0, [r7, #20]
 800075c:	f7ff ffb2 	bl	80006c4 <NVIC_EncodePriority>
 8000760:	4602      	mov	r2, r0
 8000762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000766:	4611      	mov	r1, r2
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff81 	bl	8000670 <__NVIC_SetPriority>
}
 800076e:	bf00      	nop
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
 800077c:	4603      	mov	r3, r0
 800077e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff57 	bl	8000638 <__NVIC_EnableIRQ>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000794:	b480      	push	{r7}
 8000796:	b08b      	sub	sp, #44	@ 0x2c
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007a6:	e169      	b.n	8000a7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007a8:	2201      	movs	r2, #1
 80007aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	69fa      	ldr	r2, [r7, #28]
 80007b8:	4013      	ands	r3, r2
 80007ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007bc:	69ba      	ldr	r2, [r7, #24]
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	f040 8158 	bne.w	8000a76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	4a9a      	ldr	r2, [pc, #616]	@ (8000a34 <HAL_GPIO_Init+0x2a0>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d05e      	beq.n	800088e <HAL_GPIO_Init+0xfa>
 80007d0:	4a98      	ldr	r2, [pc, #608]	@ (8000a34 <HAL_GPIO_Init+0x2a0>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d875      	bhi.n	80008c2 <HAL_GPIO_Init+0x12e>
 80007d6:	4a98      	ldr	r2, [pc, #608]	@ (8000a38 <HAL_GPIO_Init+0x2a4>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d058      	beq.n	800088e <HAL_GPIO_Init+0xfa>
 80007dc:	4a96      	ldr	r2, [pc, #600]	@ (8000a38 <HAL_GPIO_Init+0x2a4>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d86f      	bhi.n	80008c2 <HAL_GPIO_Init+0x12e>
 80007e2:	4a96      	ldr	r2, [pc, #600]	@ (8000a3c <HAL_GPIO_Init+0x2a8>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d052      	beq.n	800088e <HAL_GPIO_Init+0xfa>
 80007e8:	4a94      	ldr	r2, [pc, #592]	@ (8000a3c <HAL_GPIO_Init+0x2a8>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d869      	bhi.n	80008c2 <HAL_GPIO_Init+0x12e>
 80007ee:	4a94      	ldr	r2, [pc, #592]	@ (8000a40 <HAL_GPIO_Init+0x2ac>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d04c      	beq.n	800088e <HAL_GPIO_Init+0xfa>
 80007f4:	4a92      	ldr	r2, [pc, #584]	@ (8000a40 <HAL_GPIO_Init+0x2ac>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d863      	bhi.n	80008c2 <HAL_GPIO_Init+0x12e>
 80007fa:	4a92      	ldr	r2, [pc, #584]	@ (8000a44 <HAL_GPIO_Init+0x2b0>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d046      	beq.n	800088e <HAL_GPIO_Init+0xfa>
 8000800:	4a90      	ldr	r2, [pc, #576]	@ (8000a44 <HAL_GPIO_Init+0x2b0>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d85d      	bhi.n	80008c2 <HAL_GPIO_Init+0x12e>
 8000806:	2b12      	cmp	r3, #18
 8000808:	d82a      	bhi.n	8000860 <HAL_GPIO_Init+0xcc>
 800080a:	2b12      	cmp	r3, #18
 800080c:	d859      	bhi.n	80008c2 <HAL_GPIO_Init+0x12e>
 800080e:	a201      	add	r2, pc, #4	@ (adr r2, 8000814 <HAL_GPIO_Init+0x80>)
 8000810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000814:	0800088f 	.word	0x0800088f
 8000818:	08000869 	.word	0x08000869
 800081c:	0800087b 	.word	0x0800087b
 8000820:	080008bd 	.word	0x080008bd
 8000824:	080008c3 	.word	0x080008c3
 8000828:	080008c3 	.word	0x080008c3
 800082c:	080008c3 	.word	0x080008c3
 8000830:	080008c3 	.word	0x080008c3
 8000834:	080008c3 	.word	0x080008c3
 8000838:	080008c3 	.word	0x080008c3
 800083c:	080008c3 	.word	0x080008c3
 8000840:	080008c3 	.word	0x080008c3
 8000844:	080008c3 	.word	0x080008c3
 8000848:	080008c3 	.word	0x080008c3
 800084c:	080008c3 	.word	0x080008c3
 8000850:	080008c3 	.word	0x080008c3
 8000854:	080008c3 	.word	0x080008c3
 8000858:	08000871 	.word	0x08000871
 800085c:	08000885 	.word	0x08000885
 8000860:	4a79      	ldr	r2, [pc, #484]	@ (8000a48 <HAL_GPIO_Init+0x2b4>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d013      	beq.n	800088e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000866:	e02c      	b.n	80008c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	623b      	str	r3, [r7, #32]
          break;
 800086e:	e029      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	3304      	adds	r3, #4
 8000876:	623b      	str	r3, [r7, #32]
          break;
 8000878:	e024      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	3308      	adds	r3, #8
 8000880:	623b      	str	r3, [r7, #32]
          break;
 8000882:	e01f      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	330c      	adds	r3, #12
 800088a:	623b      	str	r3, [r7, #32]
          break;
 800088c:	e01a      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d102      	bne.n	800089c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000896:	2304      	movs	r3, #4
 8000898:	623b      	str	r3, [r7, #32]
          break;
 800089a:	e013      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d105      	bne.n	80008b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008a4:	2308      	movs	r3, #8
 80008a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	69fa      	ldr	r2, [r7, #28]
 80008ac:	611a      	str	r2, [r3, #16]
          break;
 80008ae:	e009      	b.n	80008c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008b0:	2308      	movs	r3, #8
 80008b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69fa      	ldr	r2, [r7, #28]
 80008b8:	615a      	str	r2, [r3, #20]
          break;
 80008ba:	e003      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
          break;
 80008c0:	e000      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          break;
 80008c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	2bff      	cmp	r3, #255	@ 0xff
 80008c8:	d801      	bhi.n	80008ce <HAL_GPIO_Init+0x13a>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	e001      	b.n	80008d2 <HAL_GPIO_Init+0x13e>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	3304      	adds	r3, #4
 80008d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	2bff      	cmp	r3, #255	@ 0xff
 80008d8:	d802      	bhi.n	80008e0 <HAL_GPIO_Init+0x14c>
 80008da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	e002      	b.n	80008e6 <HAL_GPIO_Init+0x152>
 80008e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e2:	3b08      	subs	r3, #8
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	210f      	movs	r1, #15
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	fa01 f303 	lsl.w	r3, r1, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	401a      	ands	r2, r3
 80008f8:	6a39      	ldr	r1, [r7, #32]
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	431a      	orrs	r2, r3
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090e:	2b00      	cmp	r3, #0
 8000910:	f000 80b1 	beq.w	8000a76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000914:	4b4d      	ldr	r3, [pc, #308]	@ (8000a4c <HAL_GPIO_Init+0x2b8>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a4c      	ldr	r2, [pc, #304]	@ (8000a4c <HAL_GPIO_Init+0x2b8>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b4a      	ldr	r3, [pc, #296]	@ (8000a4c <HAL_GPIO_Init+0x2b8>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800092c:	4a48      	ldr	r2, [pc, #288]	@ (8000a50 <HAL_GPIO_Init+0x2bc>)
 800092e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000930:	089b      	lsrs	r3, r3, #2
 8000932:	3302      	adds	r3, #2
 8000934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000938:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800093a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093c:	f003 0303 	and.w	r3, r3, #3
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	220f      	movs	r2, #15
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	4013      	ands	r3, r2
 800094e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a40      	ldr	r2, [pc, #256]	@ (8000a54 <HAL_GPIO_Init+0x2c0>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d013      	beq.n	8000980 <HAL_GPIO_Init+0x1ec>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a3f      	ldr	r2, [pc, #252]	@ (8000a58 <HAL_GPIO_Init+0x2c4>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d00d      	beq.n	800097c <HAL_GPIO_Init+0x1e8>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a3e      	ldr	r2, [pc, #248]	@ (8000a5c <HAL_GPIO_Init+0x2c8>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d007      	beq.n	8000978 <HAL_GPIO_Init+0x1e4>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a60 <HAL_GPIO_Init+0x2cc>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d101      	bne.n	8000974 <HAL_GPIO_Init+0x1e0>
 8000970:	2303      	movs	r3, #3
 8000972:	e006      	b.n	8000982 <HAL_GPIO_Init+0x1ee>
 8000974:	2304      	movs	r3, #4
 8000976:	e004      	b.n	8000982 <HAL_GPIO_Init+0x1ee>
 8000978:	2302      	movs	r3, #2
 800097a:	e002      	b.n	8000982 <HAL_GPIO_Init+0x1ee>
 800097c:	2301      	movs	r3, #1
 800097e:	e000      	b.n	8000982 <HAL_GPIO_Init+0x1ee>
 8000980:	2300      	movs	r3, #0
 8000982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000984:	f002 0203 	and.w	r2, r2, #3
 8000988:	0092      	lsls	r2, r2, #2
 800098a:	4093      	lsls	r3, r2
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	4313      	orrs	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000992:	492f      	ldr	r1, [pc, #188]	@ (8000a50 <HAL_GPIO_Init+0x2bc>)
 8000994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000996:	089b      	lsrs	r3, r3, #2
 8000998:	3302      	adds	r3, #2
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d006      	beq.n	80009ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009ae:	689a      	ldr	r2, [r3, #8]
 80009b0:	492c      	ldr	r1, [pc, #176]	@ (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	608b      	str	r3, [r1, #8]
 80009b8:	e006      	b.n	80009c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009bc:	689a      	ldr	r2, [r3, #8]
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	43db      	mvns	r3, r3
 80009c2:	4928      	ldr	r1, [pc, #160]	@ (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009c4:	4013      	ands	r3, r2
 80009c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d006      	beq.n	80009e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009d4:	4b23      	ldr	r3, [pc, #140]	@ (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009d6:	68da      	ldr	r2, [r3, #12]
 80009d8:	4922      	ldr	r1, [pc, #136]	@ (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	4313      	orrs	r3, r2
 80009de:	60cb      	str	r3, [r1, #12]
 80009e0:	e006      	b.n	80009f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009e2:	4b20      	ldr	r3, [pc, #128]	@ (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009e4:	68da      	ldr	r2, [r3, #12]
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	43db      	mvns	r3, r3
 80009ea:	491e      	ldr	r1, [pc, #120]	@ (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009ec:	4013      	ands	r3, r2
 80009ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d006      	beq.n	8000a0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009fc:	4b19      	ldr	r3, [pc, #100]	@ (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009fe:	685a      	ldr	r2, [r3, #4]
 8000a00:	4918      	ldr	r1, [pc, #96]	@ (8000a64 <HAL_GPIO_Init+0x2d0>)
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	604b      	str	r3, [r1, #4]
 8000a08:	e006      	b.n	8000a18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a0a:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <HAL_GPIO_Init+0x2d0>)
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	43db      	mvns	r3, r3
 8000a12:	4914      	ldr	r1, [pc, #80]	@ (8000a64 <HAL_GPIO_Init+0x2d0>)
 8000a14:	4013      	ands	r3, r2
 8000a16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d021      	beq.n	8000a68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a24:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <HAL_GPIO_Init+0x2d0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	490e      	ldr	r1, [pc, #56]	@ (8000a64 <HAL_GPIO_Init+0x2d0>)
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	600b      	str	r3, [r1, #0]
 8000a30:	e021      	b.n	8000a76 <HAL_GPIO_Init+0x2e2>
 8000a32:	bf00      	nop
 8000a34:	10320000 	.word	0x10320000
 8000a38:	10310000 	.word	0x10310000
 8000a3c:	10220000 	.word	0x10220000
 8000a40:	10210000 	.word	0x10210000
 8000a44:	10120000 	.word	0x10120000
 8000a48:	10110000 	.word	0x10110000
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40010000 	.word	0x40010000
 8000a54:	40010800 	.word	0x40010800
 8000a58:	40010c00 	.word	0x40010c00
 8000a5c:	40011000 	.word	0x40011000
 8000a60:	40011400 	.word	0x40011400
 8000a64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a68:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <HAL_GPIO_Init+0x304>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	4909      	ldr	r1, [pc, #36]	@ (8000a98 <HAL_GPIO_Init+0x304>)
 8000a72:	4013      	ands	r3, r2
 8000a74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a78:	3301      	adds	r3, #1
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a82:	fa22 f303 	lsr.w	r3, r2, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f47f ae8e 	bne.w	80007a8 <HAL_GPIO_Init+0x14>
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	372c      	adds	r7, #44	@ 0x2c
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	40010400 	.word	0x40010400

08000a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	807b      	strh	r3, [r7, #2]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000aac:	787b      	ldrb	r3, [r7, #1]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ab2:	887a      	ldrh	r2, [r7, #2]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ab8:	e003      	b.n	8000ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	041a      	lsls	r2, r3, #16
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	611a      	str	r2, [r3, #16]
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ade:	887a      	ldrh	r2, [r7, #2]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	041a      	lsls	r2, r3, #16
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	43d9      	mvns	r1, r3
 8000aea:	887b      	ldrh	r3, [r7, #2]
 8000aec:	400b      	ands	r3, r1
 8000aee:	431a      	orrs	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	611a      	str	r2, [r3, #16]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
	...

08000b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e272      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f000 8087 	beq.w	8000c2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b20:	4b92      	ldr	r3, [pc, #584]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 030c 	and.w	r3, r3, #12
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	d00c      	beq.n	8000b46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b2c:	4b8f      	ldr	r3, [pc, #572]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 030c 	and.w	r3, r3, #12
 8000b34:	2b08      	cmp	r3, #8
 8000b36:	d112      	bne.n	8000b5e <HAL_RCC_OscConfig+0x5e>
 8000b38:	4b8c      	ldr	r3, [pc, #560]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b44:	d10b      	bne.n	8000b5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b46:	4b89      	ldr	r3, [pc, #548]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d06c      	beq.n	8000c2c <HAL_RCC_OscConfig+0x12c>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d168      	bne.n	8000c2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e24c      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b66:	d106      	bne.n	8000b76 <HAL_RCC_OscConfig+0x76>
 8000b68:	4b80      	ldr	r3, [pc, #512]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a7f      	ldr	r2, [pc, #508]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	e02e      	b.n	8000bd4 <HAL_RCC_OscConfig+0xd4>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d10c      	bne.n	8000b98 <HAL_RCC_OscConfig+0x98>
 8000b7e:	4b7b      	ldr	r3, [pc, #492]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a7a      	ldr	r2, [pc, #488]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b88:	6013      	str	r3, [r2, #0]
 8000b8a:	4b78      	ldr	r3, [pc, #480]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a77      	ldr	r2, [pc, #476]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000b90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b94:	6013      	str	r3, [r2, #0]
 8000b96:	e01d      	b.n	8000bd4 <HAL_RCC_OscConfig+0xd4>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ba0:	d10c      	bne.n	8000bbc <HAL_RCC_OscConfig+0xbc>
 8000ba2:	4b72      	ldr	r3, [pc, #456]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a71      	ldr	r2, [pc, #452]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000ba8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	4b6f      	ldr	r3, [pc, #444]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a6e      	ldr	r2, [pc, #440]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	e00b      	b.n	8000bd4 <HAL_RCC_OscConfig+0xd4>
 8000bbc:	4b6b      	ldr	r3, [pc, #428]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a6a      	ldr	r2, [pc, #424]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	4b68      	ldr	r3, [pc, #416]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a67      	ldr	r2, [pc, #412]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d013      	beq.n	8000c04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bdc:	f7ff fcf0 	bl	80005c0 <HAL_GetTick>
 8000be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be2:	e008      	b.n	8000bf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000be4:	f7ff fcec 	bl	80005c0 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b64      	cmp	r3, #100	@ 0x64
 8000bf0:	d901      	bls.n	8000bf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e200      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf6:	4b5d      	ldr	r3, [pc, #372]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0f0      	beq.n	8000be4 <HAL_RCC_OscConfig+0xe4>
 8000c02:	e014      	b.n	8000c2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c04:	f7ff fcdc 	bl	80005c0 <HAL_GetTick>
 8000c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0a:	e008      	b.n	8000c1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c0c:	f7ff fcd8 	bl	80005c0 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b64      	cmp	r3, #100	@ 0x64
 8000c18:	d901      	bls.n	8000c1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e1ec      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c1e:	4b53      	ldr	r3, [pc, #332]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1f0      	bne.n	8000c0c <HAL_RCC_OscConfig+0x10c>
 8000c2a:	e000      	b.n	8000c2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d063      	beq.n	8000d02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c3a:	4b4c      	ldr	r3, [pc, #304]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 030c 	and.w	r3, r3, #12
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00b      	beq.n	8000c5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c46:	4b49      	ldr	r3, [pc, #292]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 030c 	and.w	r3, r3, #12
 8000c4e:	2b08      	cmp	r3, #8
 8000c50:	d11c      	bne.n	8000c8c <HAL_RCC_OscConfig+0x18c>
 8000c52:	4b46      	ldr	r3, [pc, #280]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d116      	bne.n	8000c8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c5e:	4b43      	ldr	r3, [pc, #268]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d005      	beq.n	8000c76 <HAL_RCC_OscConfig+0x176>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d001      	beq.n	8000c76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e1c0      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c76:	4b3d      	ldr	r3, [pc, #244]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	4939      	ldr	r1, [pc, #228]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000c86:	4313      	orrs	r3, r2
 8000c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c8a:	e03a      	b.n	8000d02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d020      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c94:	4b36      	ldr	r3, [pc, #216]	@ (8000d70 <HAL_RCC_OscConfig+0x270>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9a:	f7ff fc91 	bl	80005c0 <HAL_GetTick>
 8000c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca0:	e008      	b.n	8000cb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ca2:	f7ff fc8d 	bl	80005c0 <HAL_GetTick>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d901      	bls.n	8000cb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e1a1      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d0f0      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	4927      	ldr	r1, [pc, #156]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	600b      	str	r3, [r1, #0]
 8000cd4:	e015      	b.n	8000d02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cd6:	4b26      	ldr	r3, [pc, #152]	@ (8000d70 <HAL_RCC_OscConfig+0x270>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fc70 	bl	80005c0 <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ce4:	f7ff fc6c 	bl	80005c0 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e180      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f0      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d03a      	beq.n	8000d84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d019      	beq.n	8000d4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d16:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <HAL_RCC_OscConfig+0x274>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d1c:	f7ff fc50 	bl	80005c0 <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d24:	f7ff fc4c 	bl	80005c0 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e160      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d36:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <HAL_RCC_OscConfig+0x26c>)
 8000d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f0      	beq.n	8000d24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f000 faea 	bl	800131c <RCC_Delay>
 8000d48:	e01c      	b.n	8000d84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <HAL_RCC_OscConfig+0x274>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d50:	f7ff fc36 	bl	80005c0 <HAL_GetTick>
 8000d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d56:	e00f      	b.n	8000d78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d58:	f7ff fc32 	bl	80005c0 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d908      	bls.n	8000d78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e146      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	42420000 	.word	0x42420000
 8000d74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d78:	4b92      	ldr	r3, [pc, #584]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1e9      	bne.n	8000d58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 80a6 	beq.w	8000ede <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d96:	4b8b      	ldr	r3, [pc, #556]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10d      	bne.n	8000dbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	4b88      	ldr	r3, [pc, #544]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	4a87      	ldr	r2, [pc, #540]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dac:	61d3      	str	r3, [r2, #28]
 8000dae:	4b85      	ldr	r3, [pc, #532]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dbe:	4b82      	ldr	r3, [pc, #520]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c8>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d118      	bne.n	8000dfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dca:	4b7f      	ldr	r3, [pc, #508]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a7e      	ldr	r2, [pc, #504]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c8>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dd6:	f7ff fbf3 	bl	80005c0 <HAL_GetTick>
 8000dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ddc:	e008      	b.n	8000df0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dde:	f7ff fbef 	bl	80005c0 <HAL_GetTick>
 8000de2:	4602      	mov	r2, r0
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	2b64      	cmp	r3, #100	@ 0x64
 8000dea:	d901      	bls.n	8000df0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e103      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df0:	4b75      	ldr	r3, [pc, #468]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0f0      	beq.n	8000dde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d106      	bne.n	8000e12 <HAL_RCC_OscConfig+0x312>
 8000e04:	4b6f      	ldr	r3, [pc, #444]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	4a6e      	ldr	r2, [pc, #440]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6213      	str	r3, [r2, #32]
 8000e10:	e02d      	b.n	8000e6e <HAL_RCC_OscConfig+0x36e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10c      	bne.n	8000e34 <HAL_RCC_OscConfig+0x334>
 8000e1a:	4b6a      	ldr	r3, [pc, #424]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e1c:	6a1b      	ldr	r3, [r3, #32]
 8000e1e:	4a69      	ldr	r2, [pc, #420]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e20:	f023 0301 	bic.w	r3, r3, #1
 8000e24:	6213      	str	r3, [r2, #32]
 8000e26:	4b67      	ldr	r3, [pc, #412]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e28:	6a1b      	ldr	r3, [r3, #32]
 8000e2a:	4a66      	ldr	r2, [pc, #408]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	f023 0304 	bic.w	r3, r3, #4
 8000e30:	6213      	str	r3, [r2, #32]
 8000e32:	e01c      	b.n	8000e6e <HAL_RCC_OscConfig+0x36e>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	2b05      	cmp	r3, #5
 8000e3a:	d10c      	bne.n	8000e56 <HAL_RCC_OscConfig+0x356>
 8000e3c:	4b61      	ldr	r3, [pc, #388]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	4a60      	ldr	r2, [pc, #384]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	6213      	str	r3, [r2, #32]
 8000e48:	4b5e      	ldr	r3, [pc, #376]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e4a:	6a1b      	ldr	r3, [r3, #32]
 8000e4c:	4a5d      	ldr	r2, [pc, #372]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6213      	str	r3, [r2, #32]
 8000e54:	e00b      	b.n	8000e6e <HAL_RCC_OscConfig+0x36e>
 8000e56:	4b5b      	ldr	r3, [pc, #364]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	4a5a      	ldr	r2, [pc, #360]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e5c:	f023 0301 	bic.w	r3, r3, #1
 8000e60:	6213      	str	r3, [r2, #32]
 8000e62:	4b58      	ldr	r3, [pc, #352]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e64:	6a1b      	ldr	r3, [r3, #32]
 8000e66:	4a57      	ldr	r2, [pc, #348]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e68:	f023 0304 	bic.w	r3, r3, #4
 8000e6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d015      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e76:	f7ff fba3 	bl	80005c0 <HAL_GetTick>
 8000e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e7c:	e00a      	b.n	8000e94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e7e:	f7ff fb9f 	bl	80005c0 <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d901      	bls.n	8000e94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e0b1      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e94:	4b4b      	ldr	r3, [pc, #300]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0ee      	beq.n	8000e7e <HAL_RCC_OscConfig+0x37e>
 8000ea0:	e014      	b.n	8000ecc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fb8d 	bl	80005c0 <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ea8:	e00a      	b.n	8000ec0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eaa:	f7ff fb89 	bl	80005c0 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e09b      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec0:	4b40      	ldr	r3, [pc, #256]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1ee      	bne.n	8000eaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d105      	bne.n	8000ede <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed2:	4b3c      	ldr	r3, [pc, #240]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a3b      	ldr	r2, [pc, #236]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000ed8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000edc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 8087 	beq.w	8000ff6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ee8:	4b36      	ldr	r3, [pc, #216]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 030c 	and.w	r3, r3, #12
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d061      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d146      	bne.n	8000f8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000efc:	4b33      	ldr	r3, [pc, #204]	@ (8000fcc <HAL_RCC_OscConfig+0x4cc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f02:	f7ff fb5d 	bl	80005c0 <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f0a:	f7ff fb59 	bl	80005c0 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e06d      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f1c:	4b29      	ldr	r3, [pc, #164]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1f0      	bne.n	8000f0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f30:	d108      	bne.n	8000f44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f32:	4b24      	ldr	r3, [pc, #144]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	4921      	ldr	r1, [pc, #132]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000f40:	4313      	orrs	r3, r2
 8000f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f44:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a19      	ldr	r1, [r3, #32]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f54:	430b      	orrs	r3, r1
 8000f56:	491b      	ldr	r1, [pc, #108]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <HAL_RCC_OscConfig+0x4cc>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f62:	f7ff fb2d 	bl	80005c0 <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f6a:	f7ff fb29 	bl	80005c0 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e03d      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f7c:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f0      	beq.n	8000f6a <HAL_RCC_OscConfig+0x46a>
 8000f88:	e035      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f8a:	4b10      	ldr	r3, [pc, #64]	@ (8000fcc <HAL_RCC_OscConfig+0x4cc>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff fb16 	bl	80005c0 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f98:	f7ff fb12 	bl	80005c0 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e026      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f0      	bne.n	8000f98 <HAL_RCC_OscConfig+0x498>
 8000fb6:	e01e      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d107      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e019      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40007000 	.word	0x40007000
 8000fcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <HAL_RCC_OscConfig+0x500>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d106      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d001      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40021000 	.word	0x40021000

08001004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e0d0      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001018:	4b6a      	ldr	r3, [pc, #424]	@ (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	429a      	cmp	r2, r3
 8001024:	d910      	bls.n	8001048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001026:	4b67      	ldr	r3, [pc, #412]	@ (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f023 0207 	bic.w	r2, r3, #7
 800102e:	4965      	ldr	r1, [pc, #404]	@ (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	4313      	orrs	r3, r2
 8001034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001036:	4b63      	ldr	r3, [pc, #396]	@ (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d001      	beq.n	8001048 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e0b8      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d020      	beq.n	8001096 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001060:	4b59      	ldr	r3, [pc, #356]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4a58      	ldr	r2, [pc, #352]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001066:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800106a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0308 	and.w	r3, r3, #8
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001078:	4b53      	ldr	r3, [pc, #332]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	4a52      	ldr	r2, [pc, #328]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800107e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001082:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001084:	4b50      	ldr	r3, [pc, #320]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	494d      	ldr	r1, [pc, #308]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001092:	4313      	orrs	r3, r2
 8001094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d040      	beq.n	8001124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d107      	bne.n	80010ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	4b47      	ldr	r3, [pc, #284]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d115      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e07f      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d107      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c2:	4b41      	ldr	r3, [pc, #260]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e073      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d2:	4b3d      	ldr	r3, [pc, #244]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e06b      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e2:	4b39      	ldr	r3, [pc, #228]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f023 0203 	bic.w	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4936      	ldr	r1, [pc, #216]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010f4:	f7ff fa64 	bl	80005c0 <HAL_GetTick>
 80010f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fa:	e00a      	b.n	8001112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010fc:	f7ff fa60 	bl	80005c0 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800110a:	4293      	cmp	r3, r2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e053      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001112:	4b2d      	ldr	r3, [pc, #180]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 020c 	and.w	r2, r3, #12
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	429a      	cmp	r2, r3
 8001122:	d1eb      	bne.n	80010fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001124:	4b27      	ldr	r3, [pc, #156]	@ (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d210      	bcs.n	8001154 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001132:	4b24      	ldr	r3, [pc, #144]	@ (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f023 0207 	bic.w	r2, r3, #7
 800113a:	4922      	ldr	r1, [pc, #136]	@ (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	4313      	orrs	r3, r2
 8001140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001142:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	d001      	beq.n	8001154 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e032      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001160:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	4916      	ldr	r1, [pc, #88]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800116e:	4313      	orrs	r3, r2
 8001170:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d009      	beq.n	8001192 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800117e:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	490e      	ldr	r1, [pc, #56]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800118e:	4313      	orrs	r3, r2
 8001190:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001192:	f000 f821 	bl	80011d8 <HAL_RCC_GetSysClockFreq>
 8001196:	4602      	mov	r2, r0
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	490a      	ldr	r1, [pc, #40]	@ (80011cc <HAL_RCC_ClockConfig+0x1c8>)
 80011a4:	5ccb      	ldrb	r3, [r1, r3]
 80011a6:	fa22 f303 	lsr.w	r3, r2, r3
 80011aa:	4a09      	ldr	r2, [pc, #36]	@ (80011d0 <HAL_RCC_ClockConfig+0x1cc>)
 80011ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011ae:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <HAL_RCC_ClockConfig+0x1d0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f90e 	bl	80003d4 <HAL_InitTick>

  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40022000 	.word	0x40022000
 80011c8:	40021000 	.word	0x40021000
 80011cc:	08004574 	.word	0x08004574
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000004 	.word	0x20000004

080011d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b087      	sub	sp, #28
 80011dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011f2:	4b1e      	ldr	r3, [pc, #120]	@ (800126c <HAL_RCC_GetSysClockFreq+0x94>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d002      	beq.n	8001208 <HAL_RCC_GetSysClockFreq+0x30>
 8001202:	2b08      	cmp	r3, #8
 8001204:	d003      	beq.n	800120e <HAL_RCC_GetSysClockFreq+0x36>
 8001206:	e027      	b.n	8001258 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001208:	4b19      	ldr	r3, [pc, #100]	@ (8001270 <HAL_RCC_GetSysClockFreq+0x98>)
 800120a:	613b      	str	r3, [r7, #16]
      break;
 800120c:	e027      	b.n	800125e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	0c9b      	lsrs	r3, r3, #18
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	4a17      	ldr	r2, [pc, #92]	@ (8001274 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001218:	5cd3      	ldrb	r3, [r2, r3]
 800121a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d010      	beq.n	8001248 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001226:	4b11      	ldr	r3, [pc, #68]	@ (800126c <HAL_RCC_GetSysClockFreq+0x94>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	0c5b      	lsrs	r3, r3, #17
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	4a11      	ldr	r2, [pc, #68]	@ (8001278 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001232:	5cd3      	ldrb	r3, [r2, r3]
 8001234:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a0d      	ldr	r2, [pc, #52]	@ (8001270 <HAL_RCC_GetSysClockFreq+0x98>)
 800123a:	fb03 f202 	mul.w	r2, r3, r2
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	fbb2 f3f3 	udiv	r3, r2, r3
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	e004      	b.n	8001252 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a0c      	ldr	r2, [pc, #48]	@ (800127c <HAL_RCC_GetSysClockFreq+0xa4>)
 800124c:	fb02 f303 	mul.w	r3, r2, r3
 8001250:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	613b      	str	r3, [r7, #16]
      break;
 8001256:	e002      	b.n	800125e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001258:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <HAL_RCC_GetSysClockFreq+0x98>)
 800125a:	613b      	str	r3, [r7, #16]
      break;
 800125c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800125e:	693b      	ldr	r3, [r7, #16]
}
 8001260:	4618      	mov	r0, r3
 8001262:	371c      	adds	r7, #28
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000
 8001270:	007a1200 	.word	0x007a1200
 8001274:	0800458c 	.word	0x0800458c
 8001278:	0800459c 	.word	0x0800459c
 800127c:	003d0900 	.word	0x003d0900

08001280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001284:	4b02      	ldr	r3, [pc, #8]	@ (8001290 <HAL_RCC_GetHCLKFreq+0x10>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000000 	.word	0x20000000

08001294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001298:	f7ff fff2 	bl	8001280 <HAL_RCC_GetHCLKFreq>
 800129c:	4602      	mov	r2, r0
 800129e:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	0a1b      	lsrs	r3, r3, #8
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	4903      	ldr	r1, [pc, #12]	@ (80012b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012aa:	5ccb      	ldrb	r3, [r1, r3]
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40021000 	.word	0x40021000
 80012b8:	08004584 	.word	0x08004584

080012bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	220f      	movs	r2, #15
 80012ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <HAL_RCC_GetClockConfig+0x58>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0203 	and.w	r2, r3, #3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <HAL_RCC_GetClockConfig+0x58>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <HAL_RCC_GetClockConfig+0x58>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80012f0:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <HAL_RCC_GetClockConfig+0x58>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	08db      	lsrs	r3, r3, #3
 80012f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_RCC_GetClockConfig+0x5c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0207 	and.w	r2, r3, #7
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	40021000 	.word	0x40021000
 8001318:	40022000 	.word	0x40022000

0800131c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001324:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <RCC_Delay+0x34>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0a      	ldr	r2, [pc, #40]	@ (8001354 <RCC_Delay+0x38>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	0a5b      	lsrs	r3, r3, #9
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	fb02 f303 	mul.w	r3, r2, r3
 8001336:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001338:	bf00      	nop
  }
  while (Delay --);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1e5a      	subs	r2, r3, #1
 800133e:	60fa      	str	r2, [r7, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f9      	bne.n	8001338 <RCC_Delay+0x1c>
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	20000000 	.word	0x20000000
 8001354:	10624dd3 	.word	0x10624dd3

08001358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e041      	b.n	80013ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d106      	bne.n	8001384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f839 	bl	80013f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2202      	movs	r2, #2
 8001388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3304      	adds	r3, #4
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f000 f99c 	bl	80016d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b01      	cmp	r3, #1
 800141a:	d001      	beq.n	8001420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e03a      	b.n	8001496 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2202      	movs	r2, #2
 8001424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68da      	ldr	r2, [r3, #12]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0201 	orr.w	r2, r2, #1
 8001436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a18      	ldr	r2, [pc, #96]	@ (80014a0 <HAL_TIM_Base_Start_IT+0x98>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d00e      	beq.n	8001460 <HAL_TIM_Base_Start_IT+0x58>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800144a:	d009      	beq.n	8001460 <HAL_TIM_Base_Start_IT+0x58>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a14      	ldr	r2, [pc, #80]	@ (80014a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d004      	beq.n	8001460 <HAL_TIM_Base_Start_IT+0x58>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a13      	ldr	r2, [pc, #76]	@ (80014a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d111      	bne.n	8001484 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b06      	cmp	r3, #6
 8001470:	d010      	beq.n	8001494 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f042 0201 	orr.w	r2, r2, #1
 8001480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001482:	e007      	b.n	8001494 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	40012c00 	.word	0x40012c00
 80014a4:	40000400 	.word	0x40000400
 80014a8:	40000800 	.word	0x40000800

080014ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d020      	beq.n	8001510 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d01b      	beq.n	8001510 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f06f 0202 	mvn.w	r2, #2
 80014e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f8d1 	bl	800169e <HAL_TIM_IC_CaptureCallback>
 80014fc:	e005      	b.n	800150a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f8c4 	bl	800168c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f8d3 	bl	80016b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	2b00      	cmp	r3, #0
 8001518:	d020      	beq.n	800155c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d01b      	beq.n	800155c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f06f 0204 	mvn.w	r2, #4
 800152c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2202      	movs	r2, #2
 8001532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f8ab 	bl	800169e <HAL_TIM_IC_CaptureCallback>
 8001548:	e005      	b.n	8001556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f89e 	bl	800168c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f8ad 	bl	80016b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d020      	beq.n	80015a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01b      	beq.n	80015a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f06f 0208 	mvn.w	r2, #8
 8001578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2204      	movs	r2, #4
 800157e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f885 	bl	800169e <HAL_TIM_IC_CaptureCallback>
 8001594:	e005      	b.n	80015a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f878 	bl	800168c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 f887 	bl	80016b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d020      	beq.n	80015f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f003 0310 	and.w	r3, r3, #16
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d01b      	beq.n	80015f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f06f 0210 	mvn.w	r2, #16
 80015c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2208      	movs	r2, #8
 80015ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f85f 	bl	800169e <HAL_TIM_IC_CaptureCallback>
 80015e0:	e005      	b.n	80015ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f852 	bl	800168c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f861 	bl	80016b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00c      	beq.n	8001618 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	d007      	beq.n	8001618 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f06f 0201 	mvn.w	r2, #1
 8001610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7fe fe8e 	bl	8000334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00c      	beq.n	800163c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001628:	2b00      	cmp	r3, #0
 800162a:	d007      	beq.n	800163c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f8c3 	bl	80017c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00c      	beq.n	8001660 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800164c:	2b00      	cmp	r3, #0
 800164e:	d007      	beq.n	8001660 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f831 	bl	80016c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f003 0320 	and.w	r3, r3, #32
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00c      	beq.n	8001684 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	2b00      	cmp	r3, #0
 8001672:	d007      	beq.n	8001684 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f06f 0220 	mvn.w	r2, #32
 800167c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f896 	bl	80017b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001684:	bf00      	nop
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr

0800169e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a2f      	ldr	r2, [pc, #188]	@ (80017a4 <TIM_Base_SetConfig+0xd0>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d00b      	beq.n	8001704 <TIM_Base_SetConfig+0x30>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016f2:	d007      	beq.n	8001704 <TIM_Base_SetConfig+0x30>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a2c      	ldr	r2, [pc, #176]	@ (80017a8 <TIM_Base_SetConfig+0xd4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d003      	beq.n	8001704 <TIM_Base_SetConfig+0x30>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a2b      	ldr	r2, [pc, #172]	@ (80017ac <TIM_Base_SetConfig+0xd8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d108      	bne.n	8001716 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800170a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a22      	ldr	r2, [pc, #136]	@ (80017a4 <TIM_Base_SetConfig+0xd0>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d00b      	beq.n	8001736 <TIM_Base_SetConfig+0x62>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001724:	d007      	beq.n	8001736 <TIM_Base_SetConfig+0x62>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a1f      	ldr	r2, [pc, #124]	@ (80017a8 <TIM_Base_SetConfig+0xd4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d003      	beq.n	8001736 <TIM_Base_SetConfig+0x62>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a1e      	ldr	r2, [pc, #120]	@ (80017ac <TIM_Base_SetConfig+0xd8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d108      	bne.n	8001748 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800173c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	4313      	orrs	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	4313      	orrs	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a0d      	ldr	r2, [pc, #52]	@ (80017a4 <TIM_Base_SetConfig+0xd0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d103      	bne.n	800177c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	f023 0201 	bic.w	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	611a      	str	r2, [r3, #16]
  }
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	40012c00 	.word	0x40012c00
 80017a8:	40000400 	.word	0x40000400
 80017ac:	40000800 	.word	0x40000800

080017b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <__NVIC_SetPriority>:
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	db0a      	blt.n	80017fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	490c      	ldr	r1, [pc, #48]	@ (8001820 <__NVIC_SetPriority+0x4c>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	0112      	lsls	r2, r2, #4
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	440b      	add	r3, r1
 80017f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80017fc:	e00a      	b.n	8001814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4908      	ldr	r1, [pc, #32]	@ (8001824 <__NVIC_SetPriority+0x50>)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	3b04      	subs	r3, #4
 800180c:	0112      	lsls	r2, r2, #4
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	440b      	add	r3, r1
 8001812:	761a      	strb	r2, [r3, #24]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e100 	.word	0xe000e100
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800182c:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <SysTick_Handler+0x1c>)
 800182e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001830:	f001 fd38 	bl	80032a4 <xTaskGetSchedulerState>
 8001834:	4603      	mov	r3, r0
 8001836:	2b01      	cmp	r3, #1
 8001838:	d001      	beq.n	800183e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800183a:	f002 fadd 	bl	8003df8 <xPortSysTickHandler>
  }
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	e000e010 	.word	0xe000e010

08001848 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800184c:	2100      	movs	r1, #0
 800184e:	f06f 0004 	mvn.w	r0, #4
 8001852:	f7ff ffbf 	bl	80017d4 <__NVIC_SetPriority>
#endif
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001862:	f3ef 8305 	mrs	r3, IPSR
 8001866:	603b      	str	r3, [r7, #0]
  return(result);
 8001868:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800186e:	f06f 0305 	mvn.w	r3, #5
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	e00c      	b.n	8001890 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <osKernelInitialize+0x40>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d105      	bne.n	800188a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800187e:	4b07      	ldr	r3, [pc, #28]	@ (800189c <osKernelInitialize+0x40>)
 8001880:	2201      	movs	r2, #1
 8001882:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001884:	2300      	movs	r3, #0
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	e002      	b.n	8001890 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001890:	687b      	ldr	r3, [r7, #4]
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	200000d4 	.word	0x200000d4

080018a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018a6:	f3ef 8305 	mrs	r3, IPSR
 80018aa:	603b      	str	r3, [r7, #0]
  return(result);
 80018ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80018b2:	f06f 0305 	mvn.w	r3, #5
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	e010      	b.n	80018dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80018ba:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <osKernelStart+0x48>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d109      	bne.n	80018d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80018c2:	f7ff ffc1 	bl	8001848 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80018c6:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <osKernelStart+0x48>)
 80018c8:	2202      	movs	r2, #2
 80018ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80018cc:	f001 f88a 	bl	80029e4 <vTaskStartScheduler>
      stat = osOK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	e002      	b.n	80018dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
 80018da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200000d4 	.word	0x200000d4

080018ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08e      	sub	sp, #56	@ 0x38
 80018f0:	af04      	add	r7, sp, #16
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018fc:	f3ef 8305 	mrs	r3, IPSR
 8001900:	617b      	str	r3, [r7, #20]
  return(result);
 8001902:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001904:	2b00      	cmp	r3, #0
 8001906:	d17e      	bne.n	8001a06 <osThreadNew+0x11a>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d07b      	beq.n	8001a06 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800190e:	2380      	movs	r3, #128	@ 0x80
 8001910:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001912:	2318      	movs	r3, #24
 8001914:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d045      	beq.n	80019b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <osThreadNew+0x48>
        name = attr->name;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <osThreadNew+0x6e>
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	2b38      	cmp	r3, #56	@ 0x38
 800194c:	d805      	bhi.n	800195a <osThreadNew+0x6e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <osThreadNew+0x72>
        return (NULL);
 800195a:	2300      	movs	r3, #0
 800195c:	e054      	b.n	8001a08 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00e      	beq.n	8001994 <osThreadNew+0xa8>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	2ba7      	cmp	r3, #167	@ 0xa7
 800197c:	d90a      	bls.n	8001994 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <osThreadNew+0xa8>
        mem = 1;
 800198e:	2301      	movs	r3, #1
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	e010      	b.n	80019b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10c      	bne.n	80019b6 <osThreadNew+0xca>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d108      	bne.n	80019b6 <osThreadNew+0xca>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d104      	bne.n	80019b6 <osThreadNew+0xca>
          mem = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61bb      	str	r3, [r7, #24]
 80019b0:	e001      	b.n	80019b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d110      	bne.n	80019de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80019c4:	9202      	str	r2, [sp, #8]
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	6a3a      	ldr	r2, [r7, #32]
 80019d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 fe12 	bl	80025fc <xTaskCreateStatic>
 80019d8:	4603      	mov	r3, r0
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	e013      	b.n	8001a06 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d110      	bne.n	8001a06 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80019e4:	6a3b      	ldr	r3, [r7, #32]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fe60 	bl	80026bc <xTaskCreate>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d001      	beq.n	8001a06 <osThreadNew+0x11a>
            hTask = NULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001a06:	693b      	ldr	r3, [r7, #16]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3728      	adds	r7, #40	@ 0x28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a18:	f3ef 8305 	mrs	r3, IPSR
 8001a1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a1e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <osDelay+0x1c>
    stat = osErrorISR;
 8001a24:	f06f 0305 	mvn.w	r3, #5
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	e007      	b.n	8001a3c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <osDelay+0x2c>
      vTaskDelay(ticks);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 ff9e 	bl	8002978 <vTaskDelay>
    }
  }

  return (stat);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4a06      	ldr	r2, [pc, #24]	@ (8001a70 <vApplicationGetIdleTaskMemory+0x28>)
 8001a58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	4a05      	ldr	r2, [pc, #20]	@ (8001a74 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2280      	movs	r2, #128	@ 0x80
 8001a64:	601a      	str	r2, [r3, #0]
}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	200000d8 	.word	0x200000d8
 8001a74:	20000180 	.word	0x20000180

08001a78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4a07      	ldr	r2, [pc, #28]	@ (8001aa4 <vApplicationGetTimerTaskMemory+0x2c>)
 8001a88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	4a06      	ldr	r2, [pc, #24]	@ (8001aa8 <vApplicationGetTimerTaskMemory+0x30>)
 8001a8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a96:	601a      	str	r2, [r3, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000380 	.word	0x20000380
 8001aa8:	20000428 	.word	0x20000428

08001aac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f103 0208 	add.w	r2, r3, #8
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f103 0208 	add.w	r2, r3, #8
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f103 0208 	add.w	r2, r3, #8
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b02:	b480      	push	{r7}
 8001b04:	b085      	sub	sp, #20
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	601a      	str	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5e:	d103      	bne.n	8001b68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e00c      	b.n	8001b82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3308      	adds	r3, #8
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	e002      	b.n	8001b76 <vListInsert+0x2e>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d2f6      	bcs.n	8001b70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	601a      	str	r2, [r3, #0]
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6892      	ldr	r2, [r2, #8]
 8001bce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6852      	ldr	r2, [r2, #4]
 8001bd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d103      	bne.n	8001bec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	1e5a      	subs	r2, r3, #1
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
	...

08001c0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10b      	bne.n	8001c38 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c24:	f383 8811 	msr	BASEPRI, r3
 8001c28:	f3bf 8f6f 	isb	sy
 8001c2c:	f3bf 8f4f 	dsb	sy
 8001c30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c32:	bf00      	nop
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001c38:	f002 f860 	bl	8003cfc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c44:	68f9      	ldr	r1, [r7, #12]
 8001c46:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c48:	fb01 f303 	mul.w	r3, r1, r3
 8001c4c:	441a      	add	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	68f9      	ldr	r1, [r7, #12]
 8001c6c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	441a      	add	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	22ff      	movs	r2, #255	@ 0xff
 8001c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	22ff      	movs	r2, #255	@ 0xff
 8001c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d114      	bne.n	8001cb8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d01a      	beq.n	8001ccc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3310      	adds	r3, #16
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 f93c 	bl	8002f18 <xTaskRemoveFromEventList>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d012      	beq.n	8001ccc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cdc <xQueueGenericReset+0xd0>)
 8001ca8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	f3bf 8f4f 	dsb	sy
 8001cb2:	f3bf 8f6f 	isb	sy
 8001cb6:	e009      	b.n	8001ccc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3310      	adds	r3, #16
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fef5 	bl	8001aac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3324      	adds	r3, #36	@ 0x24
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fef0 	bl	8001aac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001ccc:	f002 f846 	bl	8003d5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001cd0:	2301      	movs	r3, #1
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	e000ed04 	.word	0xe000ed04

08001ce0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08e      	sub	sp, #56	@ 0x38
 8001ce4:	af02      	add	r7, sp, #8
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10b      	bne.n	8001d0c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cf8:	f383 8811 	msr	BASEPRI, r3
 8001cfc:	f3bf 8f6f 	isb	sy
 8001d00:	f3bf 8f4f 	dsb	sy
 8001d04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001d06:	bf00      	nop
 8001d08:	bf00      	nop
 8001d0a:	e7fd      	b.n	8001d08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10b      	bne.n	8001d2a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d16:	f383 8811 	msr	BASEPRI, r3
 8001d1a:	f3bf 8f6f 	isb	sy
 8001d1e:	f3bf 8f4f 	dsb	sy
 8001d22:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	e7fd      	b.n	8001d26 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <xQueueGenericCreateStatic+0x56>
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <xQueueGenericCreateStatic+0x5a>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <xQueueGenericCreateStatic+0x5c>
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10b      	bne.n	8001d58 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d44:	f383 8811 	msr	BASEPRI, r3
 8001d48:	f3bf 8f6f 	isb	sy
 8001d4c:	f3bf 8f4f 	dsb	sy
 8001d50:	623b      	str	r3, [r7, #32]
}
 8001d52:	bf00      	nop
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d102      	bne.n	8001d64 <xQueueGenericCreateStatic+0x84>
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <xQueueGenericCreateStatic+0x88>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <xQueueGenericCreateStatic+0x8a>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10b      	bne.n	8001d86 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d72:	f383 8811 	msr	BASEPRI, r3
 8001d76:	f3bf 8f6f 	isb	sy
 8001d7a:	f3bf 8f4f 	dsb	sy
 8001d7e:	61fb      	str	r3, [r7, #28]
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	e7fd      	b.n	8001d82 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001d86:	2350      	movs	r3, #80	@ 0x50
 8001d88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b50      	cmp	r3, #80	@ 0x50
 8001d8e:	d00b      	beq.n	8001da8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d94:	f383 8811 	msr	BASEPRI, r3
 8001d98:	f3bf 8f6f 	isb	sy
 8001d9c:	f3bf 8f4f 	dsb	sy
 8001da0:	61bb      	str	r3, [r7, #24]
}
 8001da2:	bf00      	nop
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001da8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00d      	beq.n	8001dd0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001dbc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f805 	bl	8001dda <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3730      	adds	r7, #48	@ 0x30
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b084      	sub	sp, #16
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d103      	bne.n	8001df6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	e002      	b.n	8001dfc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e08:	2101      	movs	r1, #1
 8001e0a:	69b8      	ldr	r0, [r7, #24]
 8001e0c:	f7ff fefe 	bl	8001c0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	78fa      	ldrb	r2, [r7, #3]
 8001e14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08e      	sub	sp, #56	@ 0x38
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10b      	bne.n	8001e54 <xQueueGenericSend+0x34>
	__asm volatile
 8001e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e40:	f383 8811 	msr	BASEPRI, r3
 8001e44:	f3bf 8f6f 	isb	sy
 8001e48:	f3bf 8f4f 	dsb	sy
 8001e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001e4e:	bf00      	nop
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d103      	bne.n	8001e62 <xQueueGenericSend+0x42>
 8001e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <xQueueGenericSend+0x46>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <xQueueGenericSend+0x48>
 8001e66:	2300      	movs	r3, #0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10b      	bne.n	8001e84 <xQueueGenericSend+0x64>
	__asm volatile
 8001e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e70:	f383 8811 	msr	BASEPRI, r3
 8001e74:	f3bf 8f6f 	isb	sy
 8001e78:	f3bf 8f4f 	dsb	sy
 8001e7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001e7e:	bf00      	nop
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d103      	bne.n	8001e92 <xQueueGenericSend+0x72>
 8001e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <xQueueGenericSend+0x76>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <xQueueGenericSend+0x78>
 8001e96:	2300      	movs	r3, #0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10b      	bne.n	8001eb4 <xQueueGenericSend+0x94>
	__asm volatile
 8001e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ea0:	f383 8811 	msr	BASEPRI, r3
 8001ea4:	f3bf 8f6f 	isb	sy
 8001ea8:	f3bf 8f4f 	dsb	sy
 8001eac:	623b      	str	r3, [r7, #32]
}
 8001eae:	bf00      	nop
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001eb4:	f001 f9f6 	bl	80032a4 <xTaskGetSchedulerState>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d102      	bne.n	8001ec4 <xQueueGenericSend+0xa4>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <xQueueGenericSend+0xa8>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <xQueueGenericSend+0xaa>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10b      	bne.n	8001ee6 <xQueueGenericSend+0xc6>
	__asm volatile
 8001ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ed2:	f383 8811 	msr	BASEPRI, r3
 8001ed6:	f3bf 8f6f 	isb	sy
 8001eda:	f3bf 8f4f 	dsb	sy
 8001ede:	61fb      	str	r3, [r7, #28]
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	e7fd      	b.n	8001ee2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001ee6:	f001 ff09 	bl	8003cfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d302      	bcc.n	8001efc <xQueueGenericSend+0xdc>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d129      	bne.n	8001f50 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	68b9      	ldr	r1, [r7, #8]
 8001f00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f02:	f000 fa0f 	bl	8002324 <prvCopyDataToQueue>
 8001f06:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d010      	beq.n	8001f32 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f12:	3324      	adds	r3, #36	@ 0x24
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 ffff 	bl	8002f18 <xTaskRemoveFromEventList>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d013      	beq.n	8001f48 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001f20:	4b3f      	ldr	r3, [pc, #252]	@ (8002020 <xQueueGenericSend+0x200>)
 8001f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	f3bf 8f4f 	dsb	sy
 8001f2c:	f3bf 8f6f 	isb	sy
 8001f30:	e00a      	b.n	8001f48 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001f38:	4b39      	ldr	r3, [pc, #228]	@ (8002020 <xQueueGenericSend+0x200>)
 8001f3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	f3bf 8f4f 	dsb	sy
 8001f44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001f48:	f001 ff08 	bl	8003d5c <vPortExitCritical>
				return pdPASS;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e063      	b.n	8002018 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d103      	bne.n	8001f5e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001f56:	f001 ff01 	bl	8003d5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e05c      	b.n	8002018 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d106      	bne.n	8001f72 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f001 f839 	bl	8002fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f72:	f001 fef3 	bl	8003d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f76:	f000 fda5 	bl	8002ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f7a:	f001 febf 	bl	8003cfc <vPortEnterCritical>
 8001f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001f84:	b25b      	sxtb	r3, r3
 8001f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8a:	d103      	bne.n	8001f94 <xQueueGenericSend+0x174>
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001f9a:	b25b      	sxtb	r3, r3
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d103      	bne.n	8001faa <xQueueGenericSend+0x18a>
 8001fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001faa:	f001 fed7 	bl	8003d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fae:	1d3a      	adds	r2, r7, #4
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f001 f828 	bl	800300c <xTaskCheckForTimeOut>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d124      	bne.n	800200c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001fc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fc4:	f000 faa6 	bl	8002514 <prvIsQueueFull>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d018      	beq.n	8002000 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fd0:	3310      	adds	r3, #16
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 ff4c 	bl	8002e74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001fdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fde:	f000 fa31 	bl	8002444 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001fe2:	f000 fd7d 	bl	8002ae0 <xTaskResumeAll>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f47f af7c 	bne.w	8001ee6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8001fee:	4b0c      	ldr	r3, [pc, #48]	@ (8002020 <xQueueGenericSend+0x200>)
 8001ff0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	f3bf 8f4f 	dsb	sy
 8001ffa:	f3bf 8f6f 	isb	sy
 8001ffe:	e772      	b.n	8001ee6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002000:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002002:	f000 fa1f 	bl	8002444 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002006:	f000 fd6b 	bl	8002ae0 <xTaskResumeAll>
 800200a:	e76c      	b.n	8001ee6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800200c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800200e:	f000 fa19 	bl	8002444 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002012:	f000 fd65 	bl	8002ae0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002016:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002018:	4618      	mov	r0, r3
 800201a:	3738      	adds	r7, #56	@ 0x38
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	e000ed04 	.word	0xe000ed04

08002024 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b090      	sub	sp, #64	@ 0x40
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10b      	bne.n	8002054 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800203c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002040:	f383 8811 	msr	BASEPRI, r3
 8002044:	f3bf 8f6f 	isb	sy
 8002048:	f3bf 8f4f 	dsb	sy
 800204c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800204e:	bf00      	nop
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d103      	bne.n	8002062 <xQueueGenericSendFromISR+0x3e>
 800205a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <xQueueGenericSendFromISR+0x42>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <xQueueGenericSendFromISR+0x44>
 8002066:	2300      	movs	r3, #0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10b      	bne.n	8002084 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800206c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002070:	f383 8811 	msr	BASEPRI, r3
 8002074:	f3bf 8f6f 	isb	sy
 8002078:	f3bf 8f4f 	dsb	sy
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d103      	bne.n	8002092 <xQueueGenericSendFromISR+0x6e>
 800208a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800208c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <xQueueGenericSendFromISR+0x72>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <xQueueGenericSendFromISR+0x74>
 8002096:	2300      	movs	r3, #0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10b      	bne.n	80020b4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800209c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020a0:	f383 8811 	msr	BASEPRI, r3
 80020a4:	f3bf 8f6f 	isb	sy
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	623b      	str	r3, [r7, #32]
}
 80020ae:	bf00      	nop
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80020b4:	f001 fee4 	bl	8003e80 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80020b8:	f3ef 8211 	mrs	r2, BASEPRI
 80020bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020c0:	f383 8811 	msr	BASEPRI, r3
 80020c4:	f3bf 8f6f 	isb	sy
 80020c8:	f3bf 8f4f 	dsb	sy
 80020cc:	61fa      	str	r2, [r7, #28]
 80020ce:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80020d0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80020d2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020dc:	429a      	cmp	r2, r3
 80020de:	d302      	bcc.n	80020e6 <xQueueGenericSendFromISR+0xc2>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d12f      	bne.n	8002146 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80020e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80020ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80020fc:	f000 f912 	bl	8002324 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002100:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d112      	bne.n	8002130 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800210a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800210c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210e:	2b00      	cmp	r3, #0
 8002110:	d016      	beq.n	8002140 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002114:	3324      	adds	r3, #36	@ 0x24
 8002116:	4618      	mov	r0, r3
 8002118:	f000 fefe 	bl	8002f18 <xTaskRemoveFromEventList>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00e      	beq.n	8002140 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00b      	beq.n	8002140 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e007      	b.n	8002140 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002130:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002134:	3301      	adds	r3, #1
 8002136:	b2db      	uxtb	r3, r3
 8002138:	b25a      	sxtb	r2, r3
 800213a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800213c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002140:	2301      	movs	r3, #1
 8002142:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002144:	e001      	b.n	800214a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002146:	2300      	movs	r3, #0
 8002148:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800214a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800214c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002154:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002158:	4618      	mov	r0, r3
 800215a:	3740      	adds	r7, #64	@ 0x40
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	@ 0x30
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800216c:	2300      	movs	r3, #0
 800216e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10b      	bne.n	8002192 <xQueueReceive+0x32>
	__asm volatile
 800217a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800217e:	f383 8811 	msr	BASEPRI, r3
 8002182:	f3bf 8f6f 	isb	sy
 8002186:	f3bf 8f4f 	dsb	sy
 800218a:	623b      	str	r3, [r7, #32]
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	e7fd      	b.n	800218e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d103      	bne.n	80021a0 <xQueueReceive+0x40>
 8002198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800219a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <xQueueReceive+0x44>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <xQueueReceive+0x46>
 80021a4:	2300      	movs	r3, #0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10b      	bne.n	80021c2 <xQueueReceive+0x62>
	__asm volatile
 80021aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ae:	f383 8811 	msr	BASEPRI, r3
 80021b2:	f3bf 8f6f 	isb	sy
 80021b6:	f3bf 8f4f 	dsb	sy
 80021ba:	61fb      	str	r3, [r7, #28]
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	e7fd      	b.n	80021be <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021c2:	f001 f86f 	bl	80032a4 <xTaskGetSchedulerState>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <xQueueReceive+0x72>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <xQueueReceive+0x76>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <xQueueReceive+0x78>
 80021d6:	2300      	movs	r3, #0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10b      	bne.n	80021f4 <xQueueReceive+0x94>
	__asm volatile
 80021dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021e0:	f383 8811 	msr	BASEPRI, r3
 80021e4:	f3bf 8f6f 	isb	sy
 80021e8:	f3bf 8f4f 	dsb	sy
 80021ec:	61bb      	str	r3, [r7, #24]
}
 80021ee:	bf00      	nop
 80021f0:	bf00      	nop
 80021f2:	e7fd      	b.n	80021f0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80021f4:	f001 fd82 	bl	8003cfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	2b00      	cmp	r3, #0
 8002202:	d01f      	beq.n	8002244 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002208:	f000 f8f6 	bl	80023f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	1e5a      	subs	r2, r3, #1
 8002210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002212:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00f      	beq.n	800223c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800221c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221e:	3310      	adds	r3, #16
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fe79 	bl	8002f18 <xTaskRemoveFromEventList>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d007      	beq.n	800223c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800222c:	4b3c      	ldr	r3, [pc, #240]	@ (8002320 <xQueueReceive+0x1c0>)
 800222e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	f3bf 8f4f 	dsb	sy
 8002238:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800223c:	f001 fd8e 	bl	8003d5c <vPortExitCritical>
				return pdPASS;
 8002240:	2301      	movs	r3, #1
 8002242:	e069      	b.n	8002318 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d103      	bne.n	8002252 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800224a:	f001 fd87 	bl	8003d5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800224e:	2300      	movs	r3, #0
 8002250:	e062      	b.n	8002318 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d106      	bne.n	8002266 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002258:	f107 0310 	add.w	r3, r7, #16
 800225c:	4618      	mov	r0, r3
 800225e:	f000 febf 	bl	8002fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002262:	2301      	movs	r3, #1
 8002264:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002266:	f001 fd79 	bl	8003d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800226a:	f000 fc2b 	bl	8002ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800226e:	f001 fd45 	bl	8003cfc <vPortEnterCritical>
 8002272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002274:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002278:	b25b      	sxtb	r3, r3
 800227a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227e:	d103      	bne.n	8002288 <xQueueReceive+0x128>
 8002280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800228e:	b25b      	sxtb	r3, r3
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d103      	bne.n	800229e <xQueueReceive+0x13e>
 8002296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800229e:	f001 fd5d 	bl	8003d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022a2:	1d3a      	adds	r2, r7, #4
 80022a4:	f107 0310 	add.w	r3, r7, #16
 80022a8:	4611      	mov	r1, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 feae 	bl	800300c <xTaskCheckForTimeOut>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d123      	bne.n	80022fe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022b8:	f000 f916 	bl	80024e8 <prvIsQueueEmpty>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d017      	beq.n	80022f2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80022c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c4:	3324      	adds	r3, #36	@ 0x24
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fdd2 	bl	8002e74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80022d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022d2:	f000 f8b7 	bl	8002444 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80022d6:	f000 fc03 	bl	8002ae0 <xTaskResumeAll>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d189      	bne.n	80021f4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80022e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002320 <xQueueReceive+0x1c0>)
 80022e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	f3bf 8f4f 	dsb	sy
 80022ec:	f3bf 8f6f 	isb	sy
 80022f0:	e780      	b.n	80021f4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80022f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022f4:	f000 f8a6 	bl	8002444 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022f8:	f000 fbf2 	bl	8002ae0 <xTaskResumeAll>
 80022fc:	e77a      	b.n	80021f4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80022fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002300:	f000 f8a0 	bl	8002444 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002304:	f000 fbec 	bl	8002ae0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002308:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800230a:	f000 f8ed 	bl	80024e8 <prvIsQueueEmpty>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	f43f af6f 	beq.w	80021f4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002316:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002318:	4618      	mov	r0, r3
 800231a:	3730      	adds	r7, #48	@ 0x30
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	e000ed04 	.word	0xe000ed04

08002324 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002338:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10d      	bne.n	800235e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d14d      	bne.n	80023e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	4618      	mov	r0, r3
 8002350:	f000 ffc6 	bl	80032e0 <xTaskPriorityDisinherit>
 8002354:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	e043      	b.n	80023e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d119      	bne.n	8002398 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6858      	ldr	r0, [r3, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236c:	461a      	mov	r2, r3
 800236e:	68b9      	ldr	r1, [r7, #8]
 8002370:	f002 f83e 	bl	80043f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	441a      	add	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	429a      	cmp	r2, r3
 800238c:	d32b      	bcc.n	80023e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	e026      	b.n	80023e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	68d8      	ldr	r0, [r3, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a0:	461a      	mov	r2, r3
 80023a2:	68b9      	ldr	r1, [r7, #8]
 80023a4:	f002 f824 	bl	80043f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b0:	425b      	negs	r3, r3
 80023b2:	441a      	add	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d207      	bcs.n	80023d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023cc:	425b      	negs	r3, r3
 80023ce:	441a      	add	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d105      	bne.n	80023e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80023ee:	697b      	ldr	r3, [r7, #20]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d018      	beq.n	800243c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	441a      	add	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	429a      	cmp	r2, r3
 8002422:	d303      	bcc.n	800242c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68d9      	ldr	r1, [r3, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	461a      	mov	r2, r3
 8002436:	6838      	ldr	r0, [r7, #0]
 8002438:	f001 ffda 	bl	80043f0 <memcpy>
	}
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800244c:	f001 fc56 	bl	8003cfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002456:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002458:	e011      	b.n	800247e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245e:	2b00      	cmp	r3, #0
 8002460:	d012      	beq.n	8002488 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3324      	adds	r3, #36	@ 0x24
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fd56 	bl	8002f18 <xTaskRemoveFromEventList>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002472:	f000 fe2f 	bl	80030d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	3b01      	subs	r3, #1
 800247a:	b2db      	uxtb	r3, r3
 800247c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800247e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002482:	2b00      	cmp	r3, #0
 8002484:	dce9      	bgt.n	800245a <prvUnlockQueue+0x16>
 8002486:	e000      	b.n	800248a <prvUnlockQueue+0x46>
					break;
 8002488:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	22ff      	movs	r2, #255	@ 0xff
 800248e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002492:	f001 fc63 	bl	8003d5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002496:	f001 fc31 	bl	8003cfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80024a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80024a2:	e011      	b.n	80024c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d012      	beq.n	80024d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3310      	adds	r3, #16
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fd31 	bl	8002f18 <xTaskRemoveFromEventList>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80024bc:	f000 fe0a 	bl	80030d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80024c0:	7bbb      	ldrb	r3, [r7, #14]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80024c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	dce9      	bgt.n	80024a4 <prvUnlockQueue+0x60>
 80024d0:	e000      	b.n	80024d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80024d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	22ff      	movs	r2, #255	@ 0xff
 80024d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80024dc:	f001 fc3e 	bl	8003d5c <vPortExitCritical>
}
 80024e0:	bf00      	nop
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80024f0:	f001 fc04 	bl	8003cfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d102      	bne.n	8002502 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80024fc:	2301      	movs	r3, #1
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	e001      	b.n	8002506 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002506:	f001 fc29 	bl	8003d5c <vPortExitCritical>

	return xReturn;
 800250a:	68fb      	ldr	r3, [r7, #12]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800251c:	f001 fbee 	bl	8003cfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002528:	429a      	cmp	r2, r3
 800252a:	d102      	bne.n	8002532 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800252c:	2301      	movs	r3, #1
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	e001      	b.n	8002536 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002536:	f001 fc11 	bl	8003d5c <vPortExitCritical>

	return xReturn;
 800253a:	68fb      	ldr	r3, [r7, #12]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	e014      	b.n	800257e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002554:	4a0e      	ldr	r2, [pc, #56]	@ (8002590 <vQueueAddToRegistry+0x4c>)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10b      	bne.n	8002578 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002560:	490b      	ldr	r1, [pc, #44]	@ (8002590 <vQueueAddToRegistry+0x4c>)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800256a:	4a09      	ldr	r2, [pc, #36]	@ (8002590 <vQueueAddToRegistry+0x4c>)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4413      	add	r3, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002576:	e006      	b.n	8002586 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3301      	adds	r3, #1
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b07      	cmp	r3, #7
 8002582:	d9e7      	bls.n	8002554 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002584:	bf00      	nop
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	20000828 	.word	0x20000828

08002594 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80025a4:	f001 fbaa 	bl	8003cfc <vPortEnterCritical>
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025ae:	b25b      	sxtb	r3, r3
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d103      	bne.n	80025be <vQueueWaitForMessageRestricted+0x2a>
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025c4:	b25b      	sxtb	r3, r3
 80025c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ca:	d103      	bne.n	80025d4 <vQueueWaitForMessageRestricted+0x40>
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025d4:	f001 fbc2 	bl	8003d5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d106      	bne.n	80025ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	3324      	adds	r3, #36	@ 0x24
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	68b9      	ldr	r1, [r7, #8]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fc69 	bl	8002ec0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80025ee:	6978      	ldr	r0, [r7, #20]
 80025f0:	f7ff ff28 	bl	8002444 <prvUnlockQueue>
	}
 80025f4:	bf00      	nop
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08e      	sub	sp, #56	@ 0x38
 8002600:	af04      	add	r7, sp, #16
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800260a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10b      	bne.n	8002628 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	623b      	str	r3, [r7, #32]
}
 8002622:	bf00      	nop
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10b      	bne.n	8002646 <xTaskCreateStatic+0x4a>
	__asm volatile
 800262e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002632:	f383 8811 	msr	BASEPRI, r3
 8002636:	f3bf 8f6f 	isb	sy
 800263a:	f3bf 8f4f 	dsb	sy
 800263e:	61fb      	str	r3, [r7, #28]
}
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	e7fd      	b.n	8002642 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002646:	23a8      	movs	r3, #168	@ 0xa8
 8002648:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2ba8      	cmp	r3, #168	@ 0xa8
 800264e:	d00b      	beq.n	8002668 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002654:	f383 8811 	msr	BASEPRI, r3
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	61bb      	str	r3, [r7, #24]
}
 8002662:	bf00      	nop
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002668:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800266a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01e      	beq.n	80026ae <xTaskCreateStatic+0xb2>
 8002670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002672:	2b00      	cmp	r3, #0
 8002674:	d01b      	beq.n	80026ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002678:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800267e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002682:	2202      	movs	r2, #2
 8002684:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002688:	2300      	movs	r3, #0
 800268a:	9303      	str	r3, [sp, #12]
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	9302      	str	r3, [sp, #8]
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f851 	bl	8002748 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80026a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026a8:	f000 f8f6 	bl	8002898 <prvAddNewTaskToReadyList>
 80026ac:	e001      	b.n	80026b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80026b2:	697b      	ldr	r3, [r7, #20]
	}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3728      	adds	r7, #40	@ 0x28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08c      	sub	sp, #48	@ 0x30
 80026c0:	af04      	add	r7, sp, #16
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f001 fc15 	bl	8003f00 <pvPortMalloc>
 80026d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00e      	beq.n	80026fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80026de:	20a8      	movs	r0, #168	@ 0xa8
 80026e0:	f001 fc0e 	bl	8003f00 <pvPortMalloc>
 80026e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80026f2:	e005      	b.n	8002700 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80026f4:	6978      	ldr	r0, [r7, #20]
 80026f6:	f001 fcd1 	bl	800409c <vPortFree>
 80026fa:	e001      	b.n	8002700 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d017      	beq.n	8002736 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800270e:	88fa      	ldrh	r2, [r7, #6]
 8002710:	2300      	movs	r3, #0
 8002712:	9303      	str	r3, [sp, #12]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	9302      	str	r3, [sp, #8]
 8002718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f80f 	bl	8002748 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800272a:	69f8      	ldr	r0, [r7, #28]
 800272c:	f000 f8b4 	bl	8002898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002730:	2301      	movs	r3, #1
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	e002      	b.n	800273c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002736:	f04f 33ff 	mov.w	r3, #4294967295
 800273a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800273c:	69bb      	ldr	r3, [r7, #24]
	}
 800273e:	4618      	mov	r0, r3
 8002740:	3720      	adds	r7, #32
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002758:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	461a      	mov	r2, r3
 8002760:	21a5      	movs	r1, #165	@ 0xa5
 8002762:	f001 fdb9 	bl	80042d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002770:	3b01      	subs	r3, #1
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	f023 0307 	bic.w	r3, r3, #7
 800277e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00b      	beq.n	80027a2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800278a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800278e:	f383 8811 	msr	BASEPRI, r3
 8002792:	f3bf 8f6f 	isb	sy
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	617b      	str	r3, [r7, #20]
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	e7fd      	b.n	800279e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d01f      	beq.n	80027e8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027a8:	2300      	movs	r3, #0
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	e012      	b.n	80027d4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	4413      	add	r3, r2
 80027b4:	7819      	ldrb	r1, [r3, #0]
 80027b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	4413      	add	r3, r2
 80027bc:	3334      	adds	r3, #52	@ 0x34
 80027be:	460a      	mov	r2, r1
 80027c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	4413      	add	r3, r2
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d006      	beq.n	80027dc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3301      	adds	r3, #1
 80027d2:	61fb      	str	r3, [r7, #28]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	2b0f      	cmp	r3, #15
 80027d8:	d9e9      	bls.n	80027ae <prvInitialiseNewTask+0x66>
 80027da:	e000      	b.n	80027de <prvInitialiseNewTask+0x96>
			{
				break;
 80027dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027e6:	e003      	b.n	80027f0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80027e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80027f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f2:	2b37      	cmp	r3, #55	@ 0x37
 80027f4:	d901      	bls.n	80027fa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80027f6:	2337      	movs	r3, #55	@ 0x37
 80027f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80027fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002804:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002808:	2200      	movs	r2, #0
 800280a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800280c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800280e:	3304      	adds	r3, #4
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff f96a 	bl	8001aea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002818:	3318      	adds	r3, #24
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff f965 	bl	8001aea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002824:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002828:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800282c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002834:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002838:	2200      	movs	r2, #0
 800283a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800283e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002840:	2200      	movs	r2, #0
 8002842:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002848:	3354      	adds	r3, #84	@ 0x54
 800284a:	224c      	movs	r2, #76	@ 0x4c
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f001 fd42 	bl	80042d8 <memset>
 8002854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002856:	4a0d      	ldr	r2, [pc, #52]	@ (800288c <prvInitialiseNewTask+0x144>)
 8002858:	659a      	str	r2, [r3, #88]	@ 0x58
 800285a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285c:	4a0c      	ldr	r2, [pc, #48]	@ (8002890 <prvInitialiseNewTask+0x148>)
 800285e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002862:	4a0c      	ldr	r2, [pc, #48]	@ (8002894 <prvInitialiseNewTask+0x14c>)
 8002864:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	68f9      	ldr	r1, [r7, #12]
 800286a:	69b8      	ldr	r0, [r7, #24]
 800286c:	f001 f954 	bl	8003b18 <pxPortInitialiseStack>
 8002870:	4602      	mov	r2, r0
 8002872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002874:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800287c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800287e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002880:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002882:	bf00      	nop
 8002884:	3720      	adds	r7, #32
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20001abc 	.word	0x20001abc
 8002890:	20001b24 	.word	0x20001b24
 8002894:	20001b8c 	.word	0x20001b8c

08002898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80028a0:	f001 fa2c 	bl	8003cfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80028a4:	4b2d      	ldr	r3, [pc, #180]	@ (800295c <prvAddNewTaskToReadyList+0xc4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3301      	adds	r3, #1
 80028aa:	4a2c      	ldr	r2, [pc, #176]	@ (800295c <prvAddNewTaskToReadyList+0xc4>)
 80028ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80028ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002960 <prvAddNewTaskToReadyList+0xc8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80028b6:	4a2a      	ldr	r2, [pc, #168]	@ (8002960 <prvAddNewTaskToReadyList+0xc8>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80028bc:	4b27      	ldr	r3, [pc, #156]	@ (800295c <prvAddNewTaskToReadyList+0xc4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d110      	bne.n	80028e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80028c4:	f000 fc2a 	bl	800311c <prvInitialiseTaskLists>
 80028c8:	e00d      	b.n	80028e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80028ca:	4b26      	ldr	r3, [pc, #152]	@ (8002964 <prvAddNewTaskToReadyList+0xcc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028d2:	4b23      	ldr	r3, [pc, #140]	@ (8002960 <prvAddNewTaskToReadyList+0xc8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028dc:	429a      	cmp	r2, r3
 80028de:	d802      	bhi.n	80028e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80028e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002960 <prvAddNewTaskToReadyList+0xc8>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80028e6:	4b20      	ldr	r3, [pc, #128]	@ (8002968 <prvAddNewTaskToReadyList+0xd0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3301      	adds	r3, #1
 80028ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002968 <prvAddNewTaskToReadyList+0xd0>)
 80028ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80028f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002968 <prvAddNewTaskToReadyList+0xd0>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028fc:	4b1b      	ldr	r3, [pc, #108]	@ (800296c <prvAddNewTaskToReadyList+0xd4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d903      	bls.n	800290c <prvAddNewTaskToReadyList+0x74>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002908:	4a18      	ldr	r2, [pc, #96]	@ (800296c <prvAddNewTaskToReadyList+0xd4>)
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4a15      	ldr	r2, [pc, #84]	@ (8002970 <prvAddNewTaskToReadyList+0xd8>)
 800291a:	441a      	add	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f7ff f8ed 	bl	8001b02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002928:	f001 fa18 	bl	8003d5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800292c:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <prvAddNewTaskToReadyList+0xcc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00e      	beq.n	8002952 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002934:	4b0a      	ldr	r3, [pc, #40]	@ (8002960 <prvAddNewTaskToReadyList+0xc8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293e:	429a      	cmp	r2, r3
 8002940:	d207      	bcs.n	8002952 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002942:	4b0c      	ldr	r3, [pc, #48]	@ (8002974 <prvAddNewTaskToReadyList+0xdc>)
 8002944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000d3c 	.word	0x20000d3c
 8002960:	20000868 	.word	0x20000868
 8002964:	20000d48 	.word	0x20000d48
 8002968:	20000d58 	.word	0x20000d58
 800296c:	20000d44 	.word	0x20000d44
 8002970:	2000086c 	.word	0x2000086c
 8002974:	e000ed04 	.word	0xe000ed04

08002978 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d018      	beq.n	80029bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800298a:	4b14      	ldr	r3, [pc, #80]	@ (80029dc <vTaskDelay+0x64>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00b      	beq.n	80029aa <vTaskDelay+0x32>
	__asm volatile
 8002992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002996:	f383 8811 	msr	BASEPRI, r3
 800299a:	f3bf 8f6f 	isb	sy
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	60bb      	str	r3, [r7, #8]
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	e7fd      	b.n	80029a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80029aa:	f000 f88b 	bl	8002ac4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80029ae:	2100      	movs	r1, #0
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 fd05 	bl	80033c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80029b6:	f000 f893 	bl	8002ae0 <xTaskResumeAll>
 80029ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d107      	bne.n	80029d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80029c2:	4b07      	ldr	r3, [pc, #28]	@ (80029e0 <vTaskDelay+0x68>)
 80029c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80029d2:	bf00      	nop
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000d64 	.word	0x20000d64
 80029e0:	e000ed04 	.word	0xe000ed04

080029e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	@ 0x28
 80029e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80029f2:	463a      	mov	r2, r7
 80029f4:	1d39      	adds	r1, r7, #4
 80029f6:	f107 0308 	add.w	r3, r7, #8
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff f824 	bl	8001a48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002a00:	6839      	ldr	r1, [r7, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	9202      	str	r2, [sp, #8]
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	460a      	mov	r2, r1
 8002a12:	4924      	ldr	r1, [pc, #144]	@ (8002aa4 <vTaskStartScheduler+0xc0>)
 8002a14:	4824      	ldr	r0, [pc, #144]	@ (8002aa8 <vTaskStartScheduler+0xc4>)
 8002a16:	f7ff fdf1 	bl	80025fc <xTaskCreateStatic>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4a23      	ldr	r2, [pc, #140]	@ (8002aac <vTaskStartScheduler+0xc8>)
 8002a1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002a20:	4b22      	ldr	r3, [pc, #136]	@ (8002aac <vTaskStartScheduler+0xc8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	e001      	b.n	8002a32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d102      	bne.n	8002a3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002a38:	f000 fd16 	bl	8003468 <xTimerCreateTimerTask>
 8002a3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d11b      	bne.n	8002a7c <vTaskStartScheduler+0x98>
	__asm volatile
 8002a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a48:	f383 8811 	msr	BASEPRI, r3
 8002a4c:	f3bf 8f6f 	isb	sy
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	613b      	str	r3, [r7, #16]
}
 8002a56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002a58:	4b15      	ldr	r3, [pc, #84]	@ (8002ab0 <vTaskStartScheduler+0xcc>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	3354      	adds	r3, #84	@ 0x54
 8002a5e:	4a15      	ldr	r2, [pc, #84]	@ (8002ab4 <vTaskStartScheduler+0xd0>)
 8002a60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002a62:	4b15      	ldr	r3, [pc, #84]	@ (8002ab8 <vTaskStartScheduler+0xd4>)
 8002a64:	f04f 32ff 	mov.w	r2, #4294967295
 8002a68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002a6a:	4b14      	ldr	r3, [pc, #80]	@ (8002abc <vTaskStartScheduler+0xd8>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a70:	4b13      	ldr	r3, [pc, #76]	@ (8002ac0 <vTaskStartScheduler+0xdc>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002a76:	f001 f8cf 	bl	8003c18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002a7a:	e00f      	b.n	8002a9c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a82:	d10b      	bne.n	8002a9c <vTaskStartScheduler+0xb8>
	__asm volatile
 8002a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a88:	f383 8811 	msr	BASEPRI, r3
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	60fb      	str	r3, [r7, #12]
}
 8002a96:	bf00      	nop
 8002a98:	bf00      	nop
 8002a9a:	e7fd      	b.n	8002a98 <vTaskStartScheduler+0xb4>
}
 8002a9c:	bf00      	nop
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	080044f0 	.word	0x080044f0
 8002aa8:	080030ed 	.word	0x080030ed
 8002aac:	20000d60 	.word	0x20000d60
 8002ab0:	20000868 	.word	0x20000868
 8002ab4:	20000010 	.word	0x20000010
 8002ab8:	20000d5c 	.word	0x20000d5c
 8002abc:	20000d48 	.word	0x20000d48
 8002ac0:	20000d40 	.word	0x20000d40

08002ac4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002ac8:	4b04      	ldr	r3, [pc, #16]	@ (8002adc <vTaskSuspendAll+0x18>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	4a03      	ldr	r2, [pc, #12]	@ (8002adc <vTaskSuspendAll+0x18>)
 8002ad0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000d64 	.word	0x20000d64

08002ae0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002aee:	4b42      	ldr	r3, [pc, #264]	@ (8002bf8 <xTaskResumeAll+0x118>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10b      	bne.n	8002b0e <xTaskResumeAll+0x2e>
	__asm volatile
 8002af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002afa:	f383 8811 	msr	BASEPRI, r3
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	603b      	str	r3, [r7, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	e7fd      	b.n	8002b0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002b0e:	f001 f8f5 	bl	8003cfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002b12:	4b39      	ldr	r3, [pc, #228]	@ (8002bf8 <xTaskResumeAll+0x118>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	4a37      	ldr	r2, [pc, #220]	@ (8002bf8 <xTaskResumeAll+0x118>)
 8002b1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b1c:	4b36      	ldr	r3, [pc, #216]	@ (8002bf8 <xTaskResumeAll+0x118>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d162      	bne.n	8002bea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b24:	4b35      	ldr	r3, [pc, #212]	@ (8002bfc <xTaskResumeAll+0x11c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d05e      	beq.n	8002bea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b2c:	e02f      	b.n	8002b8e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b2e:	4b34      	ldr	r3, [pc, #208]	@ (8002c00 <xTaskResumeAll+0x120>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3318      	adds	r3, #24
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff f83c 	bl	8001bb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	3304      	adds	r3, #4
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff f837 	bl	8001bb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c04 <xTaskResumeAll+0x124>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d903      	bls.n	8002b5e <xTaskResumeAll+0x7e>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5a:	4a2a      	ldr	r2, [pc, #168]	@ (8002c04 <xTaskResumeAll+0x124>)
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4a27      	ldr	r2, [pc, #156]	@ (8002c08 <xTaskResumeAll+0x128>)
 8002b6c:	441a      	add	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3304      	adds	r3, #4
 8002b72:	4619      	mov	r1, r3
 8002b74:	4610      	mov	r0, r2
 8002b76:	f7fe ffc4 	bl	8001b02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b7e:	4b23      	ldr	r3, [pc, #140]	@ (8002c0c <xTaskResumeAll+0x12c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d302      	bcc.n	8002b8e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002b88:	4b21      	ldr	r3, [pc, #132]	@ (8002c10 <xTaskResumeAll+0x130>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c00 <xTaskResumeAll+0x120>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1cb      	bne.n	8002b2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002b9c:	f000 fb62 	bl	8003264 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c14 <xTaskResumeAll+0x134>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d010      	beq.n	8002bce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002bac:	f000 f844 	bl	8002c38 <xTaskIncrementTick>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002bb6:	4b16      	ldr	r3, [pc, #88]	@ (8002c10 <xTaskResumeAll+0x130>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f1      	bne.n	8002bac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8002bc8:	4b12      	ldr	r3, [pc, #72]	@ (8002c14 <xTaskResumeAll+0x134>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002bce:	4b10      	ldr	r3, [pc, #64]	@ (8002c10 <xTaskResumeAll+0x130>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002bda:	4b0f      	ldr	r3, [pc, #60]	@ (8002c18 <xTaskResumeAll+0x138>)
 8002bdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002bea:	f001 f8b7 	bl	8003d5c <vPortExitCritical>

	return xAlreadyYielded;
 8002bee:	68bb      	ldr	r3, [r7, #8]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20000d64 	.word	0x20000d64
 8002bfc:	20000d3c 	.word	0x20000d3c
 8002c00:	20000cfc 	.word	0x20000cfc
 8002c04:	20000d44 	.word	0x20000d44
 8002c08:	2000086c 	.word	0x2000086c
 8002c0c:	20000868 	.word	0x20000868
 8002c10:	20000d50 	.word	0x20000d50
 8002c14:	20000d4c 	.word	0x20000d4c
 8002c18:	e000ed04 	.word	0xe000ed04

08002c1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002c22:	4b04      	ldr	r3, [pc, #16]	@ (8002c34 <xTaskGetTickCount+0x18>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002c28:	687b      	ldr	r3, [r7, #4]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr
 8002c34:	20000d40 	.word	0x20000d40

08002c38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c42:	4b4f      	ldr	r3, [pc, #316]	@ (8002d80 <xTaskIncrementTick+0x148>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f040 8090 	bne.w	8002d6c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c4c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d84 <xTaskIncrementTick+0x14c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3301      	adds	r3, #1
 8002c52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002c54:	4a4b      	ldr	r2, [pc, #300]	@ (8002d84 <xTaskIncrementTick+0x14c>)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d121      	bne.n	8002ca4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002c60:	4b49      	ldr	r3, [pc, #292]	@ (8002d88 <xTaskIncrementTick+0x150>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00b      	beq.n	8002c82 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	603b      	str	r3, [r7, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	e7fd      	b.n	8002c7e <xTaskIncrementTick+0x46>
 8002c82:	4b41      	ldr	r3, [pc, #260]	@ (8002d88 <xTaskIncrementTick+0x150>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	4b40      	ldr	r3, [pc, #256]	@ (8002d8c <xTaskIncrementTick+0x154>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a3e      	ldr	r2, [pc, #248]	@ (8002d88 <xTaskIncrementTick+0x150>)
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	4a3e      	ldr	r2, [pc, #248]	@ (8002d8c <xTaskIncrementTick+0x154>)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4b3e      	ldr	r3, [pc, #248]	@ (8002d90 <xTaskIncrementTick+0x158>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	4a3c      	ldr	r2, [pc, #240]	@ (8002d90 <xTaskIncrementTick+0x158>)
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	f000 fae0 	bl	8003264 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8002d94 <xTaskIncrementTick+0x15c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d349      	bcc.n	8002d42 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cae:	4b36      	ldr	r3, [pc, #216]	@ (8002d88 <xTaskIncrementTick+0x150>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d104      	bne.n	8002cc2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cb8:	4b36      	ldr	r3, [pc, #216]	@ (8002d94 <xTaskIncrementTick+0x15c>)
 8002cba:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbe:	601a      	str	r2, [r3, #0]
					break;
 8002cc0:	e03f      	b.n	8002d42 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cc2:	4b31      	ldr	r3, [pc, #196]	@ (8002d88 <xTaskIncrementTick+0x150>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d203      	bcs.n	8002ce2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002cda:	4a2e      	ldr	r2, [pc, #184]	@ (8002d94 <xTaskIncrementTick+0x15c>)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ce0:	e02f      	b.n	8002d42 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe ff66 	bl	8001bb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d004      	beq.n	8002cfe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	3318      	adds	r3, #24
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fe ff5d 	bl	8001bb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d02:	4b25      	ldr	r3, [pc, #148]	@ (8002d98 <xTaskIncrementTick+0x160>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d903      	bls.n	8002d12 <xTaskIncrementTick+0xda>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0e:	4a22      	ldr	r2, [pc, #136]	@ (8002d98 <xTaskIncrementTick+0x160>)
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8002d9c <xTaskIncrementTick+0x164>)
 8002d20:	441a      	add	r2, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	3304      	adds	r3, #4
 8002d26:	4619      	mov	r1, r3
 8002d28:	4610      	mov	r0, r2
 8002d2a:	f7fe feea 	bl	8001b02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d32:	4b1b      	ldr	r3, [pc, #108]	@ (8002da0 <xTaskIncrementTick+0x168>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d3b8      	bcc.n	8002cae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d40:	e7b5      	b.n	8002cae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d42:	4b17      	ldr	r3, [pc, #92]	@ (8002da0 <xTaskIncrementTick+0x168>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d48:	4914      	ldr	r1, [pc, #80]	@ (8002d9c <xTaskIncrementTick+0x164>)
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d901      	bls.n	8002d5e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002d5e:	4b11      	ldr	r3, [pc, #68]	@ (8002da4 <xTaskIncrementTick+0x16c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d007      	beq.n	8002d76 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8002d66:	2301      	movs	r3, #1
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	e004      	b.n	8002d76 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002da8 <xTaskIncrementTick+0x170>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3301      	adds	r3, #1
 8002d72:	4a0d      	ldr	r2, [pc, #52]	@ (8002da8 <xTaskIncrementTick+0x170>)
 8002d74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002d76:	697b      	ldr	r3, [r7, #20]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000d64 	.word	0x20000d64
 8002d84:	20000d40 	.word	0x20000d40
 8002d88:	20000cf4 	.word	0x20000cf4
 8002d8c:	20000cf8 	.word	0x20000cf8
 8002d90:	20000d54 	.word	0x20000d54
 8002d94:	20000d5c 	.word	0x20000d5c
 8002d98:	20000d44 	.word	0x20000d44
 8002d9c:	2000086c 	.word	0x2000086c
 8002da0:	20000868 	.word	0x20000868
 8002da4:	20000d50 	.word	0x20000d50
 8002da8:	20000d4c 	.word	0x20000d4c

08002dac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002db2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e5c <vTaskSwitchContext+0xb0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002dba:	4b29      	ldr	r3, [pc, #164]	@ (8002e60 <vTaskSwitchContext+0xb4>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002dc0:	e047      	b.n	8002e52 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8002dc2:	4b27      	ldr	r3, [pc, #156]	@ (8002e60 <vTaskSwitchContext+0xb4>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dc8:	4b26      	ldr	r3, [pc, #152]	@ (8002e64 <vTaskSwitchContext+0xb8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	e011      	b.n	8002df4 <vTaskSwitchContext+0x48>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10b      	bne.n	8002dee <vTaskSwitchContext+0x42>
	__asm volatile
 8002dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dda:	f383 8811 	msr	BASEPRI, r3
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	607b      	str	r3, [r7, #4]
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	e7fd      	b.n	8002dea <vTaskSwitchContext+0x3e>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	3b01      	subs	r3, #1
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	491c      	ldr	r1, [pc, #112]	@ (8002e68 <vTaskSwitchContext+0xbc>)
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0e3      	beq.n	8002dd0 <vTaskSwitchContext+0x24>
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4a15      	ldr	r2, [pc, #84]	@ (8002e68 <vTaskSwitchContext+0xbc>)
 8002e14:	4413      	add	r3, r2
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	3308      	adds	r3, #8
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d104      	bne.n	8002e38 <vTaskSwitchContext+0x8c>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e6c <vTaskSwitchContext+0xc0>)
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4a08      	ldr	r2, [pc, #32]	@ (8002e64 <vTaskSwitchContext+0xb8>)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002e48:	4b08      	ldr	r3, [pc, #32]	@ (8002e6c <vTaskSwitchContext+0xc0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3354      	adds	r3, #84	@ 0x54
 8002e4e:	4a08      	ldr	r2, [pc, #32]	@ (8002e70 <vTaskSwitchContext+0xc4>)
 8002e50:	6013      	str	r3, [r2, #0]
}
 8002e52:	bf00      	nop
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr
 8002e5c:	20000d64 	.word	0x20000d64
 8002e60:	20000d50 	.word	0x20000d50
 8002e64:	20000d44 	.word	0x20000d44
 8002e68:	2000086c 	.word	0x2000086c
 8002e6c:	20000868 	.word	0x20000868
 8002e70:	20000010 	.word	0x20000010

08002e74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10b      	bne.n	8002e9c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	60fb      	str	r3, [r7, #12]
}
 8002e96:	bf00      	nop
 8002e98:	bf00      	nop
 8002e9a:	e7fd      	b.n	8002e98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e9c:	4b07      	ldr	r3, [pc, #28]	@ (8002ebc <vTaskPlaceOnEventList+0x48>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3318      	adds	r3, #24
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7fe fe4f 	bl	8001b48 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002eaa:	2101      	movs	r1, #1
 8002eac:	6838      	ldr	r0, [r7, #0]
 8002eae:	f000 fa87 	bl	80033c0 <prvAddCurrentTaskToDelayedList>
}
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000868 	.word	0x20000868

08002ec0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10b      	bne.n	8002eea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	617b      	str	r3, [r7, #20]
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	e7fd      	b.n	8002ee6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002eea:	4b0a      	ldr	r3, [pc, #40]	@ (8002f14 <vTaskPlaceOnEventListRestricted+0x54>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3318      	adds	r3, #24
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f7fe fe05 	bl	8001b02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002efe:	f04f 33ff 	mov.w	r3, #4294967295
 8002f02:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	68b8      	ldr	r0, [r7, #8]
 8002f08:	f000 fa5a 	bl	80033c0 <prvAddCurrentTaskToDelayedList>
	}
 8002f0c:	bf00      	nop
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000868 	.word	0x20000868

08002f18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10b      	bne.n	8002f46 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	60fb      	str	r3, [r7, #12]
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	e7fd      	b.n	8002f42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	3318      	adds	r3, #24
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fe34 	bl	8001bb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f50:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc8 <xTaskRemoveFromEventList+0xb0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d11d      	bne.n	8002f94 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe fe2b 	bl	8001bb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f66:	4b19      	ldr	r3, [pc, #100]	@ (8002fcc <xTaskRemoveFromEventList+0xb4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d903      	bls.n	8002f76 <xTaskRemoveFromEventList+0x5e>
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f72:	4a16      	ldr	r2, [pc, #88]	@ (8002fcc <xTaskRemoveFromEventList+0xb4>)
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4a13      	ldr	r2, [pc, #76]	@ (8002fd0 <xTaskRemoveFromEventList+0xb8>)
 8002f84:	441a      	add	r2, r3
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	f7fe fdb8 	bl	8001b02 <vListInsertEnd>
 8002f92:	e005      	b.n	8002fa0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	3318      	adds	r3, #24
 8002f98:	4619      	mov	r1, r3
 8002f9a:	480e      	ldr	r0, [pc, #56]	@ (8002fd4 <xTaskRemoveFromEventList+0xbc>)
 8002f9c:	f7fe fdb1 	bl	8001b02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd8 <xTaskRemoveFromEventList+0xc0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d905      	bls.n	8002fba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fdc <xTaskRemoveFromEventList+0xc4>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	e001      	b.n	8002fbe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002fbe:	697b      	ldr	r3, [r7, #20]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000d64 	.word	0x20000d64
 8002fcc:	20000d44 	.word	0x20000d44
 8002fd0:	2000086c 	.word	0x2000086c
 8002fd4:	20000cfc 	.word	0x20000cfc
 8002fd8:	20000868 	.word	0x20000868
 8002fdc:	20000d50 	.word	0x20000d50

08002fe0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002fe8:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <vTaskInternalSetTimeOutState+0x24>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002ff0:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <vTaskInternalSetTimeOutState+0x28>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	605a      	str	r2, [r3, #4]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000d54 	.word	0x20000d54
 8003008:	20000d40 	.word	0x20000d40

0800300c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10b      	bne.n	8003034 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800301c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	613b      	str	r3, [r7, #16]
}
 800302e:	bf00      	nop
 8003030:	bf00      	nop
 8003032:	e7fd      	b.n	8003030 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10b      	bne.n	8003052 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	60fb      	str	r3, [r7, #12]
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	e7fd      	b.n	800304e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003052:	f000 fe53 	bl	8003cfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003056:	4b1d      	ldr	r3, [pc, #116]	@ (80030cc <xTaskCheckForTimeOut+0xc0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d102      	bne.n	8003076 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003070:	2300      	movs	r3, #0
 8003072:	61fb      	str	r3, [r7, #28]
 8003074:	e023      	b.n	80030be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4b15      	ldr	r3, [pc, #84]	@ (80030d0 <xTaskCheckForTimeOut+0xc4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d007      	beq.n	8003092 <xTaskCheckForTimeOut+0x86>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	429a      	cmp	r2, r3
 800308a:	d302      	bcc.n	8003092 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800308c:	2301      	movs	r3, #1
 800308e:	61fb      	str	r3, [r7, #28]
 8003090:	e015      	b.n	80030be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	429a      	cmp	r2, r3
 800309a:	d20b      	bcs.n	80030b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	1ad2      	subs	r2, r2, r3
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff ff99 	bl	8002fe0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	e004      	b.n	80030be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80030ba:	2301      	movs	r3, #1
 80030bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80030be:	f000 fe4d 	bl	8003d5c <vPortExitCritical>

	return xReturn;
 80030c2:	69fb      	ldr	r3, [r7, #28]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3720      	adds	r7, #32
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20000d40 	.word	0x20000d40
 80030d0:	20000d54 	.word	0x20000d54

080030d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80030d8:	4b03      	ldr	r3, [pc, #12]	@ (80030e8 <vTaskMissedYield+0x14>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
}
 80030de:	bf00      	nop
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20000d50 	.word	0x20000d50

080030ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80030f4:	f000 f852 	bl	800319c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030f8:	4b06      	ldr	r3, [pc, #24]	@ (8003114 <prvIdleTask+0x28>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d9f9      	bls.n	80030f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003100:	4b05      	ldr	r3, [pc, #20]	@ (8003118 <prvIdleTask+0x2c>)
 8003102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003110:	e7f0      	b.n	80030f4 <prvIdleTask+0x8>
 8003112:	bf00      	nop
 8003114:	2000086c 	.word	0x2000086c
 8003118:	e000ed04 	.word	0xe000ed04

0800311c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003122:	2300      	movs	r3, #0
 8003124:	607b      	str	r3, [r7, #4]
 8003126:	e00c      	b.n	8003142 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4a12      	ldr	r2, [pc, #72]	@ (800317c <prvInitialiseTaskLists+0x60>)
 8003134:	4413      	add	r3, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe fcb8 	bl	8001aac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3301      	adds	r3, #1
 8003140:	607b      	str	r3, [r7, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b37      	cmp	r3, #55	@ 0x37
 8003146:	d9ef      	bls.n	8003128 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003148:	480d      	ldr	r0, [pc, #52]	@ (8003180 <prvInitialiseTaskLists+0x64>)
 800314a:	f7fe fcaf 	bl	8001aac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800314e:	480d      	ldr	r0, [pc, #52]	@ (8003184 <prvInitialiseTaskLists+0x68>)
 8003150:	f7fe fcac 	bl	8001aac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003154:	480c      	ldr	r0, [pc, #48]	@ (8003188 <prvInitialiseTaskLists+0x6c>)
 8003156:	f7fe fca9 	bl	8001aac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800315a:	480c      	ldr	r0, [pc, #48]	@ (800318c <prvInitialiseTaskLists+0x70>)
 800315c:	f7fe fca6 	bl	8001aac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003160:	480b      	ldr	r0, [pc, #44]	@ (8003190 <prvInitialiseTaskLists+0x74>)
 8003162:	f7fe fca3 	bl	8001aac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003166:	4b0b      	ldr	r3, [pc, #44]	@ (8003194 <prvInitialiseTaskLists+0x78>)
 8003168:	4a05      	ldr	r2, [pc, #20]	@ (8003180 <prvInitialiseTaskLists+0x64>)
 800316a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800316c:	4b0a      	ldr	r3, [pc, #40]	@ (8003198 <prvInitialiseTaskLists+0x7c>)
 800316e:	4a05      	ldr	r2, [pc, #20]	@ (8003184 <prvInitialiseTaskLists+0x68>)
 8003170:	601a      	str	r2, [r3, #0]
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	2000086c 	.word	0x2000086c
 8003180:	20000ccc 	.word	0x20000ccc
 8003184:	20000ce0 	.word	0x20000ce0
 8003188:	20000cfc 	.word	0x20000cfc
 800318c:	20000d10 	.word	0x20000d10
 8003190:	20000d28 	.word	0x20000d28
 8003194:	20000cf4 	.word	0x20000cf4
 8003198:	20000cf8 	.word	0x20000cf8

0800319c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031a2:	e019      	b.n	80031d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80031a4:	f000 fdaa 	bl	8003cfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031a8:	4b10      	ldr	r3, [pc, #64]	@ (80031ec <prvCheckTasksWaitingTermination+0x50>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3304      	adds	r3, #4
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fe fcff 	bl	8001bb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80031ba:	4b0d      	ldr	r3, [pc, #52]	@ (80031f0 <prvCheckTasksWaitingTermination+0x54>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3b01      	subs	r3, #1
 80031c0:	4a0b      	ldr	r2, [pc, #44]	@ (80031f0 <prvCheckTasksWaitingTermination+0x54>)
 80031c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80031c4:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <prvCheckTasksWaitingTermination+0x58>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	4a0a      	ldr	r2, [pc, #40]	@ (80031f4 <prvCheckTasksWaitingTermination+0x58>)
 80031cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80031ce:	f000 fdc5 	bl	8003d5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f810 	bl	80031f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031d8:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <prvCheckTasksWaitingTermination+0x58>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e1      	bne.n	80031a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80031e0:	bf00      	nop
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000d10 	.word	0x20000d10
 80031f0:	20000d3c 	.word	0x20000d3c
 80031f4:	20000d24 	.word	0x20000d24

080031f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3354      	adds	r3, #84	@ 0x54
 8003204:	4618      	mov	r0, r3
 8003206:	f001 f86f 	bl	80042e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003210:	2b00      	cmp	r3, #0
 8003212:	d108      	bne.n	8003226 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003218:	4618      	mov	r0, r3
 800321a:	f000 ff3f 	bl	800409c <vPortFree>
				vPortFree( pxTCB );
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 ff3c 	bl	800409c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003224:	e019      	b.n	800325a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800322c:	2b01      	cmp	r3, #1
 800322e:	d103      	bne.n	8003238 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 ff33 	bl	800409c <vPortFree>
	}
 8003236:	e010      	b.n	800325a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800323e:	2b02      	cmp	r3, #2
 8003240:	d00b      	beq.n	800325a <prvDeleteTCB+0x62>
	__asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	60fb      	str	r3, [r7, #12]
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	e7fd      	b.n	8003256 <prvDeleteTCB+0x5e>
	}
 800325a:	bf00      	nop
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800326a:	4b0c      	ldr	r3, [pc, #48]	@ (800329c <prvResetNextTaskUnblockTime+0x38>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d104      	bne.n	800327e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003274:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <prvResetNextTaskUnblockTime+0x3c>)
 8003276:	f04f 32ff 	mov.w	r2, #4294967295
 800327a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800327c:	e008      	b.n	8003290 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800327e:	4b07      	ldr	r3, [pc, #28]	@ (800329c <prvResetNextTaskUnblockTime+0x38>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4a04      	ldr	r2, [pc, #16]	@ (80032a0 <prvResetNextTaskUnblockTime+0x3c>)
 800328e:	6013      	str	r3, [r2, #0]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000cf4 	.word	0x20000cf4
 80032a0:	20000d5c 	.word	0x20000d5c

080032a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80032aa:	4b0b      	ldr	r3, [pc, #44]	@ (80032d8 <xTaskGetSchedulerState+0x34>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d102      	bne.n	80032b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80032b2:	2301      	movs	r3, #1
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	e008      	b.n	80032ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032b8:	4b08      	ldr	r3, [pc, #32]	@ (80032dc <xTaskGetSchedulerState+0x38>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d102      	bne.n	80032c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80032c0:	2302      	movs	r3, #2
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	e001      	b.n	80032ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80032c6:	2300      	movs	r3, #0
 80032c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80032ca:	687b      	ldr	r3, [r7, #4]
	}
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000d48 	.word	0x20000d48
 80032dc:	20000d64 	.word	0x20000d64

080032e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d058      	beq.n	80033a8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80032f6:	4b2f      	ldr	r3, [pc, #188]	@ (80033b4 <xTaskPriorityDisinherit+0xd4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d00b      	beq.n	8003318 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	60fb      	str	r3, [r7, #12]
}
 8003312:	bf00      	nop
 8003314:	bf00      	nop
 8003316:	e7fd      	b.n	8003314 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10b      	bne.n	8003338 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	60bb      	str	r3, [r7, #8]
}
 8003332:	bf00      	nop
 8003334:	bf00      	nop
 8003336:	e7fd      	b.n	8003334 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800333c:	1e5a      	subs	r2, r3, #1
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800334a:	429a      	cmp	r2, r3
 800334c:	d02c      	beq.n	80033a8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003352:	2b00      	cmp	r3, #0
 8003354:	d128      	bne.n	80033a8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	3304      	adds	r3, #4
 800335a:	4618      	mov	r0, r3
 800335c:	f7fe fc2c 	bl	8001bb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003378:	4b0f      	ldr	r3, [pc, #60]	@ (80033b8 <xTaskPriorityDisinherit+0xd8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d903      	bls.n	8003388 <xTaskPriorityDisinherit+0xa8>
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003384:	4a0c      	ldr	r2, [pc, #48]	@ (80033b8 <xTaskPriorityDisinherit+0xd8>)
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4a09      	ldr	r2, [pc, #36]	@ (80033bc <xTaskPriorityDisinherit+0xdc>)
 8003396:	441a      	add	r2, r3
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	3304      	adds	r3, #4
 800339c:	4619      	mov	r1, r3
 800339e:	4610      	mov	r0, r2
 80033a0:	f7fe fbaf 	bl	8001b02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80033a4:	2301      	movs	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80033a8:	697b      	ldr	r3, [r7, #20]
	}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000868 	.word	0x20000868
 80033b8:	20000d44 	.word	0x20000d44
 80033bc:	2000086c 	.word	0x2000086c

080033c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80033ca:	4b21      	ldr	r3, [pc, #132]	@ (8003450 <prvAddCurrentTaskToDelayedList+0x90>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033d0:	4b20      	ldr	r3, [pc, #128]	@ (8003454 <prvAddCurrentTaskToDelayedList+0x94>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3304      	adds	r3, #4
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fbee 	bl	8001bb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e2:	d10a      	bne.n	80033fa <prvAddCurrentTaskToDelayedList+0x3a>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003454 <prvAddCurrentTaskToDelayedList+0x94>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3304      	adds	r3, #4
 80033f0:	4619      	mov	r1, r3
 80033f2:	4819      	ldr	r0, [pc, #100]	@ (8003458 <prvAddCurrentTaskToDelayedList+0x98>)
 80033f4:	f7fe fb85 	bl	8001b02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033f8:	e026      	b.n	8003448 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003402:	4b14      	ldr	r3, [pc, #80]	@ (8003454 <prvAddCurrentTaskToDelayedList+0x94>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	429a      	cmp	r2, r3
 8003410:	d209      	bcs.n	8003426 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003412:	4b12      	ldr	r3, [pc, #72]	@ (800345c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4b0f      	ldr	r3, [pc, #60]	@ (8003454 <prvAddCurrentTaskToDelayedList+0x94>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3304      	adds	r3, #4
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f7fe fb92 	bl	8001b48 <vListInsert>
}
 8003424:	e010      	b.n	8003448 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4b0a      	ldr	r3, [pc, #40]	@ (8003454 <prvAddCurrentTaskToDelayedList+0x94>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3304      	adds	r3, #4
 8003430:	4619      	mov	r1, r3
 8003432:	4610      	mov	r0, r2
 8003434:	f7fe fb88 	bl	8001b48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003438:	4b0a      	ldr	r3, [pc, #40]	@ (8003464 <prvAddCurrentTaskToDelayedList+0xa4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	429a      	cmp	r2, r3
 8003440:	d202      	bcs.n	8003448 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003442:	4a08      	ldr	r2, [pc, #32]	@ (8003464 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	6013      	str	r3, [r2, #0]
}
 8003448:	bf00      	nop
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20000d40 	.word	0x20000d40
 8003454:	20000868 	.word	0x20000868
 8003458:	20000d28 	.word	0x20000d28
 800345c:	20000cf8 	.word	0x20000cf8
 8003460:	20000cf4 	.word	0x20000cf4
 8003464:	20000d5c 	.word	0x20000d5c

08003468 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	@ 0x28
 800346c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003472:	f000 fb11 	bl	8003a98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003476:	4b1d      	ldr	r3, [pc, #116]	@ (80034ec <xTimerCreateTimerTask+0x84>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d021      	beq.n	80034c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003486:	1d3a      	adds	r2, r7, #4
 8003488:	f107 0108 	add.w	r1, r7, #8
 800348c:	f107 030c 	add.w	r3, r7, #12
 8003490:	4618      	mov	r0, r3
 8003492:	f7fe faf1 	bl	8001a78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	9202      	str	r2, [sp, #8]
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	2302      	movs	r3, #2
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2300      	movs	r3, #0
 80034a6:	460a      	mov	r2, r1
 80034a8:	4911      	ldr	r1, [pc, #68]	@ (80034f0 <xTimerCreateTimerTask+0x88>)
 80034aa:	4812      	ldr	r0, [pc, #72]	@ (80034f4 <xTimerCreateTimerTask+0x8c>)
 80034ac:	f7ff f8a6 	bl	80025fc <xTaskCreateStatic>
 80034b0:	4603      	mov	r3, r0
 80034b2:	4a11      	ldr	r2, [pc, #68]	@ (80034f8 <xTimerCreateTimerTask+0x90>)
 80034b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80034b6:	4b10      	ldr	r3, [pc, #64]	@ (80034f8 <xTimerCreateTimerTask+0x90>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80034be:	2301      	movs	r3, #1
 80034c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10b      	bne.n	80034e0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	613b      	str	r3, [r7, #16]
}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80034e0:	697b      	ldr	r3, [r7, #20]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20000d98 	.word	0x20000d98
 80034f0:	080044f8 	.word	0x080044f8
 80034f4:	08003635 	.word	0x08003635
 80034f8:	20000d9c 	.word	0x20000d9c

080034fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08a      	sub	sp, #40	@ 0x28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800350a:	2300      	movs	r3, #0
 800350c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10b      	bne.n	800352c <xTimerGenericCommand+0x30>
	__asm volatile
 8003514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	623b      	str	r3, [r7, #32]
}
 8003526:	bf00      	nop
 8003528:	bf00      	nop
 800352a:	e7fd      	b.n	8003528 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800352c:	4b19      	ldr	r3, [pc, #100]	@ (8003594 <xTimerGenericCommand+0x98>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d02a      	beq.n	800358a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b05      	cmp	r3, #5
 8003544:	dc18      	bgt.n	8003578 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003546:	f7ff fead 	bl	80032a4 <xTaskGetSchedulerState>
 800354a:	4603      	mov	r3, r0
 800354c:	2b02      	cmp	r3, #2
 800354e:	d109      	bne.n	8003564 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003550:	4b10      	ldr	r3, [pc, #64]	@ (8003594 <xTimerGenericCommand+0x98>)
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	f107 0110 	add.w	r1, r7, #16
 8003558:	2300      	movs	r3, #0
 800355a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800355c:	f7fe fc60 	bl	8001e20 <xQueueGenericSend>
 8003560:	6278      	str	r0, [r7, #36]	@ 0x24
 8003562:	e012      	b.n	800358a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003564:	4b0b      	ldr	r3, [pc, #44]	@ (8003594 <xTimerGenericCommand+0x98>)
 8003566:	6818      	ldr	r0, [r3, #0]
 8003568:	f107 0110 	add.w	r1, r7, #16
 800356c:	2300      	movs	r3, #0
 800356e:	2200      	movs	r2, #0
 8003570:	f7fe fc56 	bl	8001e20 <xQueueGenericSend>
 8003574:	6278      	str	r0, [r7, #36]	@ 0x24
 8003576:	e008      	b.n	800358a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003578:	4b06      	ldr	r3, [pc, #24]	@ (8003594 <xTimerGenericCommand+0x98>)
 800357a:	6818      	ldr	r0, [r3, #0]
 800357c:	f107 0110 	add.w	r1, r7, #16
 8003580:	2300      	movs	r3, #0
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	f7fe fd4e 	bl	8002024 <xQueueGenericSendFromISR>
 8003588:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800358c:	4618      	mov	r0, r3
 800358e:	3728      	adds	r7, #40	@ 0x28
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20000d98 	.word	0x20000d98

08003598 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af02      	add	r7, sp, #8
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035a2:	4b23      	ldr	r3, [pc, #140]	@ (8003630 <prvProcessExpiredTimer+0x98>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	3304      	adds	r3, #4
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fe fb01 	bl	8001bb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d023      	beq.n	800360c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	699a      	ldr	r2, [r3, #24]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	18d1      	adds	r1, r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	6978      	ldr	r0, [r7, #20]
 80035d2:	f000 f8d3 	bl	800377c <prvInsertTimerInActiveList>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d020      	beq.n	800361e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80035dc:	2300      	movs	r3, #0
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	2300      	movs	r3, #0
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	2100      	movs	r1, #0
 80035e6:	6978      	ldr	r0, [r7, #20]
 80035e8:	f7ff ff88 	bl	80034fc <xTimerGenericCommand>
 80035ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d114      	bne.n	800361e <prvProcessExpiredTimer+0x86>
	__asm volatile
 80035f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	60fb      	str	r3, [r7, #12]
}
 8003606:	bf00      	nop
 8003608:	bf00      	nop
 800360a:	e7fd      	b.n	8003608 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	b2da      	uxtb	r2, r3
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	6978      	ldr	r0, [r7, #20]
 8003624:	4798      	blx	r3
}
 8003626:	bf00      	nop
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000d90 	.word	0x20000d90

08003634 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800363c:	f107 0308 	add.w	r3, r7, #8
 8003640:	4618      	mov	r0, r3
 8003642:	f000 f859 	bl	80036f8 <prvGetNextExpireTime>
 8003646:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4619      	mov	r1, r3
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f805 	bl	800365c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003652:	f000 f8d5 	bl	8003800 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003656:	bf00      	nop
 8003658:	e7f0      	b.n	800363c <prvTimerTask+0x8>
	...

0800365c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003666:	f7ff fa2d 	bl	8002ac4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800366a:	f107 0308 	add.w	r3, r7, #8
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f864 	bl	800373c <prvSampleTimeNow>
 8003674:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d130      	bne.n	80036de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10a      	bne.n	8003698 <prvProcessTimerOrBlockTask+0x3c>
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	429a      	cmp	r2, r3
 8003688:	d806      	bhi.n	8003698 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800368a:	f7ff fa29 	bl	8002ae0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800368e:	68f9      	ldr	r1, [r7, #12]
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff ff81 	bl	8003598 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003696:	e024      	b.n	80036e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d008      	beq.n	80036b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800369e:	4b13      	ldr	r3, [pc, #76]	@ (80036ec <prvProcessTimerOrBlockTask+0x90>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <prvProcessTimerOrBlockTask+0x50>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <prvProcessTimerOrBlockTask+0x52>
 80036ac:	2300      	movs	r3, #0
 80036ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80036b0:	4b0f      	ldr	r3, [pc, #60]	@ (80036f0 <prvProcessTimerOrBlockTask+0x94>)
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	4619      	mov	r1, r3
 80036be:	f7fe ff69 	bl	8002594 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80036c2:	f7ff fa0d 	bl	8002ae0 <xTaskResumeAll>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10a      	bne.n	80036e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80036cc:	4b09      	ldr	r3, [pc, #36]	@ (80036f4 <prvProcessTimerOrBlockTask+0x98>)
 80036ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	f3bf 8f6f 	isb	sy
}
 80036dc:	e001      	b.n	80036e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80036de:	f7ff f9ff 	bl	8002ae0 <xTaskResumeAll>
}
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000d94 	.word	0x20000d94
 80036f0:	20000d98 	.word	0x20000d98
 80036f4:	e000ed04 	.word	0xe000ed04

080036f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003700:	4b0d      	ldr	r3, [pc, #52]	@ (8003738 <prvGetNextExpireTime+0x40>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <prvGetNextExpireTime+0x16>
 800370a:	2201      	movs	r2, #1
 800370c:	e000      	b.n	8003710 <prvGetNextExpireTime+0x18>
 800370e:	2200      	movs	r2, #0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d105      	bne.n	8003728 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800371c:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <prvGetNextExpireTime+0x40>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	e001      	b.n	800372c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800372c:	68fb      	ldr	r3, [r7, #12]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr
 8003738:	20000d90 	.word	0x20000d90

0800373c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003744:	f7ff fa6a 	bl	8002c1c <xTaskGetTickCount>
 8003748:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800374a:	4b0b      	ldr	r3, [pc, #44]	@ (8003778 <prvSampleTimeNow+0x3c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	429a      	cmp	r2, r3
 8003752:	d205      	bcs.n	8003760 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003754:	f000 f93a 	bl	80039cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	e002      	b.n	8003766 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003766:	4a04      	ldr	r2, [pc, #16]	@ (8003778 <prvSampleTimeNow+0x3c>)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800376c:	68fb      	ldr	r3, [r7, #12]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000da0 	.word	0x20000da0

0800377c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d812      	bhi.n	80037c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	1ad2      	subs	r2, r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d302      	bcc.n	80037b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80037b0:	2301      	movs	r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	e01b      	b.n	80037ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80037b6:	4b10      	ldr	r3, [pc, #64]	@ (80037f8 <prvInsertTimerInActiveList+0x7c>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3304      	adds	r3, #4
 80037be:	4619      	mov	r1, r3
 80037c0:	4610      	mov	r0, r2
 80037c2:	f7fe f9c1 	bl	8001b48 <vListInsert>
 80037c6:	e012      	b.n	80037ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d206      	bcs.n	80037de <prvInsertTimerInActiveList+0x62>
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d302      	bcc.n	80037de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80037d8:	2301      	movs	r3, #1
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	e007      	b.n	80037ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80037de:	4b07      	ldr	r3, [pc, #28]	@ (80037fc <prvInsertTimerInActiveList+0x80>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3304      	adds	r3, #4
 80037e6:	4619      	mov	r1, r3
 80037e8:	4610      	mov	r0, r2
 80037ea:	f7fe f9ad 	bl	8001b48 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80037ee:	697b      	ldr	r3, [r7, #20]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	20000d94 	.word	0x20000d94
 80037fc:	20000d90 	.word	0x20000d90

08003800 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08e      	sub	sp, #56	@ 0x38
 8003804:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003806:	e0ce      	b.n	80039a6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	da19      	bge.n	8003842 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800380e:	1d3b      	adds	r3, r7, #4
 8003810:	3304      	adds	r3, #4
 8003812:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10b      	bne.n	8003832 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	61fb      	str	r3, [r7, #28]
}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	e7fd      	b.n	800382e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003838:	6850      	ldr	r0, [r2, #4]
 800383a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800383c:	6892      	ldr	r2, [r2, #8]
 800383e:	4611      	mov	r1, r2
 8003840:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f2c0 80ae 	blt.w	80039a6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800384e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d004      	beq.n	8003860 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003858:	3304      	adds	r3, #4
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe f9ac 	bl	8001bb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003860:	463b      	mov	r3, r7
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff ff6a 	bl	800373c <prvSampleTimeNow>
 8003868:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b09      	cmp	r3, #9
 800386e:	f200 8097 	bhi.w	80039a0 <prvProcessReceivedCommands+0x1a0>
 8003872:	a201      	add	r2, pc, #4	@ (adr r2, 8003878 <prvProcessReceivedCommands+0x78>)
 8003874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003878:	080038a1 	.word	0x080038a1
 800387c:	080038a1 	.word	0x080038a1
 8003880:	080038a1 	.word	0x080038a1
 8003884:	08003917 	.word	0x08003917
 8003888:	0800392b 	.word	0x0800392b
 800388c:	08003977 	.word	0x08003977
 8003890:	080038a1 	.word	0x080038a1
 8003894:	080038a1 	.word	0x080038a1
 8003898:	08003917 	.word	0x08003917
 800389c:	0800392b 	.word	0x0800392b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80038a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	18d1      	adds	r1, r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038c0:	f7ff ff5c 	bl	800377c <prvInsertTimerInActiveList>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d06c      	beq.n	80039a4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d061      	beq.n	80039a4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	441a      	add	r2, r3
 80038e8:	2300      	movs	r3, #0
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	2300      	movs	r3, #0
 80038ee:	2100      	movs	r1, #0
 80038f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038f2:	f7ff fe03 	bl	80034fc <xTimerGenericCommand>
 80038f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d152      	bne.n	80039a4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	61bb      	str	r3, [r7, #24]
}
 8003910:	bf00      	nop
 8003912:	bf00      	nop
 8003914:	e7fd      	b.n	8003912 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003918:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800391c:	f023 0301 	bic.w	r3, r3, #1
 8003920:	b2da      	uxtb	r2, r3
 8003922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003924:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003928:	e03d      	b.n	80039a6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800392a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	b2da      	uxtb	r2, r3
 8003936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003938:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003940:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10b      	bne.n	8003962 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800394a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	617b      	str	r3, [r7, #20]
}
 800395c:	bf00      	nop
 800395e:	bf00      	nop
 8003960:	e7fd      	b.n	800395e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	18d1      	adds	r1, r2, r3
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800396e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003970:	f7ff ff04 	bl	800377c <prvInsertTimerInActiveList>
					break;
 8003974:	e017      	b.n	80039a6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003978:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d103      	bne.n	800398c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003984:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003986:	f000 fb89 	bl	800409c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800398a:	e00c      	b.n	80039a6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800398c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	b2da      	uxtb	r2, r3
 8003998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800399e:	e002      	b.n	80039a6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80039a0:	bf00      	nop
 80039a2:	e000      	b.n	80039a6 <prvProcessReceivedCommands+0x1a6>
					break;
 80039a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039a6:	4b08      	ldr	r3, [pc, #32]	@ (80039c8 <prvProcessReceivedCommands+0x1c8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	1d39      	adds	r1, r7, #4
 80039ac:	2200      	movs	r2, #0
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe fbd6 	bl	8002160 <xQueueReceive>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f47f af26 	bne.w	8003808 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	3730      	adds	r7, #48	@ 0x30
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000d98 	.word	0x20000d98

080039cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039d2:	e049      	b.n	8003a68 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003a90 <prvSwitchTimerLists+0xc4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039de:	4b2c      	ldr	r3, [pc, #176]	@ (8003a90 <prvSwitchTimerLists+0xc4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3304      	adds	r3, #4
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe f8e3 	bl	8001bb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d02f      	beq.n	8003a68 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4413      	add	r3, r2
 8003a10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d90e      	bls.n	8003a38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a26:	4b1a      	ldr	r3, [pc, #104]	@ (8003a90 <prvSwitchTimerLists+0xc4>)
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4610      	mov	r0, r2
 8003a32:	f7fe f889 	bl	8001b48 <vListInsert>
 8003a36:	e017      	b.n	8003a68 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a38:	2300      	movs	r3, #0
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	2100      	movs	r1, #0
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f7ff fd5a 	bl	80034fc <xTimerGenericCommand>
 8003a48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10b      	bne.n	8003a68 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	603b      	str	r3, [r7, #0]
}
 8003a62:	bf00      	nop
 8003a64:	bf00      	nop
 8003a66:	e7fd      	b.n	8003a64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a68:	4b09      	ldr	r3, [pc, #36]	@ (8003a90 <prvSwitchTimerLists+0xc4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1b0      	bne.n	80039d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003a72:	4b07      	ldr	r3, [pc, #28]	@ (8003a90 <prvSwitchTimerLists+0xc4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003a78:	4b06      	ldr	r3, [pc, #24]	@ (8003a94 <prvSwitchTimerLists+0xc8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a04      	ldr	r2, [pc, #16]	@ (8003a90 <prvSwitchTimerLists+0xc4>)
 8003a7e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003a80:	4a04      	ldr	r2, [pc, #16]	@ (8003a94 <prvSwitchTimerLists+0xc8>)
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	6013      	str	r3, [r2, #0]
}
 8003a86:	bf00      	nop
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000d90 	.word	0x20000d90
 8003a94:	20000d94 	.word	0x20000d94

08003a98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003a9e:	f000 f92d 	bl	8003cfc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003aa2:	4b15      	ldr	r3, [pc, #84]	@ (8003af8 <prvCheckForValidListAndQueue+0x60>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d120      	bne.n	8003aec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003aaa:	4814      	ldr	r0, [pc, #80]	@ (8003afc <prvCheckForValidListAndQueue+0x64>)
 8003aac:	f7fd fffe 	bl	8001aac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003ab0:	4813      	ldr	r0, [pc, #76]	@ (8003b00 <prvCheckForValidListAndQueue+0x68>)
 8003ab2:	f7fd fffb 	bl	8001aac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003ab6:	4b13      	ldr	r3, [pc, #76]	@ (8003b04 <prvCheckForValidListAndQueue+0x6c>)
 8003ab8:	4a10      	ldr	r2, [pc, #64]	@ (8003afc <prvCheckForValidListAndQueue+0x64>)
 8003aba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003abc:	4b12      	ldr	r3, [pc, #72]	@ (8003b08 <prvCheckForValidListAndQueue+0x70>)
 8003abe:	4a10      	ldr	r2, [pc, #64]	@ (8003b00 <prvCheckForValidListAndQueue+0x68>)
 8003ac0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	4b11      	ldr	r3, [pc, #68]	@ (8003b0c <prvCheckForValidListAndQueue+0x74>)
 8003ac8:	4a11      	ldr	r2, [pc, #68]	@ (8003b10 <prvCheckForValidListAndQueue+0x78>)
 8003aca:	2110      	movs	r1, #16
 8003acc:	200a      	movs	r0, #10
 8003ace:	f7fe f907 	bl	8001ce0 <xQueueGenericCreateStatic>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4a08      	ldr	r2, [pc, #32]	@ (8003af8 <prvCheckForValidListAndQueue+0x60>)
 8003ad6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003ad8:	4b07      	ldr	r3, [pc, #28]	@ (8003af8 <prvCheckForValidListAndQueue+0x60>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003ae0:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <prvCheckForValidListAndQueue+0x60>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	490b      	ldr	r1, [pc, #44]	@ (8003b14 <prvCheckForValidListAndQueue+0x7c>)
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fe fd2c 	bl	8002544 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003aec:	f000 f936 	bl	8003d5c <vPortExitCritical>
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000d98 	.word	0x20000d98
 8003afc:	20000d68 	.word	0x20000d68
 8003b00:	20000d7c 	.word	0x20000d7c
 8003b04:	20000d90 	.word	0x20000d90
 8003b08:	20000d94 	.word	0x20000d94
 8003b0c:	20000e44 	.word	0x20000e44
 8003b10:	20000da4 	.word	0x20000da4
 8003b14:	08004500 	.word	0x08004500

08003b18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3b04      	subs	r3, #4
 8003b28:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3b04      	subs	r3, #4
 8003b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f023 0201 	bic.w	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3b04      	subs	r3, #4
 8003b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003b48:	4a08      	ldr	r2, [pc, #32]	@ (8003b6c <pxPortInitialiseStack+0x54>)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3b14      	subs	r3, #20
 8003b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3b20      	subs	r3, #32
 8003b5e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003b60:	68fb      	ldr	r3, [r7, #12]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr
 8003b6c:	08003b71 	.word	0x08003b71

08003b70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b7a:	4b12      	ldr	r3, [pc, #72]	@ (8003bc4 <prvTaskExitError+0x54>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d00b      	beq.n	8003b9c <prvTaskExitError+0x2c>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	60fb      	str	r3, [r7, #12]
}
 8003b96:	bf00      	nop
 8003b98:	bf00      	nop
 8003b9a:	e7fd      	b.n	8003b98 <prvTaskExitError+0x28>
	__asm volatile
 8003b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	60bb      	str	r3, [r7, #8]
}
 8003bae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003bb0:	bf00      	nop
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0fc      	beq.n	8003bb2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr
 8003bc4:	2000000c 	.word	0x2000000c
	...

08003bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003bd0:	4b07      	ldr	r3, [pc, #28]	@ (8003bf0 <pxCurrentTCBConst2>)
 8003bd2:	6819      	ldr	r1, [r3, #0]
 8003bd4:	6808      	ldr	r0, [r1, #0]
 8003bd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003bda:	f380 8809 	msr	PSP, r0
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f04f 0000 	mov.w	r0, #0
 8003be6:	f380 8811 	msr	BASEPRI, r0
 8003bea:	f04e 0e0d 	orr.w	lr, lr, #13
 8003bee:	4770      	bx	lr

08003bf0 <pxCurrentTCBConst2>:
 8003bf0:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop

08003bf8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003bf8:	4806      	ldr	r0, [pc, #24]	@ (8003c14 <prvPortStartFirstTask+0x1c>)
 8003bfa:	6800      	ldr	r0, [r0, #0]
 8003bfc:	6800      	ldr	r0, [r0, #0]
 8003bfe:	f380 8808 	msr	MSP, r0
 8003c02:	b662      	cpsie	i
 8003c04:	b661      	cpsie	f
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	df00      	svc	0
 8003c10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003c12:	bf00      	nop
 8003c14:	e000ed08 	.word	0xe000ed08

08003c18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c1e:	4b32      	ldr	r3, [pc, #200]	@ (8003ce8 <xPortStartScheduler+0xd0>)
 8003c20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	22ff      	movs	r2, #255	@ 0xff
 8003c2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4b2a      	ldr	r3, [pc, #168]	@ (8003cec <xPortStartScheduler+0xd4>)
 8003c44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c46:	4b2a      	ldr	r3, [pc, #168]	@ (8003cf0 <xPortStartScheduler+0xd8>)
 8003c48:	2207      	movs	r2, #7
 8003c4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c4c:	e009      	b.n	8003c62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003c4e:	4b28      	ldr	r3, [pc, #160]	@ (8003cf0 <xPortStartScheduler+0xd8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	4a26      	ldr	r2, [pc, #152]	@ (8003cf0 <xPortStartScheduler+0xd8>)
 8003c56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6a:	2b80      	cmp	r3, #128	@ 0x80
 8003c6c:	d0ef      	beq.n	8003c4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c6e:	4b20      	ldr	r3, [pc, #128]	@ (8003cf0 <xPortStartScheduler+0xd8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f1c3 0307 	rsb	r3, r3, #7
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d00b      	beq.n	8003c92 <xPortStartScheduler+0x7a>
	__asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	60bb      	str	r3, [r7, #8]
}
 8003c8c:	bf00      	nop
 8003c8e:	bf00      	nop
 8003c90:	e7fd      	b.n	8003c8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c92:	4b17      	ldr	r3, [pc, #92]	@ (8003cf0 <xPortStartScheduler+0xd8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	4a15      	ldr	r2, [pc, #84]	@ (8003cf0 <xPortStartScheduler+0xd8>)
 8003c9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c9c:	4b14      	ldr	r3, [pc, #80]	@ (8003cf0 <xPortStartScheduler+0xd8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ca4:	4a12      	ldr	r2, [pc, #72]	@ (8003cf0 <xPortStartScheduler+0xd8>)
 8003ca6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003cb0:	4b10      	ldr	r3, [pc, #64]	@ (8003cf4 <xPortStartScheduler+0xdc>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a0f      	ldr	r2, [pc, #60]	@ (8003cf4 <xPortStartScheduler+0xdc>)
 8003cb6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf4 <xPortStartScheduler+0xdc>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8003cf4 <xPortStartScheduler+0xdc>)
 8003cc2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003cc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003cc8:	f000 f8b8 	bl	8003e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf8 <xPortStartScheduler+0xe0>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003cd2:	f7ff ff91 	bl	8003bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003cd6:	f7ff f869 	bl	8002dac <vTaskSwitchContext>
	prvTaskExitError();
 8003cda:	f7ff ff49 	bl	8003b70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	e000e400 	.word	0xe000e400
 8003cec:	20000e94 	.word	0x20000e94
 8003cf0:	20000e98 	.word	0x20000e98
 8003cf4:	e000ed20 	.word	0xe000ed20
 8003cf8:	2000000c 	.word	0x2000000c

08003cfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
	__asm volatile
 8003d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	607b      	str	r3, [r7, #4]
}
 8003d14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d16:	4b0f      	ldr	r3, [pc, #60]	@ (8003d54 <vPortEnterCritical+0x58>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d54 <vPortEnterCritical+0x58>)
 8003d1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d20:	4b0c      	ldr	r3, [pc, #48]	@ (8003d54 <vPortEnterCritical+0x58>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d110      	bne.n	8003d4a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d28:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <vPortEnterCritical+0x5c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <vPortEnterCritical+0x4e>
	__asm volatile
 8003d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	603b      	str	r3, [r7, #0]
}
 8003d44:	bf00      	nop
 8003d46:	bf00      	nop
 8003d48:	e7fd      	b.n	8003d46 <vPortEnterCritical+0x4a>
	}
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr
 8003d54:	2000000c 	.word	0x2000000c
 8003d58:	e000ed04 	.word	0xe000ed04

08003d5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d62:	4b12      	ldr	r3, [pc, #72]	@ (8003dac <vPortExitCritical+0x50>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10b      	bne.n	8003d82 <vPortExitCritical+0x26>
	__asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	607b      	str	r3, [r7, #4]
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	e7fd      	b.n	8003d7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003d82:	4b0a      	ldr	r3, [pc, #40]	@ (8003dac <vPortExitCritical+0x50>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	4a08      	ldr	r2, [pc, #32]	@ (8003dac <vPortExitCritical+0x50>)
 8003d8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d8c:	4b07      	ldr	r3, [pc, #28]	@ (8003dac <vPortExitCritical+0x50>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d105      	bne.n	8003da0 <vPortExitCritical+0x44>
 8003d94:	2300      	movs	r3, #0
 8003d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	f383 8811 	msr	BASEPRI, r3
}
 8003d9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	2000000c 	.word	0x2000000c

08003db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003db0:	f3ef 8009 	mrs	r0, PSP
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	4b0d      	ldr	r3, [pc, #52]	@ (8003df0 <pxCurrentTCBConst>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003dc0:	6010      	str	r0, [r2, #0]
 8003dc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003dc6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003dca:	f380 8811 	msr	BASEPRI, r0
 8003dce:	f7fe ffed 	bl	8002dac <vTaskSwitchContext>
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f380 8811 	msr	BASEPRI, r0
 8003dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003dde:	6819      	ldr	r1, [r3, #0]
 8003de0:	6808      	ldr	r0, [r1, #0]
 8003de2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003de6:	f380 8809 	msr	PSP, r0
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	4770      	bx	lr

08003df0 <pxCurrentTCBConst>:
 8003df0:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop

08003df8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	607b      	str	r3, [r7, #4]
}
 8003e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e12:	f7fe ff11 	bl	8002c38 <xTaskIncrementTick>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e1c:	4b06      	ldr	r3, [pc, #24]	@ (8003e38 <xPortSysTickHandler+0x40>)
 8003e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	2300      	movs	r3, #0
 8003e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	f383 8811 	msr	BASEPRI, r3
}
 8003e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e30:	bf00      	nop
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	e000ed04 	.word	0xe000ed04

08003e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e40:	4b0a      	ldr	r3, [pc, #40]	@ (8003e6c <vPortSetupTimerInterrupt+0x30>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e46:	4b0a      	ldr	r3, [pc, #40]	@ (8003e70 <vPortSetupTimerInterrupt+0x34>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e4c:	4b09      	ldr	r3, [pc, #36]	@ (8003e74 <vPortSetupTimerInterrupt+0x38>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a09      	ldr	r2, [pc, #36]	@ (8003e78 <vPortSetupTimerInterrupt+0x3c>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	099b      	lsrs	r3, r3, #6
 8003e58:	4a08      	ldr	r2, [pc, #32]	@ (8003e7c <vPortSetupTimerInterrupt+0x40>)
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e5e:	4b03      	ldr	r3, [pc, #12]	@ (8003e6c <vPortSetupTimerInterrupt+0x30>)
 8003e60:	2207      	movs	r2, #7
 8003e62:	601a      	str	r2, [r3, #0]
}
 8003e64:	bf00      	nop
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr
 8003e6c:	e000e010 	.word	0xe000e010
 8003e70:	e000e018 	.word	0xe000e018
 8003e74:	20000000 	.word	0x20000000
 8003e78:	10624dd3 	.word	0x10624dd3
 8003e7c:	e000e014 	.word	0xe000e014

08003e80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003e86:	f3ef 8305 	mrs	r3, IPSR
 8003e8a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b0f      	cmp	r3, #15
 8003e90:	d915      	bls.n	8003ebe <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e92:	4a17      	ldr	r2, [pc, #92]	@ (8003ef0 <vPortValidateInterruptPriority+0x70>)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e9c:	4b15      	ldr	r3, [pc, #84]	@ (8003ef4 <vPortValidateInterruptPriority+0x74>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	7afa      	ldrb	r2, [r7, #11]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d20b      	bcs.n	8003ebe <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	607b      	str	r3, [r7, #4]
}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	e7fd      	b.n	8003eba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef8 <vPortValidateInterruptPriority+0x78>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8003efc <vPortValidateInterruptPriority+0x7c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d90b      	bls.n	8003ee6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	603b      	str	r3, [r7, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	e7fd      	b.n	8003ee2 <vPortValidateInterruptPriority+0x62>
	}
 8003ee6:	bf00      	nop
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr
 8003ef0:	e000e3f0 	.word	0xe000e3f0
 8003ef4:	20000e94 	.word	0x20000e94
 8003ef8:	e000ed0c 	.word	0xe000ed0c
 8003efc:	20000e98 	.word	0x20000e98

08003f00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08a      	sub	sp, #40	@ 0x28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f0c:	f7fe fdda 	bl	8002ac4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f10:	4b5c      	ldr	r3, [pc, #368]	@ (8004084 <pvPortMalloc+0x184>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003f18:	f000 f924 	bl	8004164 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f1c:	4b5a      	ldr	r3, [pc, #360]	@ (8004088 <pvPortMalloc+0x188>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f040 8095 	bne.w	8004054 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01e      	beq.n	8003f6e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003f30:	2208      	movs	r2, #8
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4413      	add	r3, r2
 8003f36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d015      	beq.n	8003f6e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f023 0307 	bic.w	r3, r3, #7
 8003f48:	3308      	adds	r3, #8
 8003f4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00b      	beq.n	8003f6e <pvPortMalloc+0x6e>
	__asm volatile
 8003f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	617b      	str	r3, [r7, #20]
}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	e7fd      	b.n	8003f6a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d06f      	beq.n	8004054 <pvPortMalloc+0x154>
 8003f74:	4b45      	ldr	r3, [pc, #276]	@ (800408c <pvPortMalloc+0x18c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d86a      	bhi.n	8004054 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f7e:	4b44      	ldr	r3, [pc, #272]	@ (8004090 <pvPortMalloc+0x190>)
 8003f80:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f82:	4b43      	ldr	r3, [pc, #268]	@ (8004090 <pvPortMalloc+0x190>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f88:	e004      	b.n	8003f94 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d903      	bls.n	8003fa6 <pvPortMalloc+0xa6>
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f1      	bne.n	8003f8a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003fa6:	4b37      	ldr	r3, [pc, #220]	@ (8004084 <pvPortMalloc+0x184>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d051      	beq.n	8004054 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	4413      	add	r3, r2
 8003fb8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	1ad2      	subs	r2, r2, r3
 8003fca:	2308      	movs	r3, #8
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d920      	bls.n	8004014 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00b      	beq.n	8003ffc <pvPortMalloc+0xfc>
	__asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	613b      	str	r3, [r7, #16]
}
 8003ff6:	bf00      	nop
 8003ff8:	bf00      	nop
 8003ffa:	e7fd      	b.n	8003ff8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	1ad2      	subs	r2, r2, r3
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800400e:	69b8      	ldr	r0, [r7, #24]
 8004010:	f000 f90a 	bl	8004228 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004014:	4b1d      	ldr	r3, [pc, #116]	@ (800408c <pvPortMalloc+0x18c>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	4a1b      	ldr	r2, [pc, #108]	@ (800408c <pvPortMalloc+0x18c>)
 8004020:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004022:	4b1a      	ldr	r3, [pc, #104]	@ (800408c <pvPortMalloc+0x18c>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	4b1b      	ldr	r3, [pc, #108]	@ (8004094 <pvPortMalloc+0x194>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d203      	bcs.n	8004036 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800402e:	4b17      	ldr	r3, [pc, #92]	@ (800408c <pvPortMalloc+0x18c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a18      	ldr	r2, [pc, #96]	@ (8004094 <pvPortMalloc+0x194>)
 8004034:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	4b13      	ldr	r3, [pc, #76]	@ (8004088 <pvPortMalloc+0x188>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	431a      	orrs	r2, r3
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800404a:	4b13      	ldr	r3, [pc, #76]	@ (8004098 <pvPortMalloc+0x198>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3301      	adds	r3, #1
 8004050:	4a11      	ldr	r2, [pc, #68]	@ (8004098 <pvPortMalloc+0x198>)
 8004052:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004054:	f7fe fd44 	bl	8002ae0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00b      	beq.n	800407a <pvPortMalloc+0x17a>
	__asm volatile
 8004062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	60fb      	str	r3, [r7, #12]
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop
 8004078:	e7fd      	b.n	8004076 <pvPortMalloc+0x176>
	return pvReturn;
 800407a:	69fb      	ldr	r3, [r7, #28]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3728      	adds	r7, #40	@ 0x28
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20001aa4 	.word	0x20001aa4
 8004088:	20001ab8 	.word	0x20001ab8
 800408c:	20001aa8 	.word	0x20001aa8
 8004090:	20001a9c 	.word	0x20001a9c
 8004094:	20001aac 	.word	0x20001aac
 8004098:	20001ab0 	.word	0x20001ab0

0800409c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d04f      	beq.n	800414e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80040ae:	2308      	movs	r3, #8
 80040b0:	425b      	negs	r3, r3
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4413      	add	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	4b25      	ldr	r3, [pc, #148]	@ (8004158 <vPortFree+0xbc>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10b      	bne.n	80040e2 <vPortFree+0x46>
	__asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	60fb      	str	r3, [r7, #12]
}
 80040dc:	bf00      	nop
 80040de:	bf00      	nop
 80040e0:	e7fd      	b.n	80040de <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00b      	beq.n	8004102 <vPortFree+0x66>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	60bb      	str	r3, [r7, #8]
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	e7fd      	b.n	80040fe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	4b14      	ldr	r3, [pc, #80]	@ (8004158 <vPortFree+0xbc>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4013      	ands	r3, r2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d01e      	beq.n	800414e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d11a      	bne.n	800414e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	4b0e      	ldr	r3, [pc, #56]	@ (8004158 <vPortFree+0xbc>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	43db      	mvns	r3, r3
 8004122:	401a      	ands	r2, r3
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004128:	f7fe fccc 	bl	8002ac4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	4b0a      	ldr	r3, [pc, #40]	@ (800415c <vPortFree+0xc0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4413      	add	r3, r2
 8004136:	4a09      	ldr	r2, [pc, #36]	@ (800415c <vPortFree+0xc0>)
 8004138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800413a:	6938      	ldr	r0, [r7, #16]
 800413c:	f000 f874 	bl	8004228 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004140:	4b07      	ldr	r3, [pc, #28]	@ (8004160 <vPortFree+0xc4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3301      	adds	r3, #1
 8004146:	4a06      	ldr	r2, [pc, #24]	@ (8004160 <vPortFree+0xc4>)
 8004148:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800414a:	f7fe fcc9 	bl	8002ae0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800414e:	bf00      	nop
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20001ab8 	.word	0x20001ab8
 800415c:	20001aa8 	.word	0x20001aa8
 8004160:	20001ab4 	.word	0x20001ab4

08004164 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800416a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800416e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004170:	4b27      	ldr	r3, [pc, #156]	@ (8004210 <prvHeapInit+0xac>)
 8004172:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00c      	beq.n	8004198 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3307      	adds	r3, #7
 8004182:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0307 	bic.w	r3, r3, #7
 800418a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	4a1f      	ldr	r2, [pc, #124]	@ (8004210 <prvHeapInit+0xac>)
 8004194:	4413      	add	r3, r2
 8004196:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800419c:	4a1d      	ldr	r2, [pc, #116]	@ (8004214 <prvHeapInit+0xb0>)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80041a2:	4b1c      	ldr	r3, [pc, #112]	@ (8004214 <prvHeapInit+0xb0>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	4413      	add	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80041b0:	2208      	movs	r2, #8
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1a9b      	subs	r3, r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0307 	bic.w	r3, r3, #7
 80041be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a15      	ldr	r2, [pc, #84]	@ (8004218 <prvHeapInit+0xb4>)
 80041c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80041c6:	4b14      	ldr	r3, [pc, #80]	@ (8004218 <prvHeapInit+0xb4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2200      	movs	r2, #0
 80041cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80041ce:	4b12      	ldr	r3, [pc, #72]	@ (8004218 <prvHeapInit+0xb4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	1ad2      	subs	r2, r2, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004218 <prvHeapInit+0xb4>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4a0a      	ldr	r2, [pc, #40]	@ (800421c <prvHeapInit+0xb8>)
 80041f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	4a09      	ldr	r2, [pc, #36]	@ (8004220 <prvHeapInit+0xbc>)
 80041fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041fc:	4b09      	ldr	r3, [pc, #36]	@ (8004224 <prvHeapInit+0xc0>)
 80041fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004202:	601a      	str	r2, [r3, #0]
}
 8004204:	bf00      	nop
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	20000e9c 	.word	0x20000e9c
 8004214:	20001a9c 	.word	0x20001a9c
 8004218:	20001aa4 	.word	0x20001aa4
 800421c:	20001aac 	.word	0x20001aac
 8004220:	20001aa8 	.word	0x20001aa8
 8004224:	20001ab8 	.word	0x20001ab8

08004228 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004230:	4b27      	ldr	r3, [pc, #156]	@ (80042d0 <prvInsertBlockIntoFreeList+0xa8>)
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	e002      	b.n	800423c <prvInsertBlockIntoFreeList+0x14>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	429a      	cmp	r2, r3
 8004244:	d8f7      	bhi.n	8004236 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	4413      	add	r3, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	429a      	cmp	r2, r3
 8004256:	d108      	bne.n	800426a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	441a      	add	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	441a      	add	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d118      	bne.n	80042b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	4b14      	ldr	r3, [pc, #80]	@ (80042d4 <prvInsertBlockIntoFreeList+0xac>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d00d      	beq.n	80042a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	441a      	add	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	e008      	b.n	80042b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042a6:	4b0b      	ldr	r3, [pc, #44]	@ (80042d4 <prvInsertBlockIntoFreeList+0xac>)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	e003      	b.n	80042b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d002      	beq.n	80042c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr
 80042d0:	20001a9c 	.word	0x20001a9c
 80042d4:	20001aa4 	.word	0x20001aa4

080042d8 <memset>:
 80042d8:	4603      	mov	r3, r0
 80042da:	4402      	add	r2, r0
 80042dc:	4293      	cmp	r3, r2
 80042de:	d100      	bne.n	80042e2 <memset+0xa>
 80042e0:	4770      	bx	lr
 80042e2:	f803 1b01 	strb.w	r1, [r3], #1
 80042e6:	e7f9      	b.n	80042dc <memset+0x4>

080042e8 <_reclaim_reent>:
 80042e8:	4b2d      	ldr	r3, [pc, #180]	@ (80043a0 <_reclaim_reent+0xb8>)
 80042ea:	b570      	push	{r4, r5, r6, lr}
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4604      	mov	r4, r0
 80042f0:	4283      	cmp	r3, r0
 80042f2:	d053      	beq.n	800439c <_reclaim_reent+0xb4>
 80042f4:	69c3      	ldr	r3, [r0, #28]
 80042f6:	b31b      	cbz	r3, 8004340 <_reclaim_reent+0x58>
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	b163      	cbz	r3, 8004316 <_reclaim_reent+0x2e>
 80042fc:	2500      	movs	r5, #0
 80042fe:	69e3      	ldr	r3, [r4, #28]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	5959      	ldr	r1, [r3, r5]
 8004304:	b9b1      	cbnz	r1, 8004334 <_reclaim_reent+0x4c>
 8004306:	3504      	adds	r5, #4
 8004308:	2d80      	cmp	r5, #128	@ 0x80
 800430a:	d1f8      	bne.n	80042fe <_reclaim_reent+0x16>
 800430c:	69e3      	ldr	r3, [r4, #28]
 800430e:	4620      	mov	r0, r4
 8004310:	68d9      	ldr	r1, [r3, #12]
 8004312:	f000 f87b 	bl	800440c <_free_r>
 8004316:	69e3      	ldr	r3, [r4, #28]
 8004318:	6819      	ldr	r1, [r3, #0]
 800431a:	b111      	cbz	r1, 8004322 <_reclaim_reent+0x3a>
 800431c:	4620      	mov	r0, r4
 800431e:	f000 f875 	bl	800440c <_free_r>
 8004322:	69e3      	ldr	r3, [r4, #28]
 8004324:	689d      	ldr	r5, [r3, #8]
 8004326:	b15d      	cbz	r5, 8004340 <_reclaim_reent+0x58>
 8004328:	4629      	mov	r1, r5
 800432a:	4620      	mov	r0, r4
 800432c:	682d      	ldr	r5, [r5, #0]
 800432e:	f000 f86d 	bl	800440c <_free_r>
 8004332:	e7f8      	b.n	8004326 <_reclaim_reent+0x3e>
 8004334:	680e      	ldr	r6, [r1, #0]
 8004336:	4620      	mov	r0, r4
 8004338:	f000 f868 	bl	800440c <_free_r>
 800433c:	4631      	mov	r1, r6
 800433e:	e7e1      	b.n	8004304 <_reclaim_reent+0x1c>
 8004340:	6961      	ldr	r1, [r4, #20]
 8004342:	b111      	cbz	r1, 800434a <_reclaim_reent+0x62>
 8004344:	4620      	mov	r0, r4
 8004346:	f000 f861 	bl	800440c <_free_r>
 800434a:	69e1      	ldr	r1, [r4, #28]
 800434c:	b111      	cbz	r1, 8004354 <_reclaim_reent+0x6c>
 800434e:	4620      	mov	r0, r4
 8004350:	f000 f85c 	bl	800440c <_free_r>
 8004354:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004356:	b111      	cbz	r1, 800435e <_reclaim_reent+0x76>
 8004358:	4620      	mov	r0, r4
 800435a:	f000 f857 	bl	800440c <_free_r>
 800435e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004360:	b111      	cbz	r1, 8004368 <_reclaim_reent+0x80>
 8004362:	4620      	mov	r0, r4
 8004364:	f000 f852 	bl	800440c <_free_r>
 8004368:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800436a:	b111      	cbz	r1, 8004372 <_reclaim_reent+0x8a>
 800436c:	4620      	mov	r0, r4
 800436e:	f000 f84d 	bl	800440c <_free_r>
 8004372:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004374:	b111      	cbz	r1, 800437c <_reclaim_reent+0x94>
 8004376:	4620      	mov	r0, r4
 8004378:	f000 f848 	bl	800440c <_free_r>
 800437c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800437e:	b111      	cbz	r1, 8004386 <_reclaim_reent+0x9e>
 8004380:	4620      	mov	r0, r4
 8004382:	f000 f843 	bl	800440c <_free_r>
 8004386:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004388:	b111      	cbz	r1, 8004390 <_reclaim_reent+0xa8>
 800438a:	4620      	mov	r0, r4
 800438c:	f000 f83e 	bl	800440c <_free_r>
 8004390:	6a23      	ldr	r3, [r4, #32]
 8004392:	b11b      	cbz	r3, 800439c <_reclaim_reent+0xb4>
 8004394:	4620      	mov	r0, r4
 8004396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800439a:	4718      	bx	r3
 800439c:	bd70      	pop	{r4, r5, r6, pc}
 800439e:	bf00      	nop
 80043a0:	20000010 	.word	0x20000010

080043a4 <__libc_init_array>:
 80043a4:	b570      	push	{r4, r5, r6, lr}
 80043a6:	2600      	movs	r6, #0
 80043a8:	4d0c      	ldr	r5, [pc, #48]	@ (80043dc <__libc_init_array+0x38>)
 80043aa:	4c0d      	ldr	r4, [pc, #52]	@ (80043e0 <__libc_init_array+0x3c>)
 80043ac:	1b64      	subs	r4, r4, r5
 80043ae:	10a4      	asrs	r4, r4, #2
 80043b0:	42a6      	cmp	r6, r4
 80043b2:	d109      	bne.n	80043c8 <__libc_init_array+0x24>
 80043b4:	f000 f87e 	bl	80044b4 <_init>
 80043b8:	2600      	movs	r6, #0
 80043ba:	4d0a      	ldr	r5, [pc, #40]	@ (80043e4 <__libc_init_array+0x40>)
 80043bc:	4c0a      	ldr	r4, [pc, #40]	@ (80043e8 <__libc_init_array+0x44>)
 80043be:	1b64      	subs	r4, r4, r5
 80043c0:	10a4      	asrs	r4, r4, #2
 80043c2:	42a6      	cmp	r6, r4
 80043c4:	d105      	bne.n	80043d2 <__libc_init_array+0x2e>
 80043c6:	bd70      	pop	{r4, r5, r6, pc}
 80043c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043cc:	4798      	blx	r3
 80043ce:	3601      	adds	r6, #1
 80043d0:	e7ee      	b.n	80043b0 <__libc_init_array+0xc>
 80043d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d6:	4798      	blx	r3
 80043d8:	3601      	adds	r6, #1
 80043da:	e7f2      	b.n	80043c2 <__libc_init_array+0x1e>
 80043dc:	080045a0 	.word	0x080045a0
 80043e0:	080045a0 	.word	0x080045a0
 80043e4:	080045a0 	.word	0x080045a0
 80043e8:	080045a4 	.word	0x080045a4

080043ec <__retarget_lock_acquire_recursive>:
 80043ec:	4770      	bx	lr

080043ee <__retarget_lock_release_recursive>:
 80043ee:	4770      	bx	lr

080043f0 <memcpy>:
 80043f0:	440a      	add	r2, r1
 80043f2:	4291      	cmp	r1, r2
 80043f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80043f8:	d100      	bne.n	80043fc <memcpy+0xc>
 80043fa:	4770      	bx	lr
 80043fc:	b510      	push	{r4, lr}
 80043fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004402:	4291      	cmp	r1, r2
 8004404:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004408:	d1f9      	bne.n	80043fe <memcpy+0xe>
 800440a:	bd10      	pop	{r4, pc}

0800440c <_free_r>:
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	4605      	mov	r5, r0
 8004410:	2900      	cmp	r1, #0
 8004412:	d040      	beq.n	8004496 <_free_r+0x8a>
 8004414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004418:	1f0c      	subs	r4, r1, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	bfb8      	it	lt
 800441e:	18e4      	addlt	r4, r4, r3
 8004420:	f000 f83c 	bl	800449c <__malloc_lock>
 8004424:	4a1c      	ldr	r2, [pc, #112]	@ (8004498 <_free_r+0x8c>)
 8004426:	6813      	ldr	r3, [r2, #0]
 8004428:	b933      	cbnz	r3, 8004438 <_free_r+0x2c>
 800442a:	6063      	str	r3, [r4, #4]
 800442c:	6014      	str	r4, [r2, #0]
 800442e:	4628      	mov	r0, r5
 8004430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004434:	f000 b838 	b.w	80044a8 <__malloc_unlock>
 8004438:	42a3      	cmp	r3, r4
 800443a:	d908      	bls.n	800444e <_free_r+0x42>
 800443c:	6820      	ldr	r0, [r4, #0]
 800443e:	1821      	adds	r1, r4, r0
 8004440:	428b      	cmp	r3, r1
 8004442:	bf01      	itttt	eq
 8004444:	6819      	ldreq	r1, [r3, #0]
 8004446:	685b      	ldreq	r3, [r3, #4]
 8004448:	1809      	addeq	r1, r1, r0
 800444a:	6021      	streq	r1, [r4, #0]
 800444c:	e7ed      	b.n	800442a <_free_r+0x1e>
 800444e:	461a      	mov	r2, r3
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	b10b      	cbz	r3, 8004458 <_free_r+0x4c>
 8004454:	42a3      	cmp	r3, r4
 8004456:	d9fa      	bls.n	800444e <_free_r+0x42>
 8004458:	6811      	ldr	r1, [r2, #0]
 800445a:	1850      	adds	r0, r2, r1
 800445c:	42a0      	cmp	r0, r4
 800445e:	d10b      	bne.n	8004478 <_free_r+0x6c>
 8004460:	6820      	ldr	r0, [r4, #0]
 8004462:	4401      	add	r1, r0
 8004464:	1850      	adds	r0, r2, r1
 8004466:	4283      	cmp	r3, r0
 8004468:	6011      	str	r1, [r2, #0]
 800446a:	d1e0      	bne.n	800442e <_free_r+0x22>
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	4408      	add	r0, r1
 8004472:	6010      	str	r0, [r2, #0]
 8004474:	6053      	str	r3, [r2, #4]
 8004476:	e7da      	b.n	800442e <_free_r+0x22>
 8004478:	d902      	bls.n	8004480 <_free_r+0x74>
 800447a:	230c      	movs	r3, #12
 800447c:	602b      	str	r3, [r5, #0]
 800447e:	e7d6      	b.n	800442e <_free_r+0x22>
 8004480:	6820      	ldr	r0, [r4, #0]
 8004482:	1821      	adds	r1, r4, r0
 8004484:	428b      	cmp	r3, r1
 8004486:	bf01      	itttt	eq
 8004488:	6819      	ldreq	r1, [r3, #0]
 800448a:	685b      	ldreq	r3, [r3, #4]
 800448c:	1809      	addeq	r1, r1, r0
 800448e:	6021      	streq	r1, [r4, #0]
 8004490:	6063      	str	r3, [r4, #4]
 8004492:	6054      	str	r4, [r2, #4]
 8004494:	e7cb      	b.n	800442e <_free_r+0x22>
 8004496:	bd38      	pop	{r3, r4, r5, pc}
 8004498:	20001bf8 	.word	0x20001bf8

0800449c <__malloc_lock>:
 800449c:	4801      	ldr	r0, [pc, #4]	@ (80044a4 <__malloc_lock+0x8>)
 800449e:	f7ff bfa5 	b.w	80043ec <__retarget_lock_acquire_recursive>
 80044a2:	bf00      	nop
 80044a4:	20001bf4 	.word	0x20001bf4

080044a8 <__malloc_unlock>:
 80044a8:	4801      	ldr	r0, [pc, #4]	@ (80044b0 <__malloc_unlock+0x8>)
 80044aa:	f7ff bfa0 	b.w	80043ee <__retarget_lock_release_recursive>
 80044ae:	bf00      	nop
 80044b0:	20001bf4 	.word	0x20001bf4

080044b4 <_init>:
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	bf00      	nop
 80044b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ba:	bc08      	pop	{r3}
 80044bc:	469e      	mov	lr, r3
 80044be:	4770      	bx	lr

080044c0 <_fini>:
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	bf00      	nop
 80044c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c6:	bc08      	pop	{r3}
 80044c8:	469e      	mov	lr, r3
 80044ca:	4770      	bx	lr
