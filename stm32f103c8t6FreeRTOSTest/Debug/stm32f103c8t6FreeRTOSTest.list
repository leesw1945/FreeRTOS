
stm32f103c8t6FreeRTOSTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006214  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08006324  08006324  00007324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006590  08006590  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006590  08006590  00007590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006598  08006598  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006598  08006598  00007598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800659c  0800659c  0000759c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080065a0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf8  20000060  08006600  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c58  08006600  00008c58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170f7  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ae  00000000  00000000  0001f180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  00022730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f7f  00000000  00000000  00023b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a83c  00000000  00000000  00024aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001726f  00000000  00000000  0003f2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094fa1  00000000  00000000  0005655a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb4fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005824  00000000  00000000  000eb540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000f0d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	0800630c 	.word	0x0800630c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	0800630c 	.word	0x0800630c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of ButtonSemaphore */
  ButtonSemaphoreHandle = osSemaphoreNew(1, 0, &ButtonSemaphore_attributes);
 8000164:	4a14      	ldr	r2, [pc, #80]	@ (80001b8 <MX_FREERTOS_Init+0x58>)
 8000166:	2100      	movs	r1, #0
 8000168:	2001      	movs	r0, #1
 800016a:	f002 f8f1 	bl	8002350 <osSemaphoreNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a12      	ldr	r2, [pc, #72]	@ (80001bc <MX_FREERTOS_Init+0x5c>)
 8000172:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000174:	4a12      	ldr	r2, [pc, #72]	@ (80001c0 <MX_FREERTOS_Init+0x60>)
 8000176:	2100      	movs	r1, #0
 8000178:	4812      	ldr	r0, [pc, #72]	@ (80001c4 <MX_FREERTOS_Init+0x64>)
 800017a:	f002 f83c 	bl	80021f6 <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a11      	ldr	r2, [pc, #68]	@ (80001c8 <MX_FREERTOS_Init+0x68>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000184:	4a11      	ldr	r2, [pc, #68]	@ (80001cc <MX_FREERTOS_Init+0x6c>)
 8000186:	2100      	movs	r1, #0
 8000188:	4811      	ldr	r0, [pc, #68]	@ (80001d0 <MX_FREERTOS_Init+0x70>)
 800018a:	f002 f834 	bl	80021f6 <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a10      	ldr	r2, [pc, #64]	@ (80001d4 <MX_FREERTOS_Init+0x74>)
 8000192:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000194:	4a10      	ldr	r2, [pc, #64]	@ (80001d8 <MX_FREERTOS_Init+0x78>)
 8000196:	2100      	movs	r1, #0
 8000198:	4810      	ldr	r0, [pc, #64]	@ (80001dc <MX_FREERTOS_Init+0x7c>)
 800019a:	f002 f82c 	bl	80021f6 <osThreadNew>
 800019e:	4603      	mov	r3, r0
 80001a0:	4a0f      	ldr	r2, [pc, #60]	@ (80001e0 <MX_FREERTOS_Init+0x80>)
 80001a2:	6013      	str	r3, [r2, #0]

  /* creation of buttonTaskHandl */
  buttonTaskHandlHandle = osThreadNew(ButtonTask, NULL, &buttonTaskHandl_attributes);
 80001a4:	4a0f      	ldr	r2, [pc, #60]	@ (80001e4 <MX_FREERTOS_Init+0x84>)
 80001a6:	2100      	movs	r1, #0
 80001a8:	480f      	ldr	r0, [pc, #60]	@ (80001e8 <MX_FREERTOS_Init+0x88>)
 80001aa:	f002 f824 	bl	80021f6 <osThreadNew>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a0e      	ldr	r2, [pc, #56]	@ (80001ec <MX_FREERTOS_Init+0x8c>)
 80001b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001b4:	bf00      	nop
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	08006520 	.word	0x08006520
 80001bc:	2000008c 	.word	0x2000008c
 80001c0:	08006490 	.word	0x08006490
 80001c4:	080001f1 	.word	0x080001f1
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080064b4 	.word	0x080064b4
 80001d0:	08000215 	.word	0x08000215
 80001d4:	20000080 	.word	0x20000080
 80001d8:	080064d8 	.word	0x080064d8
 80001dc:	0800031d 	.word	0x0800031d
 80001e0:	20000084 	.word	0x20000084
 80001e4:	080064fc 	.word	0x080064fc
 80001e8:	08000399 	.word	0x08000399
 80001ec:	20000088 	.word	0x20000088

080001f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b08a      	sub	sp, #40	@ 0x28
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  char buffer[30];
  snprintf(buffer, sizeof(buffer), "FreeRTOS Started \r\n");
 80001f8:	f107 0308 	add.w	r3, r7, #8
 80001fc:	4a04      	ldr	r2, [pc, #16]	@ (8000210 <StartDefaultTask+0x20>)
 80001fe:	211e      	movs	r1, #30
 8000200:	4618      	mov	r0, r3
 8000202:	f005 fb61 	bl	80058c8 <sniprintf>
  for(;;)
  {
    osDelay(1000);
 8000206:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800020a:	f002 f886 	bl	800231a <osDelay>
 800020e:	e7fa      	b.n	8000206 <StartDefaultTask+0x16>
 8000210:	08006368 	.word	0x08006368

08000214 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b092      	sub	sp, #72	@ 0x48
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  uint8_t ledState = 0;
 800021c:	2300      	movs	r3, #0
 800021e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

  char buffer[50];
	snprintf(buffer, sizeof(buffer), "LED Control Task Started \r\n");
 8000222:	f107 030c 	add.w	r3, r7, #12
 8000226:	4a37      	ldr	r2, [pc, #220]	@ (8000304 <StartTask02+0xf0>)
 8000228:	2132      	movs	r1, #50	@ 0x32
 800022a:	4618      	mov	r0, r3
 800022c:	f005 fb4c 	bl	80058c8 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8000230:	f107 030c 	add.w	r3, r7, #12
 8000234:	4618      	mov	r0, r3
 8000236:	f7ff ff8b 	bl	8000150 <strlen>
 800023a:	4603      	mov	r3, r0
 800023c:	b29a      	uxth	r2, r3
 800023e:	f107 010c 	add.w	r1, r7, #12
 8000242:	2364      	movs	r3, #100	@ 0x64
 8000244:	4830      	ldr	r0, [pc, #192]	@ (8000308 <StartTask02+0xf4>)
 8000246:	f001 fd61 	bl	8001d0c <HAL_UART_Transmit>

  /* Infinite loop */
  for(;;)
  {

    uint32_t notification = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800024a:	f04f 31ff 	mov.w	r1, #4294967295
 800024e:	2001      	movs	r0, #1
 8000250:	f004 fa9e 	bl	8004790 <ulTaskNotifyTake>
 8000254:	6438      	str	r0, [r7, #64]	@ 0x40
    if (notification > 0) {
 8000256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000258:	2b00      	cmp	r3, #0
 800025a:	d03d      	beq.n	80002d8 <StartTask02+0xc4>
      ledState = !ledState; 
 800025c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000260:	2b00      	cmp	r3, #0
 8000262:	bf0c      	ite	eq
 8000264:	2301      	moveq	r3, #1
 8000266:	2300      	movne	r3, #0
 8000268:	b2db      	uxtb	r3, r3
 800026a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

      if (ledState) {
 800026e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000272:	2b00      	cmp	r3, #0
 8000274:	d011      	beq.n	800029a <StartTask02+0x86>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); 
 8000276:	2201      	movs	r2, #1
 8000278:	2101      	movs	r1, #1
 800027a:	4824      	ldr	r0, [pc, #144]	@ (800030c <StartTask02+0xf8>)
 800027c:	f000 fe48 	bl	8000f10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2102      	movs	r1, #2
 8000284:	4821      	ldr	r0, [pc, #132]	@ (800030c <StartTask02+0xf8>)
 8000286:	f000 fe43 	bl	8000f10 <HAL_GPIO_WritePin>
        snprintf(buffer, sizeof(buffer), "First_LED ON / Second_LED OFF \r\n");
 800028a:	f107 030c 	add.w	r3, r7, #12
 800028e:	4a20      	ldr	r2, [pc, #128]	@ (8000310 <StartTask02+0xfc>)
 8000290:	2132      	movs	r1, #50	@ 0x32
 8000292:	4618      	mov	r0, r3
 8000294:	f005 fb18 	bl	80058c8 <sniprintf>
 8000298:	e010      	b.n	80002bc <StartTask02+0xa8>
      } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2102      	movs	r1, #2
 800029e:	481b      	ldr	r0, [pc, #108]	@ (800030c <StartTask02+0xf8>)
 80002a0:	f000 fe36 	bl	8000f10 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); 
 80002a4:	2200      	movs	r2, #0
 80002a6:	2101      	movs	r1, #1
 80002a8:	4818      	ldr	r0, [pc, #96]	@ (800030c <StartTask02+0xf8>)
 80002aa:	f000 fe31 	bl	8000f10 <HAL_GPIO_WritePin>
        snprintf(buffer, sizeof(buffer), "First_LED OFF / Second_LED ON \r\n");
 80002ae:	f107 030c 	add.w	r3, r7, #12
 80002b2:	4a18      	ldr	r2, [pc, #96]	@ (8000314 <StartTask02+0x100>)
 80002b4:	2132      	movs	r1, #50	@ 0x32
 80002b6:	4618      	mov	r0, r3
 80002b8:	f005 fb06 	bl	80058c8 <sniprintf>
      }
      HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 80002bc:	f107 030c 	add.w	r3, r7, #12
 80002c0:	4618      	mov	r0, r3
 80002c2:	f7ff ff45 	bl	8000150 <strlen>
 80002c6:	4603      	mov	r3, r0
 80002c8:	b29a      	uxth	r2, r3
 80002ca:	f107 010c 	add.w	r1, r7, #12
 80002ce:	2364      	movs	r3, #100	@ 0x64
 80002d0:	480d      	ldr	r0, [pc, #52]	@ (8000308 <StartTask02+0xf4>)
 80002d2:	f001 fd1b 	bl	8001d0c <HAL_UART_Transmit>
 80002d6:	e7b8      	b.n	800024a <StartTask02+0x36>
    }
    else {
      snprintf(buffer, sizeof(buffer), "Button not pressed \r\n");
 80002d8:	f107 030c 	add.w	r3, r7, #12
 80002dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000318 <StartTask02+0x104>)
 80002de:	2132      	movs	r1, #50	@ 0x32
 80002e0:	4618      	mov	r0, r3
 80002e2:	f005 faf1 	bl	80058c8 <sniprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 80002e6:	f107 030c 	add.w	r3, r7, #12
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ff30 	bl	8000150 <strlen>
 80002f0:	4603      	mov	r3, r0
 80002f2:	b29a      	uxth	r2, r3
 80002f4:	f107 010c 	add.w	r1, r7, #12
 80002f8:	2364      	movs	r3, #100	@ 0x64
 80002fa:	4803      	ldr	r0, [pc, #12]	@ (8000308 <StartTask02+0xf4>)
 80002fc:	f001 fd06 	bl	8001d0c <HAL_UART_Transmit>
  {
 8000300:	e7a3      	b.n	800024a <StartTask02+0x36>
 8000302:	bf00      	nop
 8000304:	0800637c 	.word	0x0800637c
 8000308:	200000dc 	.word	0x200000dc
 800030c:	40010c00 	.word	0x40010c00
 8000310:	08006398 	.word	0x08006398
 8000314:	080063bc 	.word	0x080063bc
 8000318:	080063e0 	.word	0x080063e0

0800031c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b08c      	sub	sp, #48	@ 0x30
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  char buffer[30];
  uint32_t heartbeat_count = 0;
 8000324:	2300      	movs	r3, #0
 8000326:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  snprintf(buffer, sizeof(buffer), "Heartbeat Task Started\r\n");
 8000328:	f107 030c 	add.w	r3, r7, #12
 800032c:	4a17      	ldr	r2, [pc, #92]	@ (800038c <StartTask03+0x70>)
 800032e:	211e      	movs	r1, #30
 8000330:	4618      	mov	r0, r3
 8000332:	f005 fac9 	bl	80058c8 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8000336:	f107 030c 	add.w	r3, r7, #12
 800033a:	4618      	mov	r0, r3
 800033c:	f7ff ff08 	bl	8000150 <strlen>
 8000340:	4603      	mov	r3, r0
 8000342:	b29a      	uxth	r2, r3
 8000344:	f107 010c 	add.w	r1, r7, #12
 8000348:	2364      	movs	r3, #100	@ 0x64
 800034a:	4811      	ldr	r0, [pc, #68]	@ (8000390 <StartTask03+0x74>)
 800034c:	f001 fcde 	bl	8001d0c <HAL_UART_Transmit>
  
  /* Infinite loop */
  for(;;)
  {
    heartbeat_count++;
 8000350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000352:	3301      	adds	r3, #1
 8000354:	62fb      	str	r3, [r7, #44]	@ 0x2c
    snprintf(buffer, sizeof(buffer), "Heartbeat: %lu\r\n", heartbeat_count);
 8000356:	f107 000c 	add.w	r0, r7, #12
 800035a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800035c:	4a0d      	ldr	r2, [pc, #52]	@ (8000394 <StartTask03+0x78>)
 800035e:	211e      	movs	r1, #30
 8000360:	f005 fab2 	bl	80058c8 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8000364:	f107 030c 	add.w	r3, r7, #12
 8000368:	4618      	mov	r0, r3
 800036a:	f7ff fef1 	bl	8000150 <strlen>
 800036e:	4603      	mov	r3, r0
 8000370:	b29a      	uxth	r2, r3
 8000372:	f107 010c 	add.w	r1, r7, #12
 8000376:	2364      	movs	r3, #100	@ 0x64
 8000378:	4805      	ldr	r0, [pc, #20]	@ (8000390 <StartTask03+0x74>)
 800037a:	f001 fcc7 	bl	8001d0c <HAL_UART_Transmit>
    osDelay(5000); // 5초마다 하트비트
 800037e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000382:	f001 ffca 	bl	800231a <osDelay>
    heartbeat_count++;
 8000386:	bf00      	nop
 8000388:	e7e2      	b.n	8000350 <StartTask03+0x34>
 800038a:	bf00      	nop
 800038c:	080063f8 	.word	0x080063f8
 8000390:	200000dc 	.word	0x200000dc
 8000394:	08006414 	.word	0x08006414

08000398 <ButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ButtonTask */
void ButtonTask(void *argument)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b094      	sub	sp, #80	@ 0x50
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonTask */

    uint32_t last_press_time = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const uint32_t debounce_delay = 50; // 50ms 디바운싱
 80003a4:	2332      	movs	r3, #50	@ 0x32
 80003a6:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t button_count = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	64bb      	str	r3, [r7, #72]	@ 0x48
    char buffer[50];
    
    snprintf(buffer, sizeof(buffer), "Button Task Started\r\n");
 80003ac:	f107 030c 	add.w	r3, r7, #12
 80003b0:	4a2d      	ldr	r2, [pc, #180]	@ (8000468 <ButtonTask+0xd0>)
 80003b2:	2132      	movs	r1, #50	@ 0x32
 80003b4:	4618      	mov	r0, r3
 80003b6:	f005 fa87 	bl	80058c8 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 80003ba:	f107 030c 	add.w	r3, r7, #12
 80003be:	4618      	mov	r0, r3
 80003c0:	f7ff fec6 	bl	8000150 <strlen>
 80003c4:	4603      	mov	r3, r0
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	f107 010c 	add.w	r1, r7, #12
 80003cc:	2364      	movs	r3, #100	@ 0x64
 80003ce:	4827      	ldr	r0, [pc, #156]	@ (800046c <ButtonTask+0xd4>)
 80003d0:	f001 fc9c 	bl	8001d0c <HAL_UART_Transmit>

  /* Infinite loop */
  for(;;)
  {
    /* CubeMX 생성 세마포어로부터 신호 대기 */
    if (osSemaphoreAcquire(ButtonSemaphoreHandle, osWaitForever) == osOK)
 80003d4:	4b26      	ldr	r3, [pc, #152]	@ (8000470 <ButtonTask+0xd8>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f04f 31ff 	mov.w	r1, #4294967295
 80003dc:	4618      	mov	r0, r3
 80003de:	f002 f841 	bl	8002464 <osSemaphoreAcquire>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d1f5      	bne.n	80003d4 <ButtonTask+0x3c>
    {
      uint32_t current_time = osKernelGetTickCount();
 80003e8:	f001 fef0 	bl	80021cc <osKernelGetTickCount>
 80003ec:	6438      	str	r0, [r7, #64]	@ 0x40
            
      /* 디바운싱 처리 */
      if ((current_time - last_press_time) > debounce_delay)
 80003ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80003f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80003f2:	1ad3      	subs	r3, r2, r3
 80003f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80003f6:	429a      	cmp	r2, r3
 80003f8:	d220      	bcs.n	800043c <ButtonTask+0xa4>
        {
          button_count++;
 80003fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80003fc:	3301      	adds	r3, #1
 80003fe:	64bb      	str	r3, [r7, #72]	@ 0x48
                
          snprintf(buffer, sizeof(buffer), "Button Pressed! Count: %lu\r\n", button_count);
 8000400:	f107 000c 	add.w	r0, r7, #12
 8000404:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000406:	4a1b      	ldr	r2, [pc, #108]	@ (8000474 <ButtonTask+0xdc>)
 8000408:	2132      	movs	r1, #50	@ 0x32
 800040a:	f005 fa5d 	bl	80058c8 <sniprintf>
          HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 800040e:	f107 030c 	add.w	r3, r7, #12
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff fe9c 	bl	8000150 <strlen>
 8000418:	4603      	mov	r3, r0
 800041a:	b29a      	uxth	r2, r3
 800041c:	f107 010c 	add.w	r1, r7, #12
 8000420:	2364      	movs	r3, #100	@ 0x64
 8000422:	4812      	ldr	r0, [pc, #72]	@ (800046c <ButtonTask+0xd4>)
 8000424:	f001 fc72 	bl	8001d0c <HAL_UART_Transmit>
                
          /* LED 제어 태스크에 알림 전송 */
          xTaskNotifyGive(myTask02Handle);
 8000428:	4b13      	ldr	r3, [pc, #76]	@ (8000478 <ButtonTask+0xe0>)
 800042a:	6818      	ldr	r0, [r3, #0]
 800042c:	2300      	movs	r3, #0
 800042e:	2202      	movs	r2, #2
 8000430:	2100      	movs	r1, #0
 8000432:	f004 f9f9 	bl	8004828 <xTaskGenericNotify>
                
          last_press_time = current_time;
 8000436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000438:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800043a:	e7cb      	b.n	80003d4 <ButtonTask+0x3c>
        }
        else
        {
          snprintf(buffer, sizeof(buffer), "Button bounce ignored\r\n");
 800043c:	f107 030c 	add.w	r3, r7, #12
 8000440:	4a0e      	ldr	r2, [pc, #56]	@ (800047c <ButtonTask+0xe4>)
 8000442:	2132      	movs	r1, #50	@ 0x32
 8000444:	4618      	mov	r0, r3
 8000446:	f005 fa3f 	bl	80058c8 <sniprintf>
          HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 800044a:	f107 030c 	add.w	r3, r7, #12
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff fe7e 	bl	8000150 <strlen>
 8000454:	4603      	mov	r3, r0
 8000456:	b29a      	uxth	r2, r3
 8000458:	f107 010c 	add.w	r1, r7, #12
 800045c:	2364      	movs	r3, #100	@ 0x64
 800045e:	4803      	ldr	r0, [pc, #12]	@ (800046c <ButtonTask+0xd4>)
 8000460:	f001 fc54 	bl	8001d0c <HAL_UART_Transmit>
    if (osSemaphoreAcquire(ButtonSemaphoreHandle, osWaitForever) == osOK)
 8000464:	e7b6      	b.n	80003d4 <ButtonTask+0x3c>
 8000466:	bf00      	nop
 8000468:	08006428 	.word	0x08006428
 800046c:	200000dc 	.word	0x200000dc
 8000470:	2000008c 	.word	0x2000008c
 8000474:	08006440 	.word	0x08006440
 8000478:	20000080 	.word	0x20000080
 800047c:	08006460 	.word	0x08006460

08000480 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000494:	4b27      	ldr	r3, [pc, #156]	@ (8000534 <MX_GPIO_Init+0xb4>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a26      	ldr	r2, [pc, #152]	@ (8000534 <MX_GPIO_Init+0xb4>)
 800049a:	f043 0320 	orr.w	r3, r3, #32
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b24      	ldr	r3, [pc, #144]	@ (8000534 <MX_GPIO_Init+0xb4>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0320 	and.w	r3, r3, #32
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ac:	4b21      	ldr	r3, [pc, #132]	@ (8000534 <MX_GPIO_Init+0xb4>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a20      	ldr	r2, [pc, #128]	@ (8000534 <MX_GPIO_Init+0xb4>)
 80004b2:	f043 0304 	orr.w	r3, r3, #4
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000534 <MX_GPIO_Init+0xb4>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0304 	and.w	r3, r3, #4
 80004c0:	60bb      	str	r3, [r7, #8]
 80004c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000534 <MX_GPIO_Init+0xb4>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000534 <MX_GPIO_Init+0xb4>)
 80004ca:	f043 0308 	orr.w	r3, r3, #8
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b18      	ldr	r3, [pc, #96]	@ (8000534 <MX_GPIO_Init+0xb4>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f003 0308 	and.w	r3, r3, #8
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2103      	movs	r1, #3
 80004e0:	4815      	ldr	r0, [pc, #84]	@ (8000538 <MX_GPIO_Init+0xb8>)
 80004e2:	f000 fd15 	bl	8000f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004e6:	2380      	movs	r3, #128	@ 0x80
 80004e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004ea:	4b14      	ldr	r3, [pc, #80]	@ (800053c <MX_GPIO_Init+0xbc>)
 80004ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004ee:	2301      	movs	r3, #1
 80004f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f2:	f107 0310 	add.w	r3, r7, #16
 80004f6:	4619      	mov	r1, r3
 80004f8:	4811      	ldr	r0, [pc, #68]	@ (8000540 <MX_GPIO_Init+0xc0>)
 80004fa:	f000 fb85 	bl	8000c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004fe:	2303      	movs	r3, #3
 8000500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	2301      	movs	r3, #1
 8000504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	2302      	movs	r3, #2
 800050c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	4619      	mov	r1, r3
 8000514:	4808      	ldr	r0, [pc, #32]	@ (8000538 <MX_GPIO_Init+0xb8>)
 8000516:	f000 fb77 	bl	8000c08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	2105      	movs	r1, #5
 800051e:	2017      	movs	r0, #23
 8000520:	f000 fb47 	bl	8000bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000524:	2017      	movs	r0, #23
 8000526:	f000 fb60 	bl	8000bea <HAL_NVIC_EnableIRQ>

}
 800052a:	bf00      	nop
 800052c:	3720      	adds	r7, #32
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000
 8000538:	40010c00 	.word	0x40010c00
 800053c:	10210000 	.word	0x10210000
 8000540:	40010800 	.word	0x40010800

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fa4c 	bl	80009e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f80c 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f7ff ff96 	bl	8000480 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000554:	f000 f9aa 	bl	80008ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000558:	f001 fdf0 	bl	800213c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800055c:	f7ff fe00 	bl	8000160 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000560:	f001 fe0e 	bl	8002180 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <main+0x20>

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b090      	sub	sp, #64	@ 0x40
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0318 	add.w	r3, r7, #24
 8000572:	2228      	movs	r2, #40	@ 0x28
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f005 f9dc 	bl	8005934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058a:	2301      	movs	r3, #1
 800058c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000592:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005a6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0318 	add.w	r3, r7, #24
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fcdd 	bl	8000f70 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005bc:	f000 f852 	bl	8000664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2302      	movs	r3, #2
 80005c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2102      	movs	r1, #2
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 ff4a 	bl	8001474 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005e6:	f000 f83d 	bl	8000664 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3740      	adds	r7, #64	@ 0x40
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7)
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	2b80      	cmp	r3, #128	@ 0x80
 8000602:	d115      	bne.n	8000630 <HAL_GPIO_EXTI_Callback+0x3c>
    {
        /* FreeRTOS ISR 안전 처리 */
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]

        /* CubeMX에서 생성된 세마포어 사용 */
        if (ButtonSemaphoreHandle != NULL) {
 8000608:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <HAL_GPIO_EXTI_Callback+0x44>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d004      	beq.n	800061a <HAL_GPIO_EXTI_Callback+0x26>
            osSemaphoreRelease(ButtonSemaphoreHandle);
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <HAL_GPIO_EXTI_Callback+0x44>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f001 ff77 	bl	8002508 <osSemaphoreRelease>
        }

        /* 필요시 컨텍스트 스위치 요청 */
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d007      	beq.n	8000630 <HAL_GPIO_EXTI_Callback+0x3c>
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <HAL_GPIO_EXTI_Callback+0x48>)
 8000622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	f3bf 8f4f 	dsb	sy
 800062c:	f3bf 8f6f 	isb	sy
    }
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000008c 	.word	0x2000008c
 800063c:	e000ed04 	.word	0xe000ed04

08000640 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a04      	ldr	r2, [pc, #16]	@ (8000660 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d101      	bne.n	8000656 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000652:	f000 f9dd 	bl	8000a10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40000400 	.word	0x40000400

08000664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000668:	b672      	cpsid	i
}
 800066a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <Error_Handler+0x8>

08000670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000676:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <HAL_MspInit+0x68>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	4a17      	ldr	r2, [pc, #92]	@ (80006d8 <HAL_MspInit+0x68>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6193      	str	r3, [r2, #24]
 8000682:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <HAL_MspInit+0x68>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068e:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <HAL_MspInit+0x68>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	4a11      	ldr	r2, [pc, #68]	@ (80006d8 <HAL_MspInit+0x68>)
 8000694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000698:	61d3      	str	r3, [r2, #28]
 800069a:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <HAL_MspInit+0x68>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	210f      	movs	r1, #15
 80006aa:	f06f 0001 	mvn.w	r0, #1
 80006ae:	f000 fa80 	bl	8000bb2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006b2:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <HAL_MspInit+0x6c>)
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	4a04      	ldr	r2, [pc, #16]	@ (80006dc <HAL_MspInit+0x6c>)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010000 	.word	0x40010000

080006e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08e      	sub	sp, #56	@ 0x38
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80006f6:	4b34      	ldr	r3, [pc, #208]	@ (80007c8 <HAL_InitTick+0xe8>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	4a33      	ldr	r2, [pc, #204]	@ (80007c8 <HAL_InitTick+0xe8>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	61d3      	str	r3, [r2, #28]
 8000702:	4b31      	ldr	r3, [pc, #196]	@ (80007c8 <HAL_InitTick+0xe8>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800070e:	f107 0210 	add.w	r2, r7, #16
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4611      	mov	r1, r2
 8000718:	4618      	mov	r0, r3
 800071a:	f001 f81b 	bl	8001754 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800071e:	6a3b      	ldr	r3, [r7, #32]
 8000720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000724:	2b00      	cmp	r3, #0
 8000726:	d103      	bne.n	8000730 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000728:	f000 ffec 	bl	8001704 <HAL_RCC_GetPCLK1Freq>
 800072c:	6378      	str	r0, [r7, #52]	@ 0x34
 800072e:	e004      	b.n	800073a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000730:	f000 ffe8 	bl	8001704 <HAL_RCC_GetPCLK1Freq>
 8000734:	4603      	mov	r3, r0
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800073a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800073c:	4a23      	ldr	r2, [pc, #140]	@ (80007cc <HAL_InitTick+0xec>)
 800073e:	fba2 2303 	umull	r2, r3, r2, r3
 8000742:	0c9b      	lsrs	r3, r3, #18
 8000744:	3b01      	subs	r3, #1
 8000746:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000748:	4b21      	ldr	r3, [pc, #132]	@ (80007d0 <HAL_InitTick+0xf0>)
 800074a:	4a22      	ldr	r2, [pc, #136]	@ (80007d4 <HAL_InitTick+0xf4>)
 800074c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800074e:	4b20      	ldr	r3, [pc, #128]	@ (80007d0 <HAL_InitTick+0xf0>)
 8000750:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000754:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000756:	4a1e      	ldr	r2, [pc, #120]	@ (80007d0 <HAL_InitTick+0xf0>)
 8000758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800075a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800075c:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <HAL_InitTick+0xf0>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000762:	4b1b      	ldr	r3, [pc, #108]	@ (80007d0 <HAL_InitTick+0xf0>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000768:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <HAL_InitTick+0xf0>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800076e:	4818      	ldr	r0, [pc, #96]	@ (80007d0 <HAL_InitTick+0xf0>)
 8000770:	f001 f83e 	bl	80017f0 <HAL_TIM_Base_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800077a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800077e:	2b00      	cmp	r3, #0
 8000780:	d11b      	bne.n	80007ba <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000782:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <HAL_InitTick+0xf0>)
 8000784:	f001 f88c 	bl	80018a0 <HAL_TIM_Base_Start_IT>
 8000788:	4603      	mov	r3, r0
 800078a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800078e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000792:	2b00      	cmp	r3, #0
 8000794:	d111      	bne.n	80007ba <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000796:	201d      	movs	r0, #29
 8000798:	f000 fa27 	bl	8000bea <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b0f      	cmp	r3, #15
 80007a0:	d808      	bhi.n	80007b4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80007a2:	2200      	movs	r2, #0
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	201d      	movs	r0, #29
 80007a8:	f000 fa03 	bl	8000bb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007ac:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <HAL_InitTick+0xf8>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6013      	str	r3, [r2, #0]
 80007b2:	e002      	b.n	80007ba <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3738      	adds	r7, #56	@ 0x38
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000
 80007cc:	431bde83 	.word	0x431bde83
 80007d0:	20000090 	.word	0x20000090
 80007d4:	40000400 	.word	0x40000400
 80007d8:	20000004 	.word	0x20000004

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <NMI_Handler+0x4>

080007e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <HardFault_Handler+0x4>

080007ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <MemManage_Handler+0x4>

080007f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <BusFault_Handler+0x4>

080007fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <UsageFault_Handler+0x4>

08000804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000814:	2080      	movs	r0, #128	@ 0x80
 8000816:	f000 fb93 	bl	8000f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000824:	4802      	ldr	r0, [pc, #8]	@ (8000830 <TIM3_IRQHandler+0x10>)
 8000826:	f001 f88d 	bl	8001944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000090 	.word	0x20000090

08000834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800083c:	4a14      	ldr	r2, [pc, #80]	@ (8000890 <_sbrk+0x5c>)
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <_sbrk+0x60>)
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000848:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <_sbrk+0x64>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d102      	bne.n	8000856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <_sbrk+0x64>)
 8000852:	4a12      	ldr	r2, [pc, #72]	@ (800089c <_sbrk+0x68>)
 8000854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <_sbrk+0x64>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4413      	add	r3, r2
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	429a      	cmp	r2, r3
 8000862:	d207      	bcs.n	8000874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000864:	f005 f8cc 	bl	8005a00 <__errno>
 8000868:	4603      	mov	r3, r0
 800086a:	220c      	movs	r2, #12
 800086c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	e009      	b.n	8000888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000874:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <_sbrk+0x64>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <_sbrk+0x64>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	4a05      	ldr	r2, [pc, #20]	@ (8000898 <_sbrk+0x64>)
 8000884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000886:	68fb      	ldr	r3, [r7, #12]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20005000 	.word	0x20005000
 8000894:	00000400 	.word	0x00000400
 8000898:	200000d8 	.word	0x200000d8
 800089c:	20001c58 	.word	0x20001c58

080008a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	@ (80008fc <MX_USART1_UART_Init+0x50>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008e4:	f001 f9c2 	bl	8001c6c <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ee:	f7ff feb9 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200000dc 	.word	0x200000dc
 80008fc:	40013800 	.word	0x40013800

08000900 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a1c      	ldr	r2, [pc, #112]	@ (800098c <HAL_UART_MspInit+0x8c>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d131      	bne.n	8000984 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000920:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <HAL_UART_MspInit+0x90>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a1a      	ldr	r2, [pc, #104]	@ (8000990 <HAL_UART_MspInit+0x90>)
 8000926:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <HAL_UART_MspInit+0x90>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <HAL_UART_MspInit+0x90>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a14      	ldr	r2, [pc, #80]	@ (8000990 <HAL_UART_MspInit+0x90>)
 800093e:	f043 0304 	orr.w	r3, r3, #4
 8000942:	6193      	str	r3, [r2, #24]
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <HAL_UART_MspInit+0x90>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0304 	and.w	r3, r3, #4
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000950:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000954:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 0310 	add.w	r3, r7, #16
 8000962:	4619      	mov	r1, r3
 8000964:	480b      	ldr	r0, [pc, #44]	@ (8000994 <HAL_UART_MspInit+0x94>)
 8000966:	f000 f94f 	bl	8000c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800096a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800096e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	4619      	mov	r1, r3
 800097e:	4805      	ldr	r0, [pc, #20]	@ (8000994 <HAL_UART_MspInit+0x94>)
 8000980:	f000 f942 	bl	8000c08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000984:	bf00      	nop
 8000986:	3720      	adds	r7, #32
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40013800 	.word	0x40013800
 8000990:	40021000 	.word	0x40021000
 8000994:	40010800 	.word	0x40010800

08000998 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000998:	f7ff ff82 	bl	80008a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800099c:	480b      	ldr	r0, [pc, #44]	@ (80009cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800099e:	490c      	ldr	r1, [pc, #48]	@ (80009d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009a0:	4a0c      	ldr	r2, [pc, #48]	@ (80009d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a09      	ldr	r2, [pc, #36]	@ (80009d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009b4:	4c09      	ldr	r4, [pc, #36]	@ (80009dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c2:	f005 f823 	bl	8005a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c6:	f7ff fdbd 	bl	8000544 <main>
  bx lr
 80009ca:	4770      	bx	lr
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009d4:	080065a0 	.word	0x080065a0
  ldr r2, =_sbss
 80009d8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009dc:	20001c58 	.word	0x20001c58

080009e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC1_2_IRQHandler>
	...

080009e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e8:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <HAL_Init+0x28>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a07      	ldr	r2, [pc, #28]	@ (8000a0c <HAL_Init+0x28>)
 80009ee:	f043 0310 	orr.w	r3, r3, #16
 80009f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f000 f8d1 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fa:	200f      	movs	r0, #15
 80009fc:	f7ff fe70 	bl	80006e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a00:	f7ff fe36 	bl	8000670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40022000 	.word	0x40022000

08000a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <HAL_IncTick+0x1c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <HAL_IncTick+0x20>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a03      	ldr	r2, [pc, #12]	@ (8000a30 <HAL_IncTick+0x20>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000124 	.word	0x20000124

08000a34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b02      	ldr	r3, [pc, #8]	@ (8000a44 <HAL_GetTick+0x10>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	20000124 	.word	0x20000124

08000a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7a:	4a04      	ldr	r2, [pc, #16]	@ (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	60d3      	str	r3, [r2, #12]
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a94:	4b04      	ldr	r3, [pc, #16]	@ (8000aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	f003 0307 	and.w	r3, r3, #7
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db0b      	blt.n	8000ad6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	f003 021f 	and.w	r2, r3, #31
 8000ac4:	4906      	ldr	r1, [pc, #24]	@ (8000ae0 <__NVIC_EnableIRQ+0x34>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	095b      	lsrs	r3, r3, #5
 8000acc:	2001      	movs	r0, #1
 8000ace:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	e000e100 	.word	0xe000e100

08000ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db0a      	blt.n	8000b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	490c      	ldr	r1, [pc, #48]	@ (8000b30 <__NVIC_SetPriority+0x4c>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	0112      	lsls	r2, r2, #4
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	440b      	add	r3, r1
 8000b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b0c:	e00a      	b.n	8000b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4908      	ldr	r1, [pc, #32]	@ (8000b34 <__NVIC_SetPriority+0x50>)
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	0112      	lsls	r2, r2, #4
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	440b      	add	r3, r1
 8000b22:	761a      	strb	r2, [r3, #24]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	@ 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f1c3 0307 	rsb	r3, r3, #7
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	bf28      	it	cs
 8000b56:	2304      	movcs	r3, #4
 8000b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d902      	bls.n	8000b68 <NVIC_EncodePriority+0x30>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3b03      	subs	r3, #3
 8000b66:	e000      	b.n	8000b6a <NVIC_EncodePriority+0x32>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43da      	mvns	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43d9      	mvns	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	4313      	orrs	r3, r2
         );
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3724      	adds	r7, #36	@ 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff4f 	bl	8000a48 <__NVIC_SetPriorityGrouping>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc4:	f7ff ff64 	bl	8000a90 <__NVIC_GetPriorityGrouping>
 8000bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	6978      	ldr	r0, [r7, #20]
 8000bd0:	f7ff ffb2 	bl	8000b38 <NVIC_EncodePriority>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff81 	bl	8000ae4 <__NVIC_SetPriority>
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff57 	bl	8000aac <__NVIC_EnableIRQ>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b08b      	sub	sp, #44	@ 0x2c
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1a:	e169      	b.n	8000ef0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	69fa      	ldr	r2, [r7, #28]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	f040 8158 	bne.w	8000eea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	4a9a      	ldr	r2, [pc, #616]	@ (8000ea8 <HAL_GPIO_Init+0x2a0>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d05e      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
 8000c44:	4a98      	ldr	r2, [pc, #608]	@ (8000ea8 <HAL_GPIO_Init+0x2a0>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d875      	bhi.n	8000d36 <HAL_GPIO_Init+0x12e>
 8000c4a:	4a98      	ldr	r2, [pc, #608]	@ (8000eac <HAL_GPIO_Init+0x2a4>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d058      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
 8000c50:	4a96      	ldr	r2, [pc, #600]	@ (8000eac <HAL_GPIO_Init+0x2a4>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d86f      	bhi.n	8000d36 <HAL_GPIO_Init+0x12e>
 8000c56:	4a96      	ldr	r2, [pc, #600]	@ (8000eb0 <HAL_GPIO_Init+0x2a8>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d052      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
 8000c5c:	4a94      	ldr	r2, [pc, #592]	@ (8000eb0 <HAL_GPIO_Init+0x2a8>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d869      	bhi.n	8000d36 <HAL_GPIO_Init+0x12e>
 8000c62:	4a94      	ldr	r2, [pc, #592]	@ (8000eb4 <HAL_GPIO_Init+0x2ac>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d04c      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
 8000c68:	4a92      	ldr	r2, [pc, #584]	@ (8000eb4 <HAL_GPIO_Init+0x2ac>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d863      	bhi.n	8000d36 <HAL_GPIO_Init+0x12e>
 8000c6e:	4a92      	ldr	r2, [pc, #584]	@ (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d046      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
 8000c74:	4a90      	ldr	r2, [pc, #576]	@ (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d85d      	bhi.n	8000d36 <HAL_GPIO_Init+0x12e>
 8000c7a:	2b12      	cmp	r3, #18
 8000c7c:	d82a      	bhi.n	8000cd4 <HAL_GPIO_Init+0xcc>
 8000c7e:	2b12      	cmp	r3, #18
 8000c80:	d859      	bhi.n	8000d36 <HAL_GPIO_Init+0x12e>
 8000c82:	a201      	add	r2, pc, #4	@ (adr r2, 8000c88 <HAL_GPIO_Init+0x80>)
 8000c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c88:	08000d03 	.word	0x08000d03
 8000c8c:	08000cdd 	.word	0x08000cdd
 8000c90:	08000cef 	.word	0x08000cef
 8000c94:	08000d31 	.word	0x08000d31
 8000c98:	08000d37 	.word	0x08000d37
 8000c9c:	08000d37 	.word	0x08000d37
 8000ca0:	08000d37 	.word	0x08000d37
 8000ca4:	08000d37 	.word	0x08000d37
 8000ca8:	08000d37 	.word	0x08000d37
 8000cac:	08000d37 	.word	0x08000d37
 8000cb0:	08000d37 	.word	0x08000d37
 8000cb4:	08000d37 	.word	0x08000d37
 8000cb8:	08000d37 	.word	0x08000d37
 8000cbc:	08000d37 	.word	0x08000d37
 8000cc0:	08000d37 	.word	0x08000d37
 8000cc4:	08000d37 	.word	0x08000d37
 8000cc8:	08000d37 	.word	0x08000d37
 8000ccc:	08000ce5 	.word	0x08000ce5
 8000cd0:	08000cf9 	.word	0x08000cf9
 8000cd4:	4a79      	ldr	r2, [pc, #484]	@ (8000ebc <HAL_GPIO_Init+0x2b4>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d013      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cda:	e02c      	b.n	8000d36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	623b      	str	r3, [r7, #32]
          break;
 8000ce2:	e029      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	623b      	str	r3, [r7, #32]
          break;
 8000cec:	e024      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	3308      	adds	r3, #8
 8000cf4:	623b      	str	r3, [r7, #32]
          break;
 8000cf6:	e01f      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	330c      	adds	r3, #12
 8000cfe:	623b      	str	r3, [r7, #32]
          break;
 8000d00:	e01a      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d102      	bne.n	8000d10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	623b      	str	r3, [r7, #32]
          break;
 8000d0e:	e013      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d105      	bne.n	8000d24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69fa      	ldr	r2, [r7, #28]
 8000d20:	611a      	str	r2, [r3, #16]
          break;
 8000d22:	e009      	b.n	8000d38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d24:	2308      	movs	r3, #8
 8000d26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69fa      	ldr	r2, [r7, #28]
 8000d2c:	615a      	str	r2, [r3, #20]
          break;
 8000d2e:	e003      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
          break;
 8000d34:	e000      	b.n	8000d38 <HAL_GPIO_Init+0x130>
          break;
 8000d36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	2bff      	cmp	r3, #255	@ 0xff
 8000d3c:	d801      	bhi.n	8000d42 <HAL_GPIO_Init+0x13a>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	e001      	b.n	8000d46 <HAL_GPIO_Init+0x13e>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3304      	adds	r3, #4
 8000d46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	2bff      	cmp	r3, #255	@ 0xff
 8000d4c:	d802      	bhi.n	8000d54 <HAL_GPIO_Init+0x14c>
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	e002      	b.n	8000d5a <HAL_GPIO_Init+0x152>
 8000d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d56:	3b08      	subs	r3, #8
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	210f      	movs	r1, #15
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	fa01 f303 	lsl.w	r3, r1, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	6a39      	ldr	r1, [r7, #32]
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	431a      	orrs	r2, r3
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 80b1 	beq.w	8000eea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d88:	4b4d      	ldr	r3, [pc, #308]	@ (8000ec0 <HAL_GPIO_Init+0x2b8>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a4c      	ldr	r2, [pc, #304]	@ (8000ec0 <HAL_GPIO_Init+0x2b8>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b4a      	ldr	r3, [pc, #296]	@ (8000ec0 <HAL_GPIO_Init+0x2b8>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000da0:	4a48      	ldr	r2, [pc, #288]	@ (8000ec4 <HAL_GPIO_Init+0x2bc>)
 8000da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da4:	089b      	lsrs	r3, r3, #2
 8000da6:	3302      	adds	r3, #2
 8000da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	220f      	movs	r2, #15
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a40      	ldr	r2, [pc, #256]	@ (8000ec8 <HAL_GPIO_Init+0x2c0>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d013      	beq.n	8000df4 <HAL_GPIO_Init+0x1ec>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a3f      	ldr	r2, [pc, #252]	@ (8000ecc <HAL_GPIO_Init+0x2c4>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d00d      	beq.n	8000df0 <HAL_GPIO_Init+0x1e8>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a3e      	ldr	r2, [pc, #248]	@ (8000ed0 <HAL_GPIO_Init+0x2c8>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d007      	beq.n	8000dec <HAL_GPIO_Init+0x1e4>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a3d      	ldr	r2, [pc, #244]	@ (8000ed4 <HAL_GPIO_Init+0x2cc>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d101      	bne.n	8000de8 <HAL_GPIO_Init+0x1e0>
 8000de4:	2303      	movs	r3, #3
 8000de6:	e006      	b.n	8000df6 <HAL_GPIO_Init+0x1ee>
 8000de8:	2304      	movs	r3, #4
 8000dea:	e004      	b.n	8000df6 <HAL_GPIO_Init+0x1ee>
 8000dec:	2302      	movs	r3, #2
 8000dee:	e002      	b.n	8000df6 <HAL_GPIO_Init+0x1ee>
 8000df0:	2301      	movs	r3, #1
 8000df2:	e000      	b.n	8000df6 <HAL_GPIO_Init+0x1ee>
 8000df4:	2300      	movs	r3, #0
 8000df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000df8:	f002 0203 	and.w	r2, r2, #3
 8000dfc:	0092      	lsls	r2, r2, #2
 8000dfe:	4093      	lsls	r3, r2
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e06:	492f      	ldr	r1, [pc, #188]	@ (8000ec4 <HAL_GPIO_Init+0x2bc>)
 8000e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d006      	beq.n	8000e2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e20:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	492c      	ldr	r1, [pc, #176]	@ (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	608b      	str	r3, [r1, #8]
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	4928      	ldr	r1, [pc, #160]	@ (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e38:	4013      	ands	r3, r2
 8000e3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d006      	beq.n	8000e56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e48:	4b23      	ldr	r3, [pc, #140]	@ (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	4922      	ldr	r1, [pc, #136]	@ (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	60cb      	str	r3, [r1, #12]
 8000e54:	e006      	b.n	8000e64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e56:	4b20      	ldr	r3, [pc, #128]	@ (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e58:	68da      	ldr	r2, [r3, #12]
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	491e      	ldr	r1, [pc, #120]	@ (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e60:	4013      	ands	r3, r2
 8000e62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d006      	beq.n	8000e7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e70:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	4918      	ldr	r1, [pc, #96]	@ (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	604b      	str	r3, [r1, #4]
 8000e7c:	e006      	b.n	8000e8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	4914      	ldr	r1, [pc, #80]	@ (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e88:	4013      	ands	r3, r2
 8000e8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d021      	beq.n	8000edc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	490e      	ldr	r1, [pc, #56]	@ (8000ed8 <HAL_GPIO_Init+0x2d0>)
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	600b      	str	r3, [r1, #0]
 8000ea4:	e021      	b.n	8000eea <HAL_GPIO_Init+0x2e2>
 8000ea6:	bf00      	nop
 8000ea8:	10320000 	.word	0x10320000
 8000eac:	10310000 	.word	0x10310000
 8000eb0:	10220000 	.word	0x10220000
 8000eb4:	10210000 	.word	0x10210000
 8000eb8:	10120000 	.word	0x10120000
 8000ebc:	10110000 	.word	0x10110000
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010000 	.word	0x40010000
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	40010c00 	.word	0x40010c00
 8000ed0:	40011000 	.word	0x40011000
 8000ed4:	40011400 	.word	0x40011400
 8000ed8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000edc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <HAL_GPIO_Init+0x304>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	4909      	ldr	r1, [pc, #36]	@ (8000f0c <HAL_GPIO_Init+0x304>)
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eec:	3301      	adds	r3, #1
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f47f ae8e 	bne.w	8000c1c <HAL_GPIO_Init+0x14>
  }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	372c      	adds	r7, #44	@ 0x2c
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40010400 	.word	0x40010400

08000f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	807b      	strh	r3, [r7, #2]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f20:	787b      	ldrb	r3, [r7, #1]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f26:	887a      	ldrh	r2, [r7, #2]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f2c:	e003      	b.n	8000f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f2e:	887b      	ldrh	r3, [r7, #2]
 8000f30:	041a      	lsls	r2, r3, #16
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	611a      	str	r2, [r3, #16]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f4a:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f4c:	695a      	ldr	r2, [r3, #20]
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	4013      	ands	r3, r2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d006      	beq.n	8000f64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fb48 	bl	80005f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40010400 	.word	0x40010400

08000f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e272      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 8087 	beq.w	800109e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f90:	4b92      	ldr	r3, [pc, #584]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 030c 	and.w	r3, r3, #12
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d00c      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f9c:	4b8f      	ldr	r3, [pc, #572]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 030c 	and.w	r3, r3, #12
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d112      	bne.n	8000fce <HAL_RCC_OscConfig+0x5e>
 8000fa8:	4b8c      	ldr	r3, [pc, #560]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fb4:	d10b      	bne.n	8000fce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb6:	4b89      	ldr	r3, [pc, #548]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d06c      	beq.n	800109c <HAL_RCC_OscConfig+0x12c>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d168      	bne.n	800109c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e24c      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fd6:	d106      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x76>
 8000fd8:	4b80      	ldr	r3, [pc, #512]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a7f      	ldr	r2, [pc, #508]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000fde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	e02e      	b.n	8001044 <HAL_RCC_OscConfig+0xd4>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10c      	bne.n	8001008 <HAL_RCC_OscConfig+0x98>
 8000fee:	4b7b      	ldr	r3, [pc, #492]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a7a      	ldr	r2, [pc, #488]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	4b78      	ldr	r3, [pc, #480]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a77      	ldr	r2, [pc, #476]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001000:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	e01d      	b.n	8001044 <HAL_RCC_OscConfig+0xd4>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001010:	d10c      	bne.n	800102c <HAL_RCC_OscConfig+0xbc>
 8001012:	4b72      	ldr	r3, [pc, #456]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a71      	ldr	r2, [pc, #452]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001018:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b6f      	ldr	r3, [pc, #444]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a6e      	ldr	r2, [pc, #440]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e00b      	b.n	8001044 <HAL_RCC_OscConfig+0xd4>
 800102c:	4b6b      	ldr	r3, [pc, #428]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a6a      	ldr	r2, [pc, #424]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b68      	ldr	r3, [pc, #416]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a67      	ldr	r2, [pc, #412]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 800103e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001042:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d013      	beq.n	8001074 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fcf2 	bl	8000a34 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001054:	f7ff fcee 	bl	8000a34 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b64      	cmp	r3, #100	@ 0x64
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e200      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001066:	4b5d      	ldr	r3, [pc, #372]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f0      	beq.n	8001054 <HAL_RCC_OscConfig+0xe4>
 8001072:	e014      	b.n	800109e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fcde 	bl	8000a34 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800107c:	f7ff fcda 	bl	8000a34 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b64      	cmp	r3, #100	@ 0x64
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e1ec      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108e:	4b53      	ldr	r3, [pc, #332]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0x10c>
 800109a:	e000      	b.n	800109e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d063      	beq.n	8001172 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010aa:	4b4c      	ldr	r3, [pc, #304]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 030c 	and.w	r3, r3, #12
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00b      	beq.n	80010ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010b6:	4b49      	ldr	r3, [pc, #292]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d11c      	bne.n	80010fc <HAL_RCC_OscConfig+0x18c>
 80010c2:	4b46      	ldr	r3, [pc, #280]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d116      	bne.n	80010fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ce:	4b43      	ldr	r3, [pc, #268]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <HAL_RCC_OscConfig+0x176>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d001      	beq.n	80010e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e1c0      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e6:	4b3d      	ldr	r3, [pc, #244]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	4939      	ldr	r1, [pc, #228]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fa:	e03a      	b.n	8001172 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d020      	beq.n	8001146 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001104:	4b36      	ldr	r3, [pc, #216]	@ (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001106:	2201      	movs	r2, #1
 8001108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110a:	f7ff fc93 	bl	8000a34 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001112:	f7ff fc8f 	bl	8000a34 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e1a1      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001124:	4b2d      	ldr	r3, [pc, #180]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0f0      	beq.n	8001112 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001130:	4b2a      	ldr	r3, [pc, #168]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	4927      	ldr	r1, [pc, #156]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001140:	4313      	orrs	r3, r2
 8001142:	600b      	str	r3, [r1, #0]
 8001144:	e015      	b.n	8001172 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001146:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fc72 	bl	8000a34 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001154:	f7ff fc6e 	bl	8000a34 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e180      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001166:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d03a      	beq.n	80011f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d019      	beq.n	80011ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001186:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <HAL_RCC_OscConfig+0x274>)
 8001188:	2201      	movs	r2, #1
 800118a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118c:	f7ff fc52 	bl	8000a34 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001194:	f7ff fc4e 	bl	8000a34 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e160      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a6:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <HAL_RCC_OscConfig+0x26c>)
 80011a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f000 fafe 	bl	80017b4 <RCC_Delay>
 80011b8:	e01c      	b.n	80011f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ba:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <HAL_RCC_OscConfig+0x274>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c0:	f7ff fc38 	bl	8000a34 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c6:	e00f      	b.n	80011e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c8:	f7ff fc34 	bl	8000a34 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d908      	bls.n	80011e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e146      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000
 80011e0:	42420000 	.word	0x42420000
 80011e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e8:	4b92      	ldr	r3, [pc, #584]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80011ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1e9      	bne.n	80011c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 80a6 	beq.w	800134e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001202:	2300      	movs	r3, #0
 8001204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001206:	4b8b      	ldr	r3, [pc, #556]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10d      	bne.n	800122e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b88      	ldr	r3, [pc, #544]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a87      	ldr	r2, [pc, #540]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b85      	ldr	r3, [pc, #532]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800122a:	2301      	movs	r3, #1
 800122c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122e:	4b82      	ldr	r3, [pc, #520]	@ (8001438 <HAL_RCC_OscConfig+0x4c8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001236:	2b00      	cmp	r3, #0
 8001238:	d118      	bne.n	800126c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800123a:	4b7f      	ldr	r3, [pc, #508]	@ (8001438 <HAL_RCC_OscConfig+0x4c8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a7e      	ldr	r2, [pc, #504]	@ (8001438 <HAL_RCC_OscConfig+0x4c8>)
 8001240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001246:	f7ff fbf5 	bl	8000a34 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124e:	f7ff fbf1 	bl	8000a34 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b64      	cmp	r3, #100	@ 0x64
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e103      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001260:	4b75      	ldr	r3, [pc, #468]	@ (8001438 <HAL_RCC_OscConfig+0x4c8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d106      	bne.n	8001282 <HAL_RCC_OscConfig+0x312>
 8001274:	4b6f      	ldr	r3, [pc, #444]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	4a6e      	ldr	r2, [pc, #440]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6213      	str	r3, [r2, #32]
 8001280:	e02d      	b.n	80012de <HAL_RCC_OscConfig+0x36e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x334>
 800128a:	4b6a      	ldr	r3, [pc, #424]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4a69      	ldr	r2, [pc, #420]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	6213      	str	r3, [r2, #32]
 8001296:	4b67      	ldr	r3, [pc, #412]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	4a66      	ldr	r2, [pc, #408]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 800129c:	f023 0304 	bic.w	r3, r3, #4
 80012a0:	6213      	str	r3, [r2, #32]
 80012a2:	e01c      	b.n	80012de <HAL_RCC_OscConfig+0x36e>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	d10c      	bne.n	80012c6 <HAL_RCC_OscConfig+0x356>
 80012ac:	4b61      	ldr	r3, [pc, #388]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4a60      	ldr	r2, [pc, #384]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6213      	str	r3, [r2, #32]
 80012b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	4a5d      	ldr	r2, [pc, #372]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6213      	str	r3, [r2, #32]
 80012c4:	e00b      	b.n	80012de <HAL_RCC_OscConfig+0x36e>
 80012c6:	4b5b      	ldr	r3, [pc, #364]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	4a5a      	ldr	r2, [pc, #360]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	f023 0301 	bic.w	r3, r3, #1
 80012d0:	6213      	str	r3, [r2, #32]
 80012d2:	4b58      	ldr	r3, [pc, #352]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	4a57      	ldr	r2, [pc, #348]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	f023 0304 	bic.w	r3, r3, #4
 80012dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d015      	beq.n	8001312 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e6:	f7ff fba5 	bl	8000a34 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ec:	e00a      	b.n	8001304 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ee:	f7ff fba1 	bl	8000a34 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e0b1      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001304:	4b4b      	ldr	r3, [pc, #300]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0ee      	beq.n	80012ee <HAL_RCC_OscConfig+0x37e>
 8001310:	e014      	b.n	800133c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001312:	f7ff fb8f 	bl	8000a34 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001318:	e00a      	b.n	8001330 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800131a:	f7ff fb8b 	bl	8000a34 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001328:	4293      	cmp	r3, r2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e09b      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001330:	4b40      	ldr	r3, [pc, #256]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1ee      	bne.n	800131a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d105      	bne.n	800134e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001342:	4b3c      	ldr	r3, [pc, #240]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a3b      	ldr	r2, [pc, #236]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800134c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8087 	beq.w	8001466 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001358:	4b36      	ldr	r3, [pc, #216]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 030c 	and.w	r3, r3, #12
 8001360:	2b08      	cmp	r3, #8
 8001362:	d061      	beq.n	8001428 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d146      	bne.n	80013fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136c:	4b33      	ldr	r3, [pc, #204]	@ (800143c <HAL_RCC_OscConfig+0x4cc>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001372:	f7ff fb5f 	bl	8000a34 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137a:	f7ff fb5b 	bl	8000a34 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e06d      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138c:	4b29      	ldr	r3, [pc, #164]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f0      	bne.n	800137a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013a0:	d108      	bne.n	80013b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013a2:	4b24      	ldr	r3, [pc, #144]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	4921      	ldr	r1, [pc, #132]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a19      	ldr	r1, [r3, #32]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c4:	430b      	orrs	r3, r1
 80013c6:	491b      	ldr	r1, [pc, #108]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013cc:	4b1b      	ldr	r3, [pc, #108]	@ (800143c <HAL_RCC_OscConfig+0x4cc>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d2:	f7ff fb2f 	bl	8000a34 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013da:	f7ff fb2b 	bl	8000a34 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e03d      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ec:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x46a>
 80013f8:	e035      	b.n	8001466 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fa:	4b10      	ldr	r3, [pc, #64]	@ (800143c <HAL_RCC_OscConfig+0x4cc>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fb18 	bl	8000a34 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001408:	f7ff fb14 	bl	8000a34 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e026      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <HAL_RCC_OscConfig+0x4c4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x498>
 8001426:	e01e      	b.n	8001466 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d107      	bne.n	8001440 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e019      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
 8001434:	40021000 	.word	0x40021000
 8001438:	40007000 	.word	0x40007000
 800143c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001440:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <HAL_RCC_OscConfig+0x500>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	429a      	cmp	r2, r3
 8001452:	d106      	bne.n	8001462 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145e:	429a      	cmp	r2, r3
 8001460:	d001      	beq.n	8001466 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000

08001474 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0d0      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001488:	4b6a      	ldr	r3, [pc, #424]	@ (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	d910      	bls.n	80014b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001496:	4b67      	ldr	r3, [pc, #412]	@ (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 0207 	bic.w	r2, r3, #7
 800149e:	4965      	ldr	r1, [pc, #404]	@ (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a6:	4b63      	ldr	r3, [pc, #396]	@ (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0b8      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d020      	beq.n	8001506 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d0:	4b59      	ldr	r3, [pc, #356]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4a58      	ldr	r2, [pc, #352]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e8:	4b53      	ldr	r3, [pc, #332]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	4a52      	ldr	r2, [pc, #328]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80014f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f4:	4b50      	ldr	r3, [pc, #320]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	494d      	ldr	r1, [pc, #308]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d040      	beq.n	8001594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d107      	bne.n	800152a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	4b47      	ldr	r3, [pc, #284]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d115      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e07f      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001532:	4b41      	ldr	r3, [pc, #260]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e073      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001542:	4b3d      	ldr	r3, [pc, #244]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e06b      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001552:	4b39      	ldr	r3, [pc, #228]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f023 0203 	bic.w	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4936      	ldr	r1, [pc, #216]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001564:	f7ff fa66 	bl	8000a34 <HAL_GetTick>
 8001568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156a:	e00a      	b.n	8001582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156c:	f7ff fa62 	bl	8000a34 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e053      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	4b2d      	ldr	r3, [pc, #180]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 020c 	and.w	r2, r3, #12
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	429a      	cmp	r2, r3
 8001592:	d1eb      	bne.n	800156c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001594:	4b27      	ldr	r3, [pc, #156]	@ (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d210      	bcs.n	80015c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b24      	ldr	r3, [pc, #144]	@ (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 0207 	bic.w	r2, r3, #7
 80015aa:	4922      	ldr	r1, [pc, #136]	@ (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <HAL_RCC_ClockConfig+0x1c0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e032      	b.n	800162a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d0:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	4916      	ldr	r1, [pc, #88]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d009      	beq.n	8001602 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ee:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	490e      	ldr	r1, [pc, #56]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001602:	f000 f821 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8001606:	4602      	mov	r2, r0
 8001608:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	490a      	ldr	r1, [pc, #40]	@ (800163c <HAL_RCC_ClockConfig+0x1c8>)
 8001614:	5ccb      	ldrb	r3, [r1, r3]
 8001616:	fa22 f303 	lsr.w	r3, r2, r3
 800161a:	4a09      	ldr	r2, [pc, #36]	@ (8001640 <HAL_RCC_ClockConfig+0x1cc>)
 800161c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <HAL_RCC_ClockConfig+0x1d0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff f85c 	bl	80006e0 <HAL_InitTick>

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40022000 	.word	0x40022000
 8001638:	40021000 	.word	0x40021000
 800163c:	08006530 	.word	0x08006530
 8001640:	20000000 	.word	0x20000000
 8001644:	20000004 	.word	0x20000004

08001648 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001648:	b480      	push	{r7}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001662:	4b1e      	ldr	r3, [pc, #120]	@ (80016dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b04      	cmp	r3, #4
 8001670:	d002      	beq.n	8001678 <HAL_RCC_GetSysClockFreq+0x30>
 8001672:	2b08      	cmp	r3, #8
 8001674:	d003      	beq.n	800167e <HAL_RCC_GetSysClockFreq+0x36>
 8001676:	e027      	b.n	80016c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001678:	4b19      	ldr	r3, [pc, #100]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800167a:	613b      	str	r3, [r7, #16]
      break;
 800167c:	e027      	b.n	80016ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	0c9b      	lsrs	r3, r3, #18
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	4a17      	ldr	r2, [pc, #92]	@ (80016e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001688:	5cd3      	ldrb	r3, [r2, r3]
 800168a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d010      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	0c5b      	lsrs	r3, r3, #17
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	4a11      	ldr	r2, [pc, #68]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016a2:	5cd3      	ldrb	r3, [r2, r3]
 80016a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a0d      	ldr	r2, [pc, #52]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80016aa:	fb03 f202 	mul.w	r2, r3, r2
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	e004      	b.n	80016c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a0c      	ldr	r2, [pc, #48]	@ (80016ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	613b      	str	r3, [r7, #16]
      break;
 80016c6:	e002      	b.n	80016ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80016ca:	613b      	str	r3, [r7, #16]
      break;
 80016cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ce:	693b      	ldr	r3, [r7, #16]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	007a1200 	.word	0x007a1200
 80016e4:	08006548 	.word	0x08006548
 80016e8:	08006558 	.word	0x08006558
 80016ec:	003d0900 	.word	0x003d0900

080016f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016f4:	4b02      	ldr	r3, [pc, #8]	@ (8001700 <HAL_RCC_GetHCLKFreq+0x10>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	20000000 	.word	0x20000000

08001704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001708:	f7ff fff2 	bl	80016f0 <HAL_RCC_GetHCLKFreq>
 800170c:	4602      	mov	r2, r0
 800170e:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	0a1b      	lsrs	r3, r3, #8
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	4903      	ldr	r1, [pc, #12]	@ (8001728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800171a:	5ccb      	ldrb	r3, [r1, r3]
 800171c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001720:	4618      	mov	r0, r3
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40021000 	.word	0x40021000
 8001728:	08006540 	.word	0x08006540

0800172c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001730:	f7ff ffde 	bl	80016f0 <HAL_RCC_GetHCLKFreq>
 8001734:	4602      	mov	r2, r0
 8001736:	4b05      	ldr	r3, [pc, #20]	@ (800174c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	0adb      	lsrs	r3, r3, #11
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	4903      	ldr	r1, [pc, #12]	@ (8001750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001742:	5ccb      	ldrb	r3, [r1, r3]
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001748:	4618      	mov	r0, r3
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40021000 	.word	0x40021000
 8001750:	08006540 	.word	0x08006540

08001754 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	220f      	movs	r2, #15
 8001762:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001764:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <HAL_RCC_GetClockConfig+0x58>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0203 	and.w	r2, r3, #3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001770:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <HAL_RCC_GetClockConfig+0x58>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800177c:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <HAL_RCC_GetClockConfig+0x58>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <HAL_RCC_GetClockConfig+0x58>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	08db      	lsrs	r3, r3, #3
 800178e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001796:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0207 	and.w	r2, r3, #7
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40022000 	.word	0x40022000

080017b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017bc:	4b0a      	ldr	r3, [pc, #40]	@ (80017e8 <RCC_Delay+0x34>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <RCC_Delay+0x38>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	0a5b      	lsrs	r3, r3, #9
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
 80017ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017d0:	bf00      	nop
  }
  while (Delay --);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1e5a      	subs	r2, r3, #1
 80017d6:	60fa      	str	r2, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f9      	bne.n	80017d0 <RCC_Delay+0x1c>
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	20000000 	.word	0x20000000
 80017ec:	10624dd3 	.word	0x10624dd3

080017f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e041      	b.n	8001886 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d106      	bne.n	800181c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f839 	bl	800188e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2202      	movs	r2, #2
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3304      	adds	r3, #4
 800182c:	4619      	mov	r1, r3
 800182e:	4610      	mov	r0, r2
 8001830:	f000 f99c 	bl	8001b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d001      	beq.n	80018b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e03a      	b.n	800192e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2202      	movs	r2, #2
 80018bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0201 	orr.w	r2, r2, #1
 80018ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a18      	ldr	r2, [pc, #96]	@ (8001938 <HAL_TIM_Base_Start_IT+0x98>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d00e      	beq.n	80018f8 <HAL_TIM_Base_Start_IT+0x58>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018e2:	d009      	beq.n	80018f8 <HAL_TIM_Base_Start_IT+0x58>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a14      	ldr	r2, [pc, #80]	@ (800193c <HAL_TIM_Base_Start_IT+0x9c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d004      	beq.n	80018f8 <HAL_TIM_Base_Start_IT+0x58>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a13      	ldr	r2, [pc, #76]	@ (8001940 <HAL_TIM_Base_Start_IT+0xa0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d111      	bne.n	800191c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b06      	cmp	r3, #6
 8001908:	d010      	beq.n	800192c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f042 0201 	orr.w	r2, r2, #1
 8001918:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800191a:	e007      	b.n	800192c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	40012c00 	.word	0x40012c00
 800193c:	40000400 	.word	0x40000400
 8001940:	40000800 	.word	0x40000800

08001944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d020      	beq.n	80019a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d01b      	beq.n	80019a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f06f 0202 	mvn.w	r2, #2
 8001978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f8d1 	bl	8001b36 <HAL_TIM_IC_CaptureCallback>
 8001994:	e005      	b.n	80019a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f8c4 	bl	8001b24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f8d3 	bl	8001b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d020      	beq.n	80019f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d01b      	beq.n	80019f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f06f 0204 	mvn.w	r2, #4
 80019c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2202      	movs	r2, #2
 80019ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f8ab 	bl	8001b36 <HAL_TIM_IC_CaptureCallback>
 80019e0:	e005      	b.n	80019ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f89e 	bl	8001b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f8ad 	bl	8001b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d020      	beq.n	8001a40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d01b      	beq.n	8001a40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f06f 0208 	mvn.w	r2, #8
 8001a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2204      	movs	r2, #4
 8001a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f885 	bl	8001b36 <HAL_TIM_IC_CaptureCallback>
 8001a2c:	e005      	b.n	8001a3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f878 	bl	8001b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f887 	bl	8001b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	f003 0310 	and.w	r3, r3, #16
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d020      	beq.n	8001a8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d01b      	beq.n	8001a8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f06f 0210 	mvn.w	r2, #16
 8001a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2208      	movs	r2, #8
 8001a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f85f 	bl	8001b36 <HAL_TIM_IC_CaptureCallback>
 8001a78:	e005      	b.n	8001a86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f852 	bl	8001b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f861 	bl	8001b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00c      	beq.n	8001ab0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d007      	beq.n	8001ab0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0201 	mvn.w	r2, #1
 8001aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7fe fdc8 	bl	8000640 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00c      	beq.n	8001ad4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d007      	beq.n	8001ad4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f8c3 	bl	8001c5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00c      	beq.n	8001af8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d007      	beq.n	8001af8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f831 	bl	8001b5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	f003 0320 	and.w	r3, r3, #32
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00c      	beq.n	8001b1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f003 0320 	and.w	r3, r3, #32
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d007      	beq.n	8001b1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f06f 0220 	mvn.w	r2, #32
 8001b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f896 	bl	8001c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c3c <TIM_Base_SetConfig+0xd0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00b      	beq.n	8001b9c <TIM_Base_SetConfig+0x30>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b8a:	d007      	beq.n	8001b9c <TIM_Base_SetConfig+0x30>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a2c      	ldr	r2, [pc, #176]	@ (8001c40 <TIM_Base_SetConfig+0xd4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d003      	beq.n	8001b9c <TIM_Base_SetConfig+0x30>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a2b      	ldr	r2, [pc, #172]	@ (8001c44 <TIM_Base_SetConfig+0xd8>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d108      	bne.n	8001bae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a22      	ldr	r2, [pc, #136]	@ (8001c3c <TIM_Base_SetConfig+0xd0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00b      	beq.n	8001bce <TIM_Base_SetConfig+0x62>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bbc:	d007      	beq.n	8001bce <TIM_Base_SetConfig+0x62>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8001c40 <TIM_Base_SetConfig+0xd4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d003      	beq.n	8001bce <TIM_Base_SetConfig+0x62>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a1e      	ldr	r2, [pc, #120]	@ (8001c44 <TIM_Base_SetConfig+0xd8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d108      	bne.n	8001be0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a0d      	ldr	r2, [pc, #52]	@ (8001c3c <TIM_Base_SetConfig+0xd0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d103      	bne.n	8001c14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	f023 0201 	bic.w	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	611a      	str	r2, [r3, #16]
  }
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	40012c00 	.word	0x40012c00
 8001c40:	40000400 	.word	0x40000400
 8001c44:	40000800 	.word	0x40000800

08001c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e042      	b.n	8001d04 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d106      	bne.n	8001c98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7fe fe34 	bl	8000900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2224      	movs	r2, #36	@ 0x24
 8001c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f971 	bl	8001f98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001cc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001cd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ce4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	@ 0x28
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b20      	cmp	r3, #32
 8001d2a:	d175      	bne.n	8001e18 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <HAL_UART_Transmit+0x2c>
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e06e      	b.n	8001e1a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2221      	movs	r2, #33	@ 0x21
 8001d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d4a:	f7fe fe73 	bl	8000a34 <HAL_GetTick>
 8001d4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	88fa      	ldrh	r2, [r7, #6]
 8001d54:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	88fa      	ldrh	r2, [r7, #6]
 8001d5a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d64:	d108      	bne.n	8001d78 <HAL_UART_Transmit+0x6c>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d104      	bne.n	8001d78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	e003      	b.n	8001d80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d80:	e02e      	b.n	8001de0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2180      	movs	r1, #128	@ 0x80
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f848 	bl	8001e22 <UART_WaitOnFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e03a      	b.n	8001e1a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10b      	bne.n	8001dc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001db8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	e007      	b.n	8001dd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1cb      	bne.n	8001d82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2200      	movs	r2, #0
 8001df2:	2140      	movs	r1, #64	@ 0x40
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 f814 	bl	8001e22 <UART_WaitOnFlagUntilTimeout>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e006      	b.n	8001e1a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	e000      	b.n	8001e1a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001e18:	2302      	movs	r3, #2
  }
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3720      	adds	r7, #32
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e32:	e03b      	b.n	8001eac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3a:	d037      	beq.n	8001eac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e3c:	f7fe fdfa 	bl	8000a34 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	6a3a      	ldr	r2, [r7, #32]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d302      	bcc.n	8001e52 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e03a      	b.n	8001ecc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d023      	beq.n	8001eac <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b80      	cmp	r3, #128	@ 0x80
 8001e68:	d020      	beq.n	8001eac <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b40      	cmp	r3, #64	@ 0x40
 8001e6e:	d01d      	beq.n	8001eac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d116      	bne.n	8001eac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 f81d 	bl	8001ed4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e00f      	b.n	8001ecc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d0b4      	beq.n	8001e34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b095      	sub	sp, #84	@ 0x54
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	330c      	adds	r3, #12
 8001ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee6:	e853 3f00 	ldrex	r3, [r3]
 8001eea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	330c      	adds	r3, #12
 8001efa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001efc:	643a      	str	r2, [r7, #64]	@ 0x40
 8001efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001f02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f04:	e841 2300 	strex	r3, r2, [r1]
 8001f08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1e5      	bne.n	8001edc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	3314      	adds	r3, #20
 8001f16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	e853 3f00 	ldrex	r3, [r3]
 8001f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3314      	adds	r3, #20
 8001f2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f38:	e841 2300 	strex	r3, r2, [r1]
 8001f3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1e5      	bne.n	8001f10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d119      	bne.n	8001f80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	330c      	adds	r3, #12
 8001f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	e853 3f00 	ldrex	r3, [r3]
 8001f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f023 0310 	bic.w	r3, r3, #16
 8001f62:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	330c      	adds	r3, #12
 8001f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001f6c:	61ba      	str	r2, [r7, #24]
 8001f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f70:	6979      	ldr	r1, [r7, #20]
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	e841 2300 	strex	r3, r2, [r1]
 8001f78:	613b      	str	r3, [r7, #16]
   return(result);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1e5      	bne.n	8001f4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001f8e:	bf00      	nop
 8001f90:	3754      	adds	r7, #84	@ 0x54
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001fd2:	f023 030c 	bic.w	r3, r3, #12
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	68b9      	ldr	r1, [r7, #8]
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80020ac <UART_SetConfig+0x114>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d103      	bne.n	8002008 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002000:	f7ff fb94 	bl	800172c <HAL_RCC_GetPCLK2Freq>
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	e002      	b.n	800200e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002008:	f7ff fb7c 	bl	8001704 <HAL_RCC_GetPCLK1Freq>
 800200c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	009a      	lsls	r2, r3, #2
 8002018:	441a      	add	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	fbb2 f3f3 	udiv	r3, r2, r3
 8002024:	4a22      	ldr	r2, [pc, #136]	@ (80020b0 <UART_SetConfig+0x118>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	0119      	lsls	r1, r3, #4
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	009a      	lsls	r2, r3, #2
 8002038:	441a      	add	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	fbb2 f2f3 	udiv	r2, r2, r3
 8002044:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <UART_SetConfig+0x118>)
 8002046:	fba3 0302 	umull	r0, r3, r3, r2
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	2064      	movs	r0, #100	@ 0x64
 800204e:	fb00 f303 	mul.w	r3, r0, r3
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	3332      	adds	r3, #50	@ 0x32
 8002058:	4a15      	ldr	r2, [pc, #84]	@ (80020b0 <UART_SetConfig+0x118>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002064:	4419      	add	r1, r3
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	009a      	lsls	r2, r3, #2
 8002070:	441a      	add	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	fbb2 f2f3 	udiv	r2, r2, r3
 800207c:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <UART_SetConfig+0x118>)
 800207e:	fba3 0302 	umull	r0, r3, r3, r2
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	2064      	movs	r0, #100	@ 0x64
 8002086:	fb00 f303 	mul.w	r3, r0, r3
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	3332      	adds	r3, #50	@ 0x32
 8002090:	4a07      	ldr	r2, [pc, #28]	@ (80020b0 <UART_SetConfig+0x118>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	f003 020f 	and.w	r2, r3, #15
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	440a      	add	r2, r1
 80020a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80020a4:	bf00      	nop
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40013800 	.word	0x40013800
 80020b0:	51eb851f 	.word	0x51eb851f

080020b4 <__NVIC_SetPriority>:
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	6039      	str	r1, [r7, #0]
 80020be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	db0a      	blt.n	80020de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	490c      	ldr	r1, [pc, #48]	@ (8002100 <__NVIC_SetPriority+0x4c>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	440b      	add	r3, r1
 80020d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80020dc:	e00a      	b.n	80020f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4908      	ldr	r1, [pc, #32]	@ (8002104 <__NVIC_SetPriority+0x50>)
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	3b04      	subs	r3, #4
 80020ec:	0112      	lsls	r2, r2, #4
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	440b      	add	r3, r1
 80020f2:	761a      	strb	r2, [r3, #24]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000e100 	.word	0xe000e100
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800210c:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <SysTick_Handler+0x1c>)
 800210e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002110:	f002 f9b0 	bl	8004474 <xTaskGetSchedulerState>
 8002114:	4603      	mov	r3, r0
 8002116:	2b01      	cmp	r3, #1
 8002118:	d001      	beq.n	800211e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800211a:	f003 f965 	bl	80053e8 <xPortSysTickHandler>
  }
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000e010 	.word	0xe000e010

08002128 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800212c:	2100      	movs	r1, #0
 800212e:	f06f 0004 	mvn.w	r0, #4
 8002132:	f7ff ffbf 	bl	80020b4 <__NVIC_SetPriority>
#endif
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002142:	f3ef 8305 	mrs	r3, IPSR
 8002146:	603b      	str	r3, [r7, #0]
  return(result);
 8002148:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800214e:	f06f 0305 	mvn.w	r3, #5
 8002152:	607b      	str	r3, [r7, #4]
 8002154:	e00c      	b.n	8002170 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002156:	4b09      	ldr	r3, [pc, #36]	@ (800217c <osKernelInitialize+0x40>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d105      	bne.n	800216a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800215e:	4b07      	ldr	r3, [pc, #28]	@ (800217c <osKernelInitialize+0x40>)
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002164:	2300      	movs	r3, #0
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	e002      	b.n	8002170 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002170:	687b      	ldr	r3, [r7, #4]
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr
 800217c:	20000128 	.word	0x20000128

08002180 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002186:	f3ef 8305 	mrs	r3, IPSR
 800218a:	603b      	str	r3, [r7, #0]
  return(result);
 800218c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002192:	f06f 0305 	mvn.w	r3, #5
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	e010      	b.n	80021bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800219a:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <osKernelStart+0x48>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d109      	bne.n	80021b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80021a2:	f7ff ffc1 	bl	8002128 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80021a6:	4b08      	ldr	r3, [pc, #32]	@ (80021c8 <osKernelStart+0x48>)
 80021a8:	2202      	movs	r2, #2
 80021aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80021ac:	f001 fcf0 	bl	8003b90 <vTaskStartScheduler>
      stat = osOK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	e002      	b.n	80021bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80021bc:	687b      	ldr	r3, [r7, #4]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000128 	.word	0x20000128

080021cc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021d2:	f3ef 8305 	mrs	r3, IPSR
 80021d6:	603b      	str	r3, [r7, #0]
  return(result);
 80021d8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80021de:	f001 fe01 	bl	8003de4 <xTaskGetTickCountFromISR>
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	e002      	b.n	80021ec <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80021e6:	f001 fdef 	bl	8003dc8 <xTaskGetTickCount>
 80021ea:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80021ec:	687b      	ldr	r3, [r7, #4]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b08e      	sub	sp, #56	@ 0x38
 80021fa:	af04      	add	r7, sp, #16
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002206:	f3ef 8305 	mrs	r3, IPSR
 800220a:	617b      	str	r3, [r7, #20]
  return(result);
 800220c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800220e:	2b00      	cmp	r3, #0
 8002210:	d17e      	bne.n	8002310 <osThreadNew+0x11a>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d07b      	beq.n	8002310 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002218:	2380      	movs	r3, #128	@ 0x80
 800221a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800221c:	2318      	movs	r3, #24
 800221e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002220:	2300      	movs	r3, #0
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
 8002228:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d045      	beq.n	80022bc <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <osThreadNew+0x48>
        name = attr->name;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d008      	beq.n	8002264 <osThreadNew+0x6e>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	2b38      	cmp	r3, #56	@ 0x38
 8002256:	d805      	bhi.n	8002264 <osThreadNew+0x6e>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <osThreadNew+0x72>
        return (NULL);
 8002264:	2300      	movs	r3, #0
 8002266:	e054      	b.n	8002312 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00e      	beq.n	800229e <osThreadNew+0xa8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2ba7      	cmp	r3, #167	@ 0xa7
 8002286:	d90a      	bls.n	800229e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800228c:	2b00      	cmp	r3, #0
 800228e:	d006      	beq.n	800229e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <osThreadNew+0xa8>
        mem = 1;
 8002298:	2301      	movs	r3, #1
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	e010      	b.n	80022c0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10c      	bne.n	80022c0 <osThreadNew+0xca>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d108      	bne.n	80022c0 <osThreadNew+0xca>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d104      	bne.n	80022c0 <osThreadNew+0xca>
          mem = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	e001      	b.n	80022c0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d110      	bne.n	80022e8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80022ce:	9202      	str	r2, [sp, #8]
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	6a3a      	ldr	r2, [r7, #32]
 80022da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f001 fa63 	bl	80037a8 <xTaskCreateStatic>
 80022e2:	4603      	mov	r3, r0
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	e013      	b.n	8002310 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d110      	bne.n	8002310 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	f107 0310 	add.w	r3, r7, #16
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f001 fab1 	bl	8003868 <xTaskCreate>
 8002306:	4603      	mov	r3, r0
 8002308:	2b01      	cmp	r3, #1
 800230a:	d001      	beq.n	8002310 <osThreadNew+0x11a>
            hTask = NULL;
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002310:	693b      	ldr	r3, [r7, #16]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3728      	adds	r7, #40	@ 0x28
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002322:	f3ef 8305 	mrs	r3, IPSR
 8002326:	60bb      	str	r3, [r7, #8]
  return(result);
 8002328:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <osDelay+0x1c>
    stat = osErrorISR;
 800232e:	f06f 0305 	mvn.w	r3, #5
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e007      	b.n	8002346 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f001 fbef 	bl	8003b24 <vTaskDelay>
    }
  }

  return (stat);
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	@ 0x28
 8002354:	af02      	add	r7, sp, #8
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800235c:	2300      	movs	r3, #0
 800235e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002360:	f3ef 8305 	mrs	r3, IPSR
 8002364:	613b      	str	r3, [r7, #16]
  return(result);
 8002366:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002368:	2b00      	cmp	r3, #0
 800236a:	d175      	bne.n	8002458 <osSemaphoreNew+0x108>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d072      	beq.n	8002458 <osSemaphoreNew+0x108>
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	429a      	cmp	r2, r3
 8002378:	d86e      	bhi.n	8002458 <osSemaphoreNew+0x108>
    mem = -1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d015      	beq.n	80023b2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d006      	beq.n	800239c <osSemaphoreNew+0x4c>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b4f      	cmp	r3, #79	@ 0x4f
 8002394:	d902      	bls.n	800239c <osSemaphoreNew+0x4c>
        mem = 1;
 8002396:	2301      	movs	r3, #1
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	e00c      	b.n	80023b6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d108      	bne.n	80023b6 <osSemaphoreNew+0x66>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d104      	bne.n	80023b6 <osSemaphoreNew+0x66>
          mem = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61bb      	str	r3, [r7, #24]
 80023b0:	e001      	b.n	80023b6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d04c      	beq.n	8002458 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d128      	bne.n	8002416 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d10a      	bne.n	80023e0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2203      	movs	r2, #3
 80023d0:	9200      	str	r2, [sp, #0]
 80023d2:	2200      	movs	r2, #0
 80023d4:	2100      	movs	r1, #0
 80023d6:	2001      	movs	r0, #1
 80023d8:	f000 fa26 	bl	8002828 <xQueueGenericCreateStatic>
 80023dc:	61f8      	str	r0, [r7, #28]
 80023de:	e005      	b.n	80023ec <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80023e0:	2203      	movs	r2, #3
 80023e2:	2100      	movs	r1, #0
 80023e4:	2001      	movs	r0, #1
 80023e6:	f000 fa9c 	bl	8002922 <xQueueGenericCreate>
 80023ea:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d022      	beq.n	8002438 <osSemaphoreNew+0xe8>
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01f      	beq.n	8002438 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80023f8:	2300      	movs	r3, #0
 80023fa:	2200      	movs	r2, #0
 80023fc:	2100      	movs	r1, #0
 80023fe:	69f8      	ldr	r0, [r7, #28]
 8002400:	f000 fb5c 	bl	8002abc <xQueueGenericSend>
 8002404:	4603      	mov	r3, r0
 8002406:	2b01      	cmp	r3, #1
 8002408:	d016      	beq.n	8002438 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800240a:	69f8      	ldr	r0, [r7, #28]
 800240c:	f000 fffa 	bl	8003404 <vQueueDelete>
            hSemaphore = NULL;
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
 8002414:	e010      	b.n	8002438 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d108      	bne.n	800242e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	461a      	mov	r2, r3
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 fada 	bl	80029de <xQueueCreateCountingSemaphoreStatic>
 800242a:	61f8      	str	r0, [r7, #28]
 800242c:	e004      	b.n	8002438 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fb0d 	bl	8002a50 <xQueueCreateCountingSemaphore>
 8002436:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00c      	beq.n	8002458 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <osSemaphoreNew+0xfc>
          name = attr->name;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	e001      	b.n	8002450 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002450:	6979      	ldr	r1, [r7, #20]
 8002452:	69f8      	ldr	r0, [r7, #28]
 8002454:	f001 f922 	bl	800369c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002458:	69fb      	ldr	r3, [r7, #28]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d103      	bne.n	8002484 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800247c:	f06f 0303 	mvn.w	r3, #3
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	e039      	b.n	80024f8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002484:	f3ef 8305 	mrs	r3, IPSR
 8002488:	60fb      	str	r3, [r7, #12]
  return(result);
 800248a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800248c:	2b00      	cmp	r3, #0
 800248e:	d022      	beq.n	80024d6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8002496:	f06f 0303 	mvn.w	r3, #3
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	e02c      	b.n	80024f8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80024a2:	f107 0308 	add.w	r3, r7, #8
 80024a6:	461a      	mov	r2, r3
 80024a8:	2100      	movs	r1, #0
 80024aa:	6938      	ldr	r0, [r7, #16]
 80024ac:	f000 ff28 	bl	8003300 <xQueueReceiveFromISR>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d003      	beq.n	80024be <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80024b6:	f06f 0302 	mvn.w	r3, #2
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	e01c      	b.n	80024f8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d019      	beq.n	80024f8 <osSemaphoreAcquire+0x94>
 80024c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002504 <osSemaphoreAcquire+0xa0>)
 80024c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	f3bf 8f6f 	isb	sy
 80024d4:	e010      	b.n	80024f8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80024d6:	6839      	ldr	r1, [r7, #0]
 80024d8:	6938      	ldr	r0, [r7, #16]
 80024da:	f000 fe01 	bl	80030e0 <xQueueSemaphoreTake>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d009      	beq.n	80024f8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80024ea:	f06f 0301 	mvn.w	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	e002      	b.n	80024f8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80024f2:	f06f 0302 	mvn.w	r3, #2
 80024f6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80024f8:	697b      	ldr	r3, [r7, #20]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	e000ed04 	.word	0xe000ed04

08002508 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d103      	bne.n	8002526 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800251e:	f06f 0303 	mvn.w	r3, #3
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	e02c      	b.n	8002580 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002526:	f3ef 8305 	mrs	r3, IPSR
 800252a:	60fb      	str	r3, [r7, #12]
  return(result);
 800252c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800252e:	2b00      	cmp	r3, #0
 8002530:	d01a      	beq.n	8002568 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002536:	f107 0308 	add.w	r3, r7, #8
 800253a:	4619      	mov	r1, r3
 800253c:	6938      	ldr	r0, [r7, #16]
 800253e:	f000 fc5d 	bl	8002dfc <xQueueGiveFromISR>
 8002542:	4603      	mov	r3, r0
 8002544:	2b01      	cmp	r3, #1
 8002546:	d003      	beq.n	8002550 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002548:	f06f 0302 	mvn.w	r3, #2
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	e017      	b.n	8002580 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d014      	beq.n	8002580 <osSemaphoreRelease+0x78>
 8002556:	4b0d      	ldr	r3, [pc, #52]	@ (800258c <osSemaphoreRelease+0x84>)
 8002558:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	f3bf 8f4f 	dsb	sy
 8002562:	f3bf 8f6f 	isb	sy
 8002566:	e00b      	b.n	8002580 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002568:	2300      	movs	r3, #0
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	6938      	ldr	r0, [r7, #16]
 8002570:	f000 faa4 	bl	8002abc <xQueueGenericSend>
 8002574:	4603      	mov	r3, r0
 8002576:	2b01      	cmp	r3, #1
 8002578:	d002      	beq.n	8002580 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800257a:	f06f 0302 	mvn.w	r3, #2
 800257e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002580:	697b      	ldr	r3, [r7, #20]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	e000ed04 	.word	0xe000ed04

08002590 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4a06      	ldr	r2, [pc, #24]	@ (80025b8 <vApplicationGetIdleTaskMemory+0x28>)
 80025a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	4a05      	ldr	r2, [pc, #20]	@ (80025bc <vApplicationGetIdleTaskMemory+0x2c>)
 80025a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2280      	movs	r2, #128	@ 0x80
 80025ac:	601a      	str	r2, [r3, #0]
}
 80025ae:	bf00      	nop
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr
 80025b8:	2000012c 	.word	0x2000012c
 80025bc:	200001d4 	.word	0x200001d4

080025c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a07      	ldr	r2, [pc, #28]	@ (80025ec <vApplicationGetTimerTaskMemory+0x2c>)
 80025d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	4a06      	ldr	r2, [pc, #24]	@ (80025f0 <vApplicationGetTimerTaskMemory+0x30>)
 80025d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025de:	601a      	str	r2, [r3, #0]
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	200003d4 	.word	0x200003d4
 80025f0:	2000047c 	.word	0x2000047c

080025f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f103 0208 	add.w	r2, r3, #8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f04f 32ff 	mov.w	r2, #4294967295
 800260c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f103 0208 	add.w	r2, r3, #8
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f103 0208 	add.w	r2, r3, #8
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800264a:	b480      	push	{r7}
 800264c:	b085      	sub	sp, #20
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	601a      	str	r2, [r3, #0]
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a6:	d103      	bne.n	80026b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	e00c      	b.n	80026ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3308      	adds	r3, #8
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	e002      	b.n	80026be <vListInsert+0x2e>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d2f6      	bcs.n	80026b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	601a      	str	r2, [r3, #0]
}
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6892      	ldr	r2, [r2, #8]
 8002716:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6852      	ldr	r2, [r2, #4]
 8002720:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	429a      	cmp	r2, r3
 800272a:	d103      	bne.n	8002734 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	1e5a      	subs	r2, r3, #1
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
	...

08002754 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10b      	bne.n	8002780 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800276c:	f383 8811 	msr	BASEPRI, r3
 8002770:	f3bf 8f6f 	isb	sy
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800277a:	bf00      	nop
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002780:	f002 fdb4 	bl	80052ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800278c:	68f9      	ldr	r1, [r7, #12]
 800278e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	441a      	add	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b0:	3b01      	subs	r3, #1
 80027b2:	68f9      	ldr	r1, [r7, #12]
 80027b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	441a      	add	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	22ff      	movs	r2, #255	@ 0xff
 80027c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	22ff      	movs	r2, #255	@ 0xff
 80027cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d114      	bne.n	8002800 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d01a      	beq.n	8002814 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	3310      	adds	r3, #16
 80027e2:	4618      	mov	r0, r3
 80027e4:	f001 fc80 	bl	80040e8 <xTaskRemoveFromEventList>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d012      	beq.n	8002814 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002824 <xQueueGenericReset+0xd0>)
 80027f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	f3bf 8f6f 	isb	sy
 80027fe:	e009      	b.n	8002814 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	3310      	adds	r3, #16
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fef5 	bl	80025f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	3324      	adds	r3, #36	@ 0x24
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fef0 	bl	80025f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002814:	f002 fd9a 	bl	800534c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002818:	2301      	movs	r3, #1
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	e000ed04 	.word	0xe000ed04

08002828 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08e      	sub	sp, #56	@ 0x38
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10b      	bne.n	8002854 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800283c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002840:	f383 8811 	msr	BASEPRI, r3
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800284e:	bf00      	nop
 8002850:	bf00      	nop
 8002852:	e7fd      	b.n	8002850 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10b      	bne.n	8002872 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800285a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800285e:	f383 8811 	msr	BASEPRI, r3
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800286c:	bf00      	nop
 800286e:	bf00      	nop
 8002870:	e7fd      	b.n	800286e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <xQueueGenericCreateStatic+0x56>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <xQueueGenericCreateStatic+0x5a>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <xQueueGenericCreateStatic+0x5c>
 8002882:	2300      	movs	r3, #0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10b      	bne.n	80028a0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800288c:	f383 8811 	msr	BASEPRI, r3
 8002890:	f3bf 8f6f 	isb	sy
 8002894:	f3bf 8f4f 	dsb	sy
 8002898:	623b      	str	r3, [r7, #32]
}
 800289a:	bf00      	nop
 800289c:	bf00      	nop
 800289e:	e7fd      	b.n	800289c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d102      	bne.n	80028ac <xQueueGenericCreateStatic+0x84>
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <xQueueGenericCreateStatic+0x88>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <xQueueGenericCreateStatic+0x8a>
 80028b0:	2300      	movs	r3, #0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10b      	bne.n	80028ce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80028b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ba:	f383 8811 	msr	BASEPRI, r3
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	61fb      	str	r3, [r7, #28]
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	e7fd      	b.n	80028ca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80028ce:	2350      	movs	r3, #80	@ 0x50
 80028d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b50      	cmp	r3, #80	@ 0x50
 80028d6:	d00b      	beq.n	80028f0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80028d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028dc:	f383 8811 	msr	BASEPRI, r3
 80028e0:	f3bf 8f6f 	isb	sy
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	61bb      	str	r3, [r7, #24]
}
 80028ea:	bf00      	nop
 80028ec:	bf00      	nop
 80028ee:	e7fd      	b.n	80028ec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80028f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80028f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00d      	beq.n	8002918 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80028fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002904:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f840 	bl	8002998 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800291a:	4618      	mov	r0, r3
 800291c:	3730      	adds	r7, #48	@ 0x30
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002922:	b580      	push	{r7, lr}
 8002924:	b08a      	sub	sp, #40	@ 0x28
 8002926:	af02      	add	r7, sp, #8
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	4613      	mov	r3, r2
 800292e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10b      	bne.n	800294e <xQueueGenericCreate+0x2c>
	__asm volatile
 8002936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800293a:	f383 8811 	msr	BASEPRI, r3
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	613b      	str	r3, [r7, #16]
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	e7fd      	b.n	800294a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	3350      	adds	r3, #80	@ 0x50
 800295c:	4618      	mov	r0, r3
 800295e:	f002 fdc7 	bl	80054f0 <pvPortMalloc>
 8002962:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d011      	beq.n	800298e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	3350      	adds	r3, #80	@ 0x50
 8002972:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800297c:	79fa      	ldrb	r2, [r7, #7]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	4613      	mov	r3, r2
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	68b9      	ldr	r1, [r7, #8]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f805 	bl	8002998 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800298e:	69bb      	ldr	r3, [r7, #24]
	}
 8002990:	4618      	mov	r0, r3
 8002992:	3720      	adds	r7, #32
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d103      	bne.n	80029b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	e002      	b.n	80029ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029c6:	2101      	movs	r1, #1
 80029c8:	69b8      	ldr	r0, [r7, #24]
 80029ca:	f7ff fec3 	bl	8002754 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	78fa      	ldrb	r2, [r7, #3]
 80029d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80029d6:	bf00      	nop
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b08a      	sub	sp, #40	@ 0x28
 80029e2:	af02      	add	r7, sp, #8
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10b      	bne.n	8002a08 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	61bb      	str	r3, [r7, #24]
}
 8002a02:	bf00      	nop
 8002a04:	bf00      	nop
 8002a06:	e7fd      	b.n	8002a04 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d90b      	bls.n	8002a28 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	617b      	str	r3, [r7, #20]
}
 8002a22:	bf00      	nop
 8002a24:	bf00      	nop
 8002a26:	e7fd      	b.n	8002a24 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002a28:	2302      	movs	r3, #2
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2100      	movs	r1, #0
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f7ff fef8 	bl	8002828 <xQueueGenericCreateStatic>
 8002a38:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002a46:	69fb      	ldr	r3, [r7, #28]
	}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10b      	bne.n	8002a78 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8002a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	613b      	str	r3, [r7, #16]
}
 8002a72:	bf00      	nop
 8002a74:	bf00      	nop
 8002a76:	e7fd      	b.n	8002a74 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d90b      	bls.n	8002a98 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8002a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	60fb      	str	r3, [r7, #12]
}
 8002a92:	bf00      	nop
 8002a94:	bf00      	nop
 8002a96:	e7fd      	b.n	8002a94 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002a98:	2202      	movs	r2, #2
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff ff40 	bl	8002922 <xQueueGenericCreate>
 8002aa2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002ab0:	697b      	ldr	r3, [r7, #20]
	}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08e      	sub	sp, #56	@ 0x38
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002aca:	2300      	movs	r3, #0
 8002acc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10b      	bne.n	8002af0 <xQueueGenericSend+0x34>
	__asm volatile
 8002ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002aea:	bf00      	nop
 8002aec:	bf00      	nop
 8002aee:	e7fd      	b.n	8002aec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d103      	bne.n	8002afe <xQueueGenericSend+0x42>
 8002af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <xQueueGenericSend+0x46>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <xQueueGenericSend+0x48>
 8002b02:	2300      	movs	r3, #0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10b      	bne.n	8002b20 <xQueueGenericSend+0x64>
	__asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b1a:	bf00      	nop
 8002b1c:	bf00      	nop
 8002b1e:	e7fd      	b.n	8002b1c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d103      	bne.n	8002b2e <xQueueGenericSend+0x72>
 8002b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <xQueueGenericSend+0x76>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <xQueueGenericSend+0x78>
 8002b32:	2300      	movs	r3, #0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10b      	bne.n	8002b50 <xQueueGenericSend+0x94>
	__asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	623b      	str	r3, [r7, #32]
}
 8002b4a:	bf00      	nop
 8002b4c:	bf00      	nop
 8002b4e:	e7fd      	b.n	8002b4c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b50:	f001 fc90 	bl	8004474 <xTaskGetSchedulerState>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <xQueueGenericSend+0xa4>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <xQueueGenericSend+0xa8>
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <xQueueGenericSend+0xaa>
 8002b64:	2300      	movs	r3, #0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10b      	bne.n	8002b82 <xQueueGenericSend+0xc6>
	__asm volatile
 8002b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b6e:	f383 8811 	msr	BASEPRI, r3
 8002b72:	f3bf 8f6f 	isb	sy
 8002b76:	f3bf 8f4f 	dsb	sy
 8002b7a:	61fb      	str	r3, [r7, #28]
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	e7fd      	b.n	8002b7e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b82:	f002 fbb3 	bl	80052ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d302      	bcc.n	8002b98 <xQueueGenericSend+0xdc>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d129      	bne.n	8002bec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b9e:	f000 fc6c 	bl	800347a <prvCopyDataToQueue>
 8002ba2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d010      	beq.n	8002bce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bae:	3324      	adds	r3, #36	@ 0x24
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f001 fa99 	bl	80040e8 <xTaskRemoveFromEventList>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d013      	beq.n	8002be4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8002cbc <xQueueGenericSend+0x200>)
 8002bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	e00a      	b.n	8002be4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002bd4:	4b39      	ldr	r3, [pc, #228]	@ (8002cbc <xQueueGenericSend+0x200>)
 8002bd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	f3bf 8f4f 	dsb	sy
 8002be0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002be4:	f002 fbb2 	bl	800534c <vPortExitCritical>
				return pdPASS;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e063      	b.n	8002cb4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d103      	bne.n	8002bfa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bf2:	f002 fbab 	bl	800534c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e05c      	b.n	8002cb4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d106      	bne.n	8002c0e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c00:	f107 0314 	add.w	r3, r7, #20
 8002c04:	4618      	mov	r0, r3
 8002c06:	f001 fad3 	bl	80041b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c0e:	f002 fb9d 	bl	800534c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c12:	f001 f82d 	bl	8003c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c16:	f002 fb69 	bl	80052ec <vPortEnterCritical>
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c20:	b25b      	sxtb	r3, r3
 8002c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c26:	d103      	bne.n	8002c30 <xQueueGenericSend+0x174>
 8002c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c36:	b25b      	sxtb	r3, r3
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d103      	bne.n	8002c46 <xQueueGenericSend+0x18a>
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c46:	f002 fb81 	bl	800534c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c4a:	1d3a      	adds	r2, r7, #4
 8002c4c:	f107 0314 	add.w	r3, r7, #20
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 fac2 	bl	80041dc <xTaskCheckForTimeOut>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d124      	bne.n	8002ca8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c60:	f000 fd03 	bl	800366a <prvIsQueueFull>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d018      	beq.n	8002c9c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6c:	3310      	adds	r3, #16
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	4611      	mov	r1, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f001 f9e6 	bl	8004044 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c7a:	f000 fc8e 	bl	800359a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c7e:	f001 f805 	bl	8003c8c <xTaskResumeAll>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f47f af7c 	bne.w	8002b82 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002cbc <xQueueGenericSend+0x200>)
 8002c8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	e772      	b.n	8002b82 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c9e:	f000 fc7c 	bl	800359a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ca2:	f000 fff3 	bl	8003c8c <xTaskResumeAll>
 8002ca6:	e76c      	b.n	8002b82 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ca8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002caa:	f000 fc76 	bl	800359a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cae:	f000 ffed 	bl	8003c8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3738      	adds	r7, #56	@ 0x38
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	e000ed04 	.word	0xe000ed04

08002cc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b090      	sub	sp, #64	@ 0x40
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10b      	bne.n	8002cf0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cdc:	f383 8811 	msr	BASEPRI, r3
 8002ce0:	f3bf 8f6f 	isb	sy
 8002ce4:	f3bf 8f4f 	dsb	sy
 8002ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002cea:	bf00      	nop
 8002cec:	bf00      	nop
 8002cee:	e7fd      	b.n	8002cec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d103      	bne.n	8002cfe <xQueueGenericSendFromISR+0x3e>
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <xQueueGenericSendFromISR+0x42>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <xQueueGenericSendFromISR+0x44>
 8002d02:	2300      	movs	r3, #0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10b      	bne.n	8002d20 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d1a:	bf00      	nop
 8002d1c:	bf00      	nop
 8002d1e:	e7fd      	b.n	8002d1c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d103      	bne.n	8002d2e <xQueueGenericSendFromISR+0x6e>
 8002d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <xQueueGenericSendFromISR+0x72>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <xQueueGenericSendFromISR+0x74>
 8002d32:	2300      	movs	r3, #0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10b      	bne.n	8002d50 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3c:	f383 8811 	msr	BASEPRI, r3
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	623b      	str	r3, [r7, #32]
}
 8002d4a:	bf00      	nop
 8002d4c:	bf00      	nop
 8002d4e:	e7fd      	b.n	8002d4c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d50:	f002 fb8e 	bl	8005470 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d54:	f3ef 8211 	mrs	r2, BASEPRI
 8002d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	61fa      	str	r2, [r7, #28]
 8002d6a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d6e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d302      	bcc.n	8002d82 <xQueueGenericSendFromISR+0xc2>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d12f      	bne.n	8002de2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002d98:	f000 fb6f 	bl	800347a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d9c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d112      	bne.n	8002dcc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d016      	beq.n	8002ddc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db0:	3324      	adds	r3, #36	@ 0x24
 8002db2:	4618      	mov	r0, r3
 8002db4:	f001 f998 	bl	80040e8 <xTaskRemoveFromEventList>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00e      	beq.n	8002ddc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00b      	beq.n	8002ddc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	e007      	b.n	8002ddc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002dcc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	b25a      	sxtb	r2, r3
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002de0:	e001      	b.n	8002de6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002df0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3740      	adds	r7, #64	@ 0x40
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08e      	sub	sp, #56	@ 0x38
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10b      	bne.n	8002e28 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	623b      	str	r3, [r7, #32]
}
 8002e22:	bf00      	nop
 8002e24:	bf00      	nop
 8002e26:	e7fd      	b.n	8002e24 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00b      	beq.n	8002e48 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	61fb      	str	r3, [r7, #28]
}
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d103      	bne.n	8002e58 <xQueueGiveFromISR+0x5c>
 8002e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <xQueueGiveFromISR+0x60>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <xQueueGiveFromISR+0x62>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10b      	bne.n	8002e7a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8002e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	61bb      	str	r3, [r7, #24]
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop
 8002e78:	e7fd      	b.n	8002e76 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e7a:	f002 faf9 	bl	8005470 <vPortValidateInterruptPriority>
	__asm volatile
 8002e7e:	f3ef 8211 	mrs	r2, BASEPRI
 8002e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e86:	f383 8811 	msr	BASEPRI, r3
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	617a      	str	r2, [r7, #20]
 8002e94:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002e96:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d22b      	bcs.n	8002f02 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002eb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ebc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d112      	bne.n	8002eec <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d016      	beq.n	8002efc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed0:	3324      	adds	r3, #36	@ 0x24
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f001 f908 	bl	80040e8 <xTaskRemoveFromEventList>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00e      	beq.n	8002efc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00b      	beq.n	8002efc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e007      	b.n	8002efc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002eec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	b25a      	sxtb	r2, r3
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002efc:	2301      	movs	r3, #1
 8002efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f00:	e001      	b.n	8002f06 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f08:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f383 8811 	msr	BASEPRI, r3
}
 8002f10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3738      	adds	r7, #56	@ 0x38
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08c      	sub	sp, #48	@ 0x30
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10b      	bne.n	8002f4e <xQueueReceive+0x32>
	__asm volatile
 8002f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	623b      	str	r3, [r7, #32]
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	e7fd      	b.n	8002f4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d103      	bne.n	8002f5c <xQueueReceive+0x40>
 8002f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <xQueueReceive+0x44>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <xQueueReceive+0x46>
 8002f60:	2300      	movs	r3, #0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10b      	bne.n	8002f7e <xQueueReceive+0x62>
	__asm volatile
 8002f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f6a:	f383 8811 	msr	BASEPRI, r3
 8002f6e:	f3bf 8f6f 	isb	sy
 8002f72:	f3bf 8f4f 	dsb	sy
 8002f76:	61fb      	str	r3, [r7, #28]
}
 8002f78:	bf00      	nop
 8002f7a:	bf00      	nop
 8002f7c:	e7fd      	b.n	8002f7a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f7e:	f001 fa79 	bl	8004474 <xTaskGetSchedulerState>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <xQueueReceive+0x72>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <xQueueReceive+0x76>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <xQueueReceive+0x78>
 8002f92:	2300      	movs	r3, #0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10b      	bne.n	8002fb0 <xQueueReceive+0x94>
	__asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	61bb      	str	r3, [r7, #24]
}
 8002faa:	bf00      	nop
 8002fac:	bf00      	nop
 8002fae:	e7fd      	b.n	8002fac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fb0:	f002 f99c 	bl	80052ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01f      	beq.n	8003000 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fc4:	f000 fac3 	bl	800354e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fca:	1e5a      	subs	r2, r3, #1
 8002fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00f      	beq.n	8002ff8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fda:	3310      	adds	r3, #16
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 f883 	bl	80040e8 <xTaskRemoveFromEventList>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d007      	beq.n	8002ff8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002fe8:	4b3c      	ldr	r3, [pc, #240]	@ (80030dc <xQueueReceive+0x1c0>)
 8002fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	f3bf 8f4f 	dsb	sy
 8002ff4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ff8:	f002 f9a8 	bl	800534c <vPortExitCritical>
				return pdPASS;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e069      	b.n	80030d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d103      	bne.n	800300e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003006:	f002 f9a1 	bl	800534c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800300a:	2300      	movs	r3, #0
 800300c:	e062      	b.n	80030d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800300e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003010:	2b00      	cmp	r3, #0
 8003012:	d106      	bne.n	8003022 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003014:	f107 0310 	add.w	r3, r7, #16
 8003018:	4618      	mov	r0, r3
 800301a:	f001 f8c9 	bl	80041b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800301e:	2301      	movs	r3, #1
 8003020:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003022:	f002 f993 	bl	800534c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003026:	f000 fe23 	bl	8003c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800302a:	f002 f95f 	bl	80052ec <vPortEnterCritical>
 800302e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003030:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003034:	b25b      	sxtb	r3, r3
 8003036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303a:	d103      	bne.n	8003044 <xQueueReceive+0x128>
 800303c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003046:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800304a:	b25b      	sxtb	r3, r3
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d103      	bne.n	800305a <xQueueReceive+0x13e>
 8003052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800305a:	f002 f977 	bl	800534c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800305e:	1d3a      	adds	r2, r7, #4
 8003060:	f107 0310 	add.w	r3, r7, #16
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f001 f8b8 	bl	80041dc <xTaskCheckForTimeOut>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d123      	bne.n	80030ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003072:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003074:	f000 fae3 	bl	800363e <prvIsQueueEmpty>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d017      	beq.n	80030ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800307e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003080:	3324      	adds	r3, #36	@ 0x24
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f000 ffdc 	bl	8004044 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800308c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800308e:	f000 fa84 	bl	800359a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003092:	f000 fdfb 	bl	8003c8c <xTaskResumeAll>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d189      	bne.n	8002fb0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800309c:	4b0f      	ldr	r3, [pc, #60]	@ (80030dc <xQueueReceive+0x1c0>)
 800309e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	e780      	b.n	8002fb0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030b0:	f000 fa73 	bl	800359a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030b4:	f000 fdea 	bl	8003c8c <xTaskResumeAll>
 80030b8:	e77a      	b.n	8002fb0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030bc:	f000 fa6d 	bl	800359a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030c0:	f000 fde4 	bl	8003c8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030c6:	f000 faba 	bl	800363e <prvIsQueueEmpty>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f43f af6f 	beq.w	8002fb0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3730      	adds	r7, #48	@ 0x30
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	e000ed04 	.word	0xe000ed04

080030e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08e      	sub	sp, #56	@ 0x38
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10b      	bne.n	8003114 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80030fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	623b      	str	r3, [r7, #32]
}
 800310e:	bf00      	nop
 8003110:	bf00      	nop
 8003112:	e7fd      	b.n	8003110 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00b      	beq.n	8003134 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800311c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	61fb      	str	r3, [r7, #28]
}
 800312e:	bf00      	nop
 8003130:	bf00      	nop
 8003132:	e7fd      	b.n	8003130 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003134:	f001 f99e 	bl	8004474 <xTaskGetSchedulerState>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d102      	bne.n	8003144 <xQueueSemaphoreTake+0x64>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <xQueueSemaphoreTake+0x68>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <xQueueSemaphoreTake+0x6a>
 8003148:	2300      	movs	r3, #0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10b      	bne.n	8003166 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800314e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003152:	f383 8811 	msr	BASEPRI, r3
 8003156:	f3bf 8f6f 	isb	sy
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	61bb      	str	r3, [r7, #24]
}
 8003160:	bf00      	nop
 8003162:	bf00      	nop
 8003164:	e7fd      	b.n	8003162 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003166:	f002 f8c1 	bl	80052ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800316a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800316c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003172:	2b00      	cmp	r3, #0
 8003174:	d024      	beq.n	80031c0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003178:	1e5a      	subs	r2, r3, #1
 800317a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800317e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d104      	bne.n	8003190 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003186:	f001 faef 	bl	8004768 <pvTaskIncrementMutexHeldCount>
 800318a:	4602      	mov	r2, r0
 800318c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00f      	beq.n	80031b8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800319a:	3310      	adds	r3, #16
 800319c:	4618      	mov	r0, r3
 800319e:	f000 ffa3 	bl	80040e8 <xTaskRemoveFromEventList>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031a8:	4b54      	ldr	r3, [pc, #336]	@ (80032fc <xQueueSemaphoreTake+0x21c>)
 80031aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031b8:	f002 f8c8 	bl	800534c <vPortExitCritical>
				return pdPASS;
 80031bc:	2301      	movs	r3, #1
 80031be:	e098      	b.n	80032f2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d112      	bne.n	80031ec <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80031c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00b      	beq.n	80031e4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80031cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d0:	f383 8811 	msr	BASEPRI, r3
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	617b      	str	r3, [r7, #20]
}
 80031de:	bf00      	nop
 80031e0:	bf00      	nop
 80031e2:	e7fd      	b.n	80031e0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80031e4:	f002 f8b2 	bl	800534c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031e8:	2300      	movs	r3, #0
 80031ea:	e082      	b.n	80032f2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d106      	bne.n	8003200 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031f2:	f107 030c 	add.w	r3, r7, #12
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 ffda 	bl	80041b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031fc:	2301      	movs	r3, #1
 80031fe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003200:	f002 f8a4 	bl	800534c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003204:	f000 fd34 	bl	8003c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003208:	f002 f870 	bl	80052ec <vPortEnterCritical>
 800320c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800320e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003212:	b25b      	sxtb	r3, r3
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d103      	bne.n	8003222 <xQueueSemaphoreTake+0x142>
 800321a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003224:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003228:	b25b      	sxtb	r3, r3
 800322a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322e:	d103      	bne.n	8003238 <xQueueSemaphoreTake+0x158>
 8003230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003238:	f002 f888 	bl	800534c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800323c:	463a      	mov	r2, r7
 800323e:	f107 030c 	add.w	r3, r7, #12
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f000 ffc9 	bl	80041dc <xTaskCheckForTimeOut>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d132      	bne.n	80032b6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003250:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003252:	f000 f9f4 	bl	800363e <prvIsQueueEmpty>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d026      	beq.n	80032aa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800325c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d109      	bne.n	8003278 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003264:	f002 f842 	bl	80052ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4618      	mov	r0, r3
 800326e:	f001 f91f 	bl	80044b0 <xTaskPriorityInherit>
 8003272:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003274:	f002 f86a 	bl	800534c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800327a:	3324      	adds	r3, #36	@ 0x24
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fedf 	bl	8004044 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003286:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003288:	f000 f987 	bl	800359a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800328c:	f000 fcfe 	bl	8003c8c <xTaskResumeAll>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	f47f af67 	bne.w	8003166 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003298:	4b18      	ldr	r3, [pc, #96]	@ (80032fc <xQueueSemaphoreTake+0x21c>)
 800329a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	e75d      	b.n	8003166 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80032aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80032ac:	f000 f975 	bl	800359a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032b0:	f000 fcec 	bl	8003c8c <xTaskResumeAll>
 80032b4:	e757      	b.n	8003166 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80032b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80032b8:	f000 f96f 	bl	800359a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032bc:	f000 fce6 	bl	8003c8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80032c2:	f000 f9bc 	bl	800363e <prvIsQueueEmpty>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f43f af4c 	beq.w	8003166 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80032ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00d      	beq.n	80032f0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80032d4:	f002 f80a 	bl	80052ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80032d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80032da:	f000 f8b7 	bl	800344c <prvGetDisinheritPriorityAfterTimeout>
 80032de:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80032e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032e6:	4618      	mov	r0, r3
 80032e8:	f001 f9ba 	bl	8004660 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80032ec:	f002 f82e 	bl	800534c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3738      	adds	r7, #56	@ 0x38
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	e000ed04 	.word	0xe000ed04

08003300 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08e      	sub	sp, #56	@ 0x38
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10b      	bne.n	800332e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	623b      	str	r3, [r7, #32]
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	e7fd      	b.n	800332a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d103      	bne.n	800333c <xQueueReceiveFromISR+0x3c>
 8003334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <xQueueReceiveFromISR+0x40>
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <xQueueReceiveFromISR+0x42>
 8003340:	2300      	movs	r3, #0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10b      	bne.n	800335e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	61fb      	str	r3, [r7, #28]
}
 8003358:	bf00      	nop
 800335a:	bf00      	nop
 800335c:	e7fd      	b.n	800335a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800335e:	f002 f887 	bl	8005470 <vPortValidateInterruptPriority>
	__asm volatile
 8003362:	f3ef 8211 	mrs	r2, BASEPRI
 8003366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	61ba      	str	r2, [r7, #24]
 8003378:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800337a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800337c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800337e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003382:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003386:	2b00      	cmp	r3, #0
 8003388:	d02f      	beq.n	80033ea <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800338a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003390:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003398:	f000 f8d9 	bl	800354e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800339c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339e:	1e5a      	subs	r2, r3, #1
 80033a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80033a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ac:	d112      	bne.n	80033d4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d016      	beq.n	80033e4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b8:	3310      	adds	r3, #16
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fe94 	bl	80040e8 <xTaskRemoveFromEventList>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00e      	beq.n	80033e4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00b      	beq.n	80033e4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	e007      	b.n	80033e4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80033d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033d8:	3301      	adds	r3, #1
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	b25a      	sxtb	r2, r3
 80033de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80033e4:	2301      	movs	r3, #1
 80033e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80033e8:	e001      	b.n	80033ee <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80033ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f383 8811 	msr	BASEPRI, r3
}
 80033f8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80033fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3738      	adds	r7, #56	@ 0x38
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10b      	bne.n	800342e <vQueueDelete+0x2a>
	__asm volatile
 8003416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341a:	f383 8811 	msr	BASEPRI, r3
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	f3bf 8f4f 	dsb	sy
 8003426:	60bb      	str	r3, [r7, #8]
}
 8003428:	bf00      	nop
 800342a:	bf00      	nop
 800342c:	e7fd      	b.n	800342a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f95c 	bl	80036ec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f002 f924 	bl	800568c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003458:	2b00      	cmp	r3, #0
 800345a:	d006      	beq.n	800346a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	e001      	b.n	800346e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800346e:	68fb      	ldr	r3, [r7, #12]
	}
 8003470:	4618      	mov	r0, r3
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr

0800347a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b086      	sub	sp, #24
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10d      	bne.n	80034b4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d14d      	bne.n	800353c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 f86b 	bl	8004580 <xTaskPriorityDisinherit>
 80034aa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	609a      	str	r2, [r3, #8]
 80034b2:	e043      	b.n	800353c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d119      	bne.n	80034ee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6858      	ldr	r0, [r3, #4]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c2:	461a      	mov	r2, r3
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	f002 fac7 	bl	8005a58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	441a      	add	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d32b      	bcc.n	800353c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	605a      	str	r2, [r3, #4]
 80034ec:	e026      	b.n	800353c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	68d8      	ldr	r0, [r3, #12]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	461a      	mov	r2, r3
 80034f8:	68b9      	ldr	r1, [r7, #8]
 80034fa:	f002 faad 	bl	8005a58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003506:	425b      	negs	r3, r3
 8003508:	441a      	add	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d207      	bcs.n	800352a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003522:	425b      	negs	r3, r3
 8003524:	441a      	add	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d105      	bne.n	800353c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	3b01      	subs	r3, #1
 800353a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003544:	697b      	ldr	r3, [r7, #20]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d018      	beq.n	8003592 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003568:	441a      	add	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	d303      	bcc.n	8003582 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68d9      	ldr	r1, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	461a      	mov	r2, r3
 800358c:	6838      	ldr	r0, [r7, #0]
 800358e:	f002 fa63 	bl	8005a58 <memcpy>
	}
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80035a2:	f001 fea3 	bl	80052ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035ac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035ae:	e011      	b.n	80035d4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d012      	beq.n	80035de <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3324      	adds	r3, #36	@ 0x24
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fd93 	bl	80040e8 <xTaskRemoveFromEventList>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80035c8:	f000 fe6c 	bl	80042a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	dce9      	bgt.n	80035b0 <prvUnlockQueue+0x16>
 80035dc:	e000      	b.n	80035e0 <prvUnlockQueue+0x46>
					break;
 80035de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	22ff      	movs	r2, #255	@ 0xff
 80035e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80035e8:	f001 feb0 	bl	800534c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80035ec:	f001 fe7e 	bl	80052ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035f6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035f8:	e011      	b.n	800361e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d012      	beq.n	8003628 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3310      	adds	r3, #16
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fd6e 	bl	80040e8 <xTaskRemoveFromEventList>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003612:	f000 fe47 	bl	80042a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003616:	7bbb      	ldrb	r3, [r7, #14]
 8003618:	3b01      	subs	r3, #1
 800361a:	b2db      	uxtb	r3, r3
 800361c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800361e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003622:	2b00      	cmp	r3, #0
 8003624:	dce9      	bgt.n	80035fa <prvUnlockQueue+0x60>
 8003626:	e000      	b.n	800362a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003628:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	22ff      	movs	r2, #255	@ 0xff
 800362e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003632:	f001 fe8b 	bl	800534c <vPortExitCritical>
}
 8003636:	bf00      	nop
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003646:	f001 fe51 	bl	80052ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364e:	2b00      	cmp	r3, #0
 8003650:	d102      	bne.n	8003658 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003652:	2301      	movs	r3, #1
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	e001      	b.n	800365c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800365c:	f001 fe76 	bl	800534c <vPortExitCritical>

	return xReturn;
 8003660:	68fb      	ldr	r3, [r7, #12]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003672:	f001 fe3b 	bl	80052ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800367e:	429a      	cmp	r2, r3
 8003680:	d102      	bne.n	8003688 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003682:	2301      	movs	r3, #1
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	e001      	b.n	800368c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800368c:	f001 fe5e 	bl	800534c <vPortExitCritical>

	return xReturn;
 8003690:	68fb      	ldr	r3, [r7, #12]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
	...

0800369c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	e014      	b.n	80036d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80036ac:	4a0e      	ldr	r2, [pc, #56]	@ (80036e8 <vQueueAddToRegistry+0x4c>)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10b      	bne.n	80036d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80036b8:	490b      	ldr	r1, [pc, #44]	@ (80036e8 <vQueueAddToRegistry+0x4c>)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80036c2:	4a09      	ldr	r2, [pc, #36]	@ (80036e8 <vQueueAddToRegistry+0x4c>)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4413      	add	r3, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80036ce:	e006      	b.n	80036de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	3301      	adds	r3, #1
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b07      	cmp	r3, #7
 80036da:	d9e7      	bls.n	80036ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80036dc:	bf00      	nop
 80036de:	bf00      	nop
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr
 80036e8:	2000087c 	.word	0x2000087c

080036ec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	e016      	b.n	8003728 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80036fa:	4a10      	ldr	r2, [pc, #64]	@ (800373c <vQueueUnregisterQueue+0x50>)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	429a      	cmp	r2, r3
 8003708:	d10b      	bne.n	8003722 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800370a:	4a0c      	ldr	r2, [pc, #48]	@ (800373c <vQueueUnregisterQueue+0x50>)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2100      	movs	r1, #0
 8003710:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003714:	4a09      	ldr	r2, [pc, #36]	@ (800373c <vQueueUnregisterQueue+0x50>)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	2200      	movs	r2, #0
 800371e:	605a      	str	r2, [r3, #4]
				break;
 8003720:	e006      	b.n	8003730 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3301      	adds	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b07      	cmp	r3, #7
 800372c:	d9e5      	bls.n	80036fa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800372e:	bf00      	nop
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	2000087c 	.word	0x2000087c

08003740 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003750:	f001 fdcc 	bl	80052ec <vPortEnterCritical>
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800375a:	b25b      	sxtb	r3, r3
 800375c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003760:	d103      	bne.n	800376a <vQueueWaitForMessageRestricted+0x2a>
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003770:	b25b      	sxtb	r3, r3
 8003772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003776:	d103      	bne.n	8003780 <vQueueWaitForMessageRestricted+0x40>
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003780:	f001 fde4 	bl	800534c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003788:	2b00      	cmp	r3, #0
 800378a:	d106      	bne.n	800379a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	3324      	adds	r3, #36	@ 0x24
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fc7b 	bl	8004090 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800379a:	6978      	ldr	r0, [r7, #20]
 800379c:	f7ff fefd 	bl	800359a <prvUnlockQueue>
	}
 80037a0:	bf00      	nop
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08e      	sub	sp, #56	@ 0x38
 80037ac:	af04      	add	r7, sp, #16
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10b      	bne.n	80037d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	623b      	str	r3, [r7, #32]
}
 80037ce:	bf00      	nop
 80037d0:	bf00      	nop
 80037d2:	e7fd      	b.n	80037d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80037d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10b      	bne.n	80037f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80037da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	61fb      	str	r3, [r7, #28]
}
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	e7fd      	b.n	80037ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037f2:	23a8      	movs	r3, #168	@ 0xa8
 80037f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2ba8      	cmp	r3, #168	@ 0xa8
 80037fa:	d00b      	beq.n	8003814 <xTaskCreateStatic+0x6c>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	61bb      	str	r3, [r7, #24]
}
 800380e:	bf00      	nop
 8003810:	bf00      	nop
 8003812:	e7fd      	b.n	8003810 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003814:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003818:	2b00      	cmp	r3, #0
 800381a:	d01e      	beq.n	800385a <xTaskCreateStatic+0xb2>
 800381c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800381e:	2b00      	cmp	r3, #0
 8003820:	d01b      	beq.n	800385a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003824:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800382a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800382c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382e:	2202      	movs	r2, #2
 8003830:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003834:	2300      	movs	r3, #0
 8003836:	9303      	str	r3, [sp, #12]
 8003838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383a:	9302      	str	r3, [sp, #8]
 800383c:	f107 0314 	add.w	r3, r7, #20
 8003840:	9301      	str	r3, [sp, #4]
 8003842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f851 	bl	80038f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003852:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003854:	f000 f8f6 	bl	8003a44 <prvAddNewTaskToReadyList>
 8003858:	e001      	b.n	800385e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800385e:	697b      	ldr	r3, [r7, #20]
	}
 8003860:	4618      	mov	r0, r3
 8003862:	3728      	adds	r7, #40	@ 0x28
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08c      	sub	sp, #48	@ 0x30
 800386c:	af04      	add	r7, sp, #16
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	4613      	mov	r3, r2
 8003876:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4618      	mov	r0, r3
 800387e:	f001 fe37 	bl	80054f0 <pvPortMalloc>
 8003882:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00e      	beq.n	80038a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800388a:	20a8      	movs	r0, #168	@ 0xa8
 800388c:	f001 fe30 	bl	80054f0 <pvPortMalloc>
 8003890:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	631a      	str	r2, [r3, #48]	@ 0x30
 800389e:	e005      	b.n	80038ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038a0:	6978      	ldr	r0, [r7, #20]
 80038a2:	f001 fef3 	bl	800568c <vPortFree>
 80038a6:	e001      	b.n	80038ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d017      	beq.n	80038e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038ba:	88fa      	ldrh	r2, [r7, #6]
 80038bc:	2300      	movs	r3, #0
 80038be:	9303      	str	r3, [sp, #12]
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	9302      	str	r3, [sp, #8]
 80038c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c6:	9301      	str	r3, [sp, #4]
 80038c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	68b9      	ldr	r1, [r7, #8]
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f80f 	bl	80038f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038d6:	69f8      	ldr	r0, [r7, #28]
 80038d8:	f000 f8b4 	bl	8003a44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038dc:	2301      	movs	r3, #1
 80038de:	61bb      	str	r3, [r7, #24]
 80038e0:	e002      	b.n	80038e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038e2:	f04f 33ff 	mov.w	r3, #4294967295
 80038e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038e8:	69bb      	ldr	r3, [r7, #24]
	}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003904:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	461a      	mov	r2, r3
 800390c:	21a5      	movs	r1, #165	@ 0xa5
 800390e:	f002 f811 	bl	8005934 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003914:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800391c:	3b01      	subs	r3, #1
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	f023 0307 	bic.w	r3, r3, #7
 800392a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00b      	beq.n	800394e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	617b      	str	r3, [r7, #20]
}
 8003948:	bf00      	nop
 800394a:	bf00      	nop
 800394c:	e7fd      	b.n	800394a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01f      	beq.n	8003994 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003954:	2300      	movs	r3, #0
 8003956:	61fb      	str	r3, [r7, #28]
 8003958:	e012      	b.n	8003980 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	4413      	add	r3, r2
 8003960:	7819      	ldrb	r1, [r3, #0]
 8003962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	4413      	add	r3, r2
 8003968:	3334      	adds	r3, #52	@ 0x34
 800396a:	460a      	mov	r2, r1
 800396c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	4413      	add	r3, r2
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d006      	beq.n	8003988 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	3301      	adds	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2b0f      	cmp	r3, #15
 8003984:	d9e9      	bls.n	800395a <prvInitialiseNewTask+0x66>
 8003986:	e000      	b.n	800398a <prvInitialiseNewTask+0x96>
			{
				break;
 8003988:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800398a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003992:	e003      	b.n	800399c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800399c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399e:	2b37      	cmp	r3, #55	@ 0x37
 80039a0:	d901      	bls.n	80039a6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039a2:	2337      	movs	r3, #55	@ 0x37
 80039a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039b0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80039b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b4:	2200      	movs	r2, #0
 80039b6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ba:	3304      	adds	r3, #4
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fe fe38 	bl	8002632 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c4:	3318      	adds	r3, #24
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe fe33 	bl	8002632 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80039d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e4:	2200      	movs	r2, #0
 80039e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80039f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f4:	3354      	adds	r3, #84	@ 0x54
 80039f6:	224c      	movs	r2, #76	@ 0x4c
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 ff9a 	bl	8005934 <memset>
 8003a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a02:	4a0d      	ldr	r2, [pc, #52]	@ (8003a38 <prvInitialiseNewTask+0x144>)
 8003a04:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a08:	4a0c      	ldr	r2, [pc, #48]	@ (8003a3c <prvInitialiseNewTask+0x148>)
 8003a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8003a40 <prvInitialiseNewTask+0x14c>)
 8003a10:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	68f9      	ldr	r1, [r7, #12]
 8003a16:	69b8      	ldr	r0, [r7, #24]
 8003a18:	f001 fb74 	bl	8005104 <pxPortInitialiseStack>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a2e:	bf00      	nop
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20001b10 	.word	0x20001b10
 8003a3c:	20001b78 	.word	0x20001b78
 8003a40:	20001be0 	.word	0x20001be0

08003a44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a4c:	f001 fc4e 	bl	80052ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a50:	4b2d      	ldr	r3, [pc, #180]	@ (8003b08 <prvAddNewTaskToReadyList+0xc4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3301      	adds	r3, #1
 8003a56:	4a2c      	ldr	r2, [pc, #176]	@ (8003b08 <prvAddNewTaskToReadyList+0xc4>)
 8003a58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8003b0c <prvAddNewTaskToReadyList+0xc8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a62:	4a2a      	ldr	r2, [pc, #168]	@ (8003b0c <prvAddNewTaskToReadyList+0xc8>)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a68:	4b27      	ldr	r3, [pc, #156]	@ (8003b08 <prvAddNewTaskToReadyList+0xc4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d110      	bne.n	8003a92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a70:	f000 fc3c 	bl	80042ec <prvInitialiseTaskLists>
 8003a74:	e00d      	b.n	8003a92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a76:	4b26      	ldr	r3, [pc, #152]	@ (8003b10 <prvAddNewTaskToReadyList+0xcc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a7e:	4b23      	ldr	r3, [pc, #140]	@ (8003b0c <prvAddNewTaskToReadyList+0xc8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d802      	bhi.n	8003a92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8003b0c <prvAddNewTaskToReadyList+0xc8>)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a92:	4b20      	ldr	r3, [pc, #128]	@ (8003b14 <prvAddNewTaskToReadyList+0xd0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3301      	adds	r3, #1
 8003a98:	4a1e      	ldr	r2, [pc, #120]	@ (8003b14 <prvAddNewTaskToReadyList+0xd0>)
 8003a9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <prvAddNewTaskToReadyList+0xd0>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b18 <prvAddNewTaskToReadyList+0xd4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d903      	bls.n	8003ab8 <prvAddNewTaskToReadyList+0x74>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab4:	4a18      	ldr	r2, [pc, #96]	@ (8003b18 <prvAddNewTaskToReadyList+0xd4>)
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4a15      	ldr	r2, [pc, #84]	@ (8003b1c <prvAddNewTaskToReadyList+0xd8>)
 8003ac6:	441a      	add	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3304      	adds	r3, #4
 8003acc:	4619      	mov	r1, r3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	f7fe fdbb 	bl	800264a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ad4:	f001 fc3a 	bl	800534c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8003b10 <prvAddNewTaskToReadyList+0xcc>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00e      	beq.n	8003afe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8003b0c <prvAddNewTaskToReadyList+0xc8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d207      	bcs.n	8003afe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003aee:	4b0c      	ldr	r3, [pc, #48]	@ (8003b20 <prvAddNewTaskToReadyList+0xdc>)
 8003af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000d90 	.word	0x20000d90
 8003b0c:	200008bc 	.word	0x200008bc
 8003b10:	20000d9c 	.word	0x20000d9c
 8003b14:	20000dac 	.word	0x20000dac
 8003b18:	20000d98 	.word	0x20000d98
 8003b1c:	200008c0 	.word	0x200008c0
 8003b20:	e000ed04 	.word	0xe000ed04

08003b24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d018      	beq.n	8003b68 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b36:	4b14      	ldr	r3, [pc, #80]	@ (8003b88 <vTaskDelay+0x64>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <vTaskDelay+0x32>
	__asm volatile
 8003b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	60bb      	str	r3, [r7, #8]
}
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop
 8003b54:	e7fd      	b.n	8003b52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b56:	f000 f88b 	bl	8003c70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 ff25 	bl	80049ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b62:	f000 f893 	bl	8003c8c <xTaskResumeAll>
 8003b66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d107      	bne.n	8003b7e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003b6e:	4b07      	ldr	r3, [pc, #28]	@ (8003b8c <vTaskDelay+0x68>)
 8003b70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	f3bf 8f4f 	dsb	sy
 8003b7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b7e:	bf00      	nop
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000db8 	.word	0x20000db8
 8003b8c:	e000ed04 	.word	0xe000ed04

08003b90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08a      	sub	sp, #40	@ 0x28
 8003b94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b9e:	463a      	mov	r2, r7
 8003ba0:	1d39      	adds	r1, r7, #4
 8003ba2:	f107 0308 	add.w	r3, r7, #8
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fe fcf2 	bl	8002590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bac:	6839      	ldr	r1, [r7, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	9202      	str	r2, [sp, #8]
 8003bb4:	9301      	str	r3, [sp, #4]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	460a      	mov	r2, r1
 8003bbe:	4924      	ldr	r1, [pc, #144]	@ (8003c50 <vTaskStartScheduler+0xc0>)
 8003bc0:	4824      	ldr	r0, [pc, #144]	@ (8003c54 <vTaskStartScheduler+0xc4>)
 8003bc2:	f7ff fdf1 	bl	80037a8 <xTaskCreateStatic>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	4a23      	ldr	r2, [pc, #140]	@ (8003c58 <vTaskStartScheduler+0xc8>)
 8003bca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bcc:	4b22      	ldr	r3, [pc, #136]	@ (8003c58 <vTaskStartScheduler+0xc8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	e001      	b.n	8003bde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d102      	bne.n	8003bea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003be4:	f000 ff36 	bl	8004a54 <xTimerCreateTimerTask>
 8003be8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d11b      	bne.n	8003c28 <vTaskStartScheduler+0x98>
	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	613b      	str	r3, [r7, #16]
}
 8003c02:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c04:	4b15      	ldr	r3, [pc, #84]	@ (8003c5c <vTaskStartScheduler+0xcc>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3354      	adds	r3, #84	@ 0x54
 8003c0a:	4a15      	ldr	r2, [pc, #84]	@ (8003c60 <vTaskStartScheduler+0xd0>)
 8003c0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c0e:	4b15      	ldr	r3, [pc, #84]	@ (8003c64 <vTaskStartScheduler+0xd4>)
 8003c10:	f04f 32ff 	mov.w	r2, #4294967295
 8003c14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c16:	4b14      	ldr	r3, [pc, #80]	@ (8003c68 <vTaskStartScheduler+0xd8>)
 8003c18:	2201      	movs	r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c1c:	4b13      	ldr	r3, [pc, #76]	@ (8003c6c <vTaskStartScheduler+0xdc>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c22:	f001 faf1 	bl	8005208 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c26:	e00f      	b.n	8003c48 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2e:	d10b      	bne.n	8003c48 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	60fb      	str	r3, [r7, #12]
}
 8003c42:	bf00      	nop
 8003c44:	bf00      	nop
 8003c46:	e7fd      	b.n	8003c44 <vTaskStartScheduler+0xb4>
}
 8003c48:	bf00      	nop
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	08006478 	.word	0x08006478
 8003c54:	080042bd 	.word	0x080042bd
 8003c58:	20000db4 	.word	0x20000db4
 8003c5c:	200008bc 	.word	0x200008bc
 8003c60:	20000010 	.word	0x20000010
 8003c64:	20000db0 	.word	0x20000db0
 8003c68:	20000d9c 	.word	0x20000d9c
 8003c6c:	20000d94 	.word	0x20000d94

08003c70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c74:	4b04      	ldr	r3, [pc, #16]	@ (8003c88 <vTaskSuspendAll+0x18>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	4a03      	ldr	r2, [pc, #12]	@ (8003c88 <vTaskSuspendAll+0x18>)
 8003c7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c7e:	bf00      	nop
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20000db8 	.word	0x20000db8

08003c8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c9a:	4b42      	ldr	r3, [pc, #264]	@ (8003da4 <xTaskResumeAll+0x118>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10b      	bne.n	8003cba <xTaskResumeAll+0x2e>
	__asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	603b      	str	r3, [r7, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	bf00      	nop
 8003cb8:	e7fd      	b.n	8003cb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cba:	f001 fb17 	bl	80052ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cbe:	4b39      	ldr	r3, [pc, #228]	@ (8003da4 <xTaskResumeAll+0x118>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	4a37      	ldr	r2, [pc, #220]	@ (8003da4 <xTaskResumeAll+0x118>)
 8003cc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cc8:	4b36      	ldr	r3, [pc, #216]	@ (8003da4 <xTaskResumeAll+0x118>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d162      	bne.n	8003d96 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cd0:	4b35      	ldr	r3, [pc, #212]	@ (8003da8 <xTaskResumeAll+0x11c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d05e      	beq.n	8003d96 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cd8:	e02f      	b.n	8003d3a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cda:	4b34      	ldr	r3, [pc, #208]	@ (8003dac <xTaskResumeAll+0x120>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3318      	adds	r3, #24
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fe fd0a 	bl	8002700 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fe fd05 	bl	8002700 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8003db0 <xTaskResumeAll+0x124>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d903      	bls.n	8003d0a <xTaskResumeAll+0x7e>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d06:	4a2a      	ldr	r2, [pc, #168]	@ (8003db0 <xTaskResumeAll+0x124>)
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4a27      	ldr	r2, [pc, #156]	@ (8003db4 <xTaskResumeAll+0x128>)
 8003d18:	441a      	add	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4610      	mov	r0, r2
 8003d22:	f7fe fc92 	bl	800264a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d2a:	4b23      	ldr	r3, [pc, #140]	@ (8003db8 <xTaskResumeAll+0x12c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d302      	bcc.n	8003d3a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003d34:	4b21      	ldr	r3, [pc, #132]	@ (8003dbc <xTaskResumeAll+0x130>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8003dac <xTaskResumeAll+0x120>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1cb      	bne.n	8003cda <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d48:	f000 fb74 	bl	8004434 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8003dc0 <xTaskResumeAll+0x134>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d010      	beq.n	8003d7a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d58:	f000 f856 	bl	8003e08 <xTaskIncrementTick>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003d62:	4b16      	ldr	r3, [pc, #88]	@ (8003dbc <xTaskResumeAll+0x130>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1f1      	bne.n	8003d58 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003d74:	4b12      	ldr	r3, [pc, #72]	@ (8003dc0 <xTaskResumeAll+0x134>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d7a:	4b10      	ldr	r3, [pc, #64]	@ (8003dbc <xTaskResumeAll+0x130>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d82:	2301      	movs	r3, #1
 8003d84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d86:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc4 <xTaskResumeAll+0x138>)
 8003d88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d96:	f001 fad9 	bl	800534c <vPortExitCritical>

	return xAlreadyYielded;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20000db8 	.word	0x20000db8
 8003da8:	20000d90 	.word	0x20000d90
 8003dac:	20000d50 	.word	0x20000d50
 8003db0:	20000d98 	.word	0x20000d98
 8003db4:	200008c0 	.word	0x200008c0
 8003db8:	200008bc 	.word	0x200008bc
 8003dbc:	20000da4 	.word	0x20000da4
 8003dc0:	20000da0 	.word	0x20000da0
 8003dc4:	e000ed04 	.word	0xe000ed04

08003dc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003dce:	4b04      	ldr	r3, [pc, #16]	@ (8003de0 <xTaskGetTickCount+0x18>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003dd4:	687b      	ldr	r3, [r7, #4]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr
 8003de0:	20000d94 	.word	0x20000d94

08003de4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003dea:	f001 fb41 	bl	8005470 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003dee:	2300      	movs	r3, #0
 8003df0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003df2:	4b04      	ldr	r3, [pc, #16]	@ (8003e04 <xTaskGetTickCountFromISR+0x20>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003df8:	683b      	ldr	r3, [r7, #0]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000d94 	.word	0x20000d94

08003e08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e12:	4b4f      	ldr	r3, [pc, #316]	@ (8003f50 <xTaskIncrementTick+0x148>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f040 8090 	bne.w	8003f3c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e1c:	4b4d      	ldr	r3, [pc, #308]	@ (8003f54 <xTaskIncrementTick+0x14c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3301      	adds	r3, #1
 8003e22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e24:	4a4b      	ldr	r2, [pc, #300]	@ (8003f54 <xTaskIncrementTick+0x14c>)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d121      	bne.n	8003e74 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e30:	4b49      	ldr	r3, [pc, #292]	@ (8003f58 <xTaskIncrementTick+0x150>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00b      	beq.n	8003e52 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	603b      	str	r3, [r7, #0]
}
 8003e4c:	bf00      	nop
 8003e4e:	bf00      	nop
 8003e50:	e7fd      	b.n	8003e4e <xTaskIncrementTick+0x46>
 8003e52:	4b41      	ldr	r3, [pc, #260]	@ (8003f58 <xTaskIncrementTick+0x150>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	4b40      	ldr	r3, [pc, #256]	@ (8003f5c <xTaskIncrementTick+0x154>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a3e      	ldr	r2, [pc, #248]	@ (8003f58 <xTaskIncrementTick+0x150>)
 8003e5e:	6013      	str	r3, [r2, #0]
 8003e60:	4a3e      	ldr	r2, [pc, #248]	@ (8003f5c <xTaskIncrementTick+0x154>)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	4b3e      	ldr	r3, [pc, #248]	@ (8003f60 <xTaskIncrementTick+0x158>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f60 <xTaskIncrementTick+0x158>)
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	f000 fae0 	bl	8004434 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e74:	4b3b      	ldr	r3, [pc, #236]	@ (8003f64 <xTaskIncrementTick+0x15c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d349      	bcc.n	8003f12 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e7e:	4b36      	ldr	r3, [pc, #216]	@ (8003f58 <xTaskIncrementTick+0x150>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d104      	bne.n	8003e92 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e88:	4b36      	ldr	r3, [pc, #216]	@ (8003f64 <xTaskIncrementTick+0x15c>)
 8003e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8e:	601a      	str	r2, [r3, #0]
					break;
 8003e90:	e03f      	b.n	8003f12 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e92:	4b31      	ldr	r3, [pc, #196]	@ (8003f58 <xTaskIncrementTick+0x150>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d203      	bcs.n	8003eb2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8003f64 <xTaskIncrementTick+0x15c>)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003eb0:	e02f      	b.n	8003f12 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe fc22 	bl	8002700 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d004      	beq.n	8003ece <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	3318      	adds	r3, #24
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fe fc19 	bl	8002700 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed2:	4b25      	ldr	r3, [pc, #148]	@ (8003f68 <xTaskIncrementTick+0x160>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d903      	bls.n	8003ee2 <xTaskIncrementTick+0xda>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ede:	4a22      	ldr	r2, [pc, #136]	@ (8003f68 <xTaskIncrementTick+0x160>)
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4a1f      	ldr	r2, [pc, #124]	@ (8003f6c <xTaskIncrementTick+0x164>)
 8003ef0:	441a      	add	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4610      	mov	r0, r2
 8003efa:	f7fe fba6 	bl	800264a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f02:	4b1b      	ldr	r3, [pc, #108]	@ (8003f70 <xTaskIncrementTick+0x168>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d3b8      	bcc.n	8003e7e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f10:	e7b5      	b.n	8003e7e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f12:	4b17      	ldr	r3, [pc, #92]	@ (8003f70 <xTaskIncrementTick+0x168>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f18:	4914      	ldr	r1, [pc, #80]	@ (8003f6c <xTaskIncrementTick+0x164>)
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d901      	bls.n	8003f2e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f2e:	4b11      	ldr	r3, [pc, #68]	@ (8003f74 <xTaskIncrementTick+0x16c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d007      	beq.n	8003f46 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003f36:	2301      	movs	r3, #1
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	e004      	b.n	8003f46 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f78 <xTaskIncrementTick+0x170>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3301      	adds	r3, #1
 8003f42:	4a0d      	ldr	r2, [pc, #52]	@ (8003f78 <xTaskIncrementTick+0x170>)
 8003f44:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f46:	697b      	ldr	r3, [r7, #20]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	20000db8 	.word	0x20000db8
 8003f54:	20000d94 	.word	0x20000d94
 8003f58:	20000d48 	.word	0x20000d48
 8003f5c:	20000d4c 	.word	0x20000d4c
 8003f60:	20000da8 	.word	0x20000da8
 8003f64:	20000db0 	.word	0x20000db0
 8003f68:	20000d98 	.word	0x20000d98
 8003f6c:	200008c0 	.word	0x200008c0
 8003f70:	200008bc 	.word	0x200008bc
 8003f74:	20000da4 	.word	0x20000da4
 8003f78:	20000da0 	.word	0x20000da0

08003f7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f82:	4b2a      	ldr	r3, [pc, #168]	@ (800402c <vTaskSwitchContext+0xb0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f8a:	4b29      	ldr	r3, [pc, #164]	@ (8004030 <vTaskSwitchContext+0xb4>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f90:	e047      	b.n	8004022 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003f92:	4b27      	ldr	r3, [pc, #156]	@ (8004030 <vTaskSwitchContext+0xb4>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f98:	4b26      	ldr	r3, [pc, #152]	@ (8004034 <vTaskSwitchContext+0xb8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	e011      	b.n	8003fc4 <vTaskSwitchContext+0x48>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10b      	bne.n	8003fbe <vTaskSwitchContext+0x42>
	__asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	607b      	str	r3, [r7, #4]
}
 8003fb8:	bf00      	nop
 8003fba:	bf00      	nop
 8003fbc:	e7fd      	b.n	8003fba <vTaskSwitchContext+0x3e>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	491c      	ldr	r1, [pc, #112]	@ (8004038 <vTaskSwitchContext+0xbc>)
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0e3      	beq.n	8003fa0 <vTaskSwitchContext+0x24>
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4a15      	ldr	r2, [pc, #84]	@ (8004038 <vTaskSwitchContext+0xbc>)
 8003fe4:	4413      	add	r3, r2
 8003fe6:	60bb      	str	r3, [r7, #8]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d104      	bne.n	8004008 <vTaskSwitchContext+0x8c>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	605a      	str	r2, [r3, #4]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	4a0b      	ldr	r2, [pc, #44]	@ (800403c <vTaskSwitchContext+0xc0>)
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	4a08      	ldr	r2, [pc, #32]	@ (8004034 <vTaskSwitchContext+0xb8>)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004018:	4b08      	ldr	r3, [pc, #32]	@ (800403c <vTaskSwitchContext+0xc0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3354      	adds	r3, #84	@ 0x54
 800401e:	4a08      	ldr	r2, [pc, #32]	@ (8004040 <vTaskSwitchContext+0xc4>)
 8004020:	6013      	str	r3, [r2, #0]
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr
 800402c:	20000db8 	.word	0x20000db8
 8004030:	20000da4 	.word	0x20000da4
 8004034:	20000d98 	.word	0x20000d98
 8004038:	200008c0 	.word	0x200008c0
 800403c:	200008bc 	.word	0x200008bc
 8004040:	20000010 	.word	0x20000010

08004044 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10b      	bne.n	800406c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	60fb      	str	r3, [r7, #12]
}
 8004066:	bf00      	nop
 8004068:	bf00      	nop
 800406a:	e7fd      	b.n	8004068 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800406c:	4b07      	ldr	r3, [pc, #28]	@ (800408c <vTaskPlaceOnEventList+0x48>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3318      	adds	r3, #24
 8004072:	4619      	mov	r1, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7fe fb0b 	bl	8002690 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800407a:	2101      	movs	r1, #1
 800407c:	6838      	ldr	r0, [r7, #0]
 800407e:	f000 fc95 	bl	80049ac <prvAddCurrentTaskToDelayedList>
}
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	200008bc 	.word	0x200008bc

08004090 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10b      	bne.n	80040ba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	617b      	str	r3, [r7, #20]
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	e7fd      	b.n	80040b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040ba:	4b0a      	ldr	r3, [pc, #40]	@ (80040e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3318      	adds	r3, #24
 80040c0:	4619      	mov	r1, r3
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f7fe fac1 	bl	800264a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80040ce:	f04f 33ff 	mov.w	r3, #4294967295
 80040d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	68b8      	ldr	r0, [r7, #8]
 80040d8:	f000 fc68 	bl	80049ac <prvAddCurrentTaskToDelayedList>
	}
 80040dc:	bf00      	nop
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	200008bc 	.word	0x200008bc

080040e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10b      	bne.n	8004116 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	60fb      	str	r3, [r7, #12]
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop
 8004114:	e7fd      	b.n	8004112 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	3318      	adds	r3, #24
 800411a:	4618      	mov	r0, r3
 800411c:	f7fe faf0 	bl	8002700 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004120:	4b1d      	ldr	r3, [pc, #116]	@ (8004198 <xTaskRemoveFromEventList+0xb0>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d11d      	bne.n	8004164 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	3304      	adds	r3, #4
 800412c:	4618      	mov	r0, r3
 800412e:	f7fe fae7 	bl	8002700 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004136:	4b19      	ldr	r3, [pc, #100]	@ (800419c <xTaskRemoveFromEventList+0xb4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d903      	bls.n	8004146 <xTaskRemoveFromEventList+0x5e>
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004142:	4a16      	ldr	r2, [pc, #88]	@ (800419c <xTaskRemoveFromEventList+0xb4>)
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4a13      	ldr	r2, [pc, #76]	@ (80041a0 <xTaskRemoveFromEventList+0xb8>)
 8004154:	441a      	add	r2, r3
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	3304      	adds	r3, #4
 800415a:	4619      	mov	r1, r3
 800415c:	4610      	mov	r0, r2
 800415e:	f7fe fa74 	bl	800264a <vListInsertEnd>
 8004162:	e005      	b.n	8004170 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	3318      	adds	r3, #24
 8004168:	4619      	mov	r1, r3
 800416a:	480e      	ldr	r0, [pc, #56]	@ (80041a4 <xTaskRemoveFromEventList+0xbc>)
 800416c:	f7fe fa6d 	bl	800264a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004174:	4b0c      	ldr	r3, [pc, #48]	@ (80041a8 <xTaskRemoveFromEventList+0xc0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417a:	429a      	cmp	r2, r3
 800417c:	d905      	bls.n	800418a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800417e:	2301      	movs	r3, #1
 8004180:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004182:	4b0a      	ldr	r3, [pc, #40]	@ (80041ac <xTaskRemoveFromEventList+0xc4>)
 8004184:	2201      	movs	r2, #1
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	e001      	b.n	800418e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800418e:	697b      	ldr	r3, [r7, #20]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000db8 	.word	0x20000db8
 800419c:	20000d98 	.word	0x20000d98
 80041a0:	200008c0 	.word	0x200008c0
 80041a4:	20000d50 	.word	0x20000d50
 80041a8:	200008bc 	.word	0x200008bc
 80041ac:	20000da4 	.word	0x20000da4

080041b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041b8:	4b06      	ldr	r3, [pc, #24]	@ (80041d4 <vTaskInternalSetTimeOutState+0x24>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041c0:	4b05      	ldr	r3, [pc, #20]	@ (80041d8 <vTaskInternalSetTimeOutState+0x28>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	605a      	str	r2, [r3, #4]
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	20000da8 	.word	0x20000da8
 80041d8:	20000d94 	.word	0x20000d94

080041dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10b      	bne.n	8004204 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	613b      	str	r3, [r7, #16]
}
 80041fe:	bf00      	nop
 8004200:	bf00      	nop
 8004202:	e7fd      	b.n	8004200 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10b      	bne.n	8004222 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	60fb      	str	r3, [r7, #12]
}
 800421c:	bf00      	nop
 800421e:	bf00      	nop
 8004220:	e7fd      	b.n	800421e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004222:	f001 f863 	bl	80052ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004226:	4b1d      	ldr	r3, [pc, #116]	@ (800429c <xTaskCheckForTimeOut+0xc0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d102      	bne.n	8004246 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004240:	2300      	movs	r3, #0
 8004242:	61fb      	str	r3, [r7, #28]
 8004244:	e023      	b.n	800428e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b15      	ldr	r3, [pc, #84]	@ (80042a0 <xTaskCheckForTimeOut+0xc4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d007      	beq.n	8004262 <xTaskCheckForTimeOut+0x86>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	429a      	cmp	r2, r3
 800425a:	d302      	bcc.n	8004262 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800425c:	2301      	movs	r3, #1
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	e015      	b.n	800428e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	429a      	cmp	r2, r3
 800426a:	d20b      	bcs.n	8004284 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	1ad2      	subs	r2, r2, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff ff99 	bl	80041b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	e004      	b.n	800428e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800428a:	2301      	movs	r3, #1
 800428c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800428e:	f001 f85d 	bl	800534c <vPortExitCritical>

	return xReturn;
 8004292:	69fb      	ldr	r3, [r7, #28]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3720      	adds	r7, #32
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	20000d94 	.word	0x20000d94
 80042a0:	20000da8 	.word	0x20000da8

080042a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042a8:	4b03      	ldr	r3, [pc, #12]	@ (80042b8 <vTaskMissedYield+0x14>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
}
 80042ae:	bf00      	nop
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	20000da4 	.word	0x20000da4

080042bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042c4:	f000 f852 	bl	800436c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042c8:	4b06      	ldr	r3, [pc, #24]	@ (80042e4 <prvIdleTask+0x28>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d9f9      	bls.n	80042c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042d0:	4b05      	ldr	r3, [pc, #20]	@ (80042e8 <prvIdleTask+0x2c>)
 80042d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042e0:	e7f0      	b.n	80042c4 <prvIdleTask+0x8>
 80042e2:	bf00      	nop
 80042e4:	200008c0 	.word	0x200008c0
 80042e8:	e000ed04 	.word	0xe000ed04

080042ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	e00c      	b.n	8004312 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4a12      	ldr	r2, [pc, #72]	@ (800434c <prvInitialiseTaskLists+0x60>)
 8004304:	4413      	add	r3, r2
 8004306:	4618      	mov	r0, r3
 8004308:	f7fe f974 	bl	80025f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3301      	adds	r3, #1
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b37      	cmp	r3, #55	@ 0x37
 8004316:	d9ef      	bls.n	80042f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004318:	480d      	ldr	r0, [pc, #52]	@ (8004350 <prvInitialiseTaskLists+0x64>)
 800431a:	f7fe f96b 	bl	80025f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800431e:	480d      	ldr	r0, [pc, #52]	@ (8004354 <prvInitialiseTaskLists+0x68>)
 8004320:	f7fe f968 	bl	80025f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004324:	480c      	ldr	r0, [pc, #48]	@ (8004358 <prvInitialiseTaskLists+0x6c>)
 8004326:	f7fe f965 	bl	80025f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800432a:	480c      	ldr	r0, [pc, #48]	@ (800435c <prvInitialiseTaskLists+0x70>)
 800432c:	f7fe f962 	bl	80025f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004330:	480b      	ldr	r0, [pc, #44]	@ (8004360 <prvInitialiseTaskLists+0x74>)
 8004332:	f7fe f95f 	bl	80025f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004336:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <prvInitialiseTaskLists+0x78>)
 8004338:	4a05      	ldr	r2, [pc, #20]	@ (8004350 <prvInitialiseTaskLists+0x64>)
 800433a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800433c:	4b0a      	ldr	r3, [pc, #40]	@ (8004368 <prvInitialiseTaskLists+0x7c>)
 800433e:	4a05      	ldr	r2, [pc, #20]	@ (8004354 <prvInitialiseTaskLists+0x68>)
 8004340:	601a      	str	r2, [r3, #0]
}
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	200008c0 	.word	0x200008c0
 8004350:	20000d20 	.word	0x20000d20
 8004354:	20000d34 	.word	0x20000d34
 8004358:	20000d50 	.word	0x20000d50
 800435c:	20000d64 	.word	0x20000d64
 8004360:	20000d7c 	.word	0x20000d7c
 8004364:	20000d48 	.word	0x20000d48
 8004368:	20000d4c 	.word	0x20000d4c

0800436c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004372:	e019      	b.n	80043a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004374:	f000 ffba 	bl	80052ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004378:	4b10      	ldr	r3, [pc, #64]	@ (80043bc <prvCheckTasksWaitingTermination+0x50>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	4618      	mov	r0, r3
 8004386:	f7fe f9bb 	bl	8002700 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800438a:	4b0d      	ldr	r3, [pc, #52]	@ (80043c0 <prvCheckTasksWaitingTermination+0x54>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3b01      	subs	r3, #1
 8004390:	4a0b      	ldr	r2, [pc, #44]	@ (80043c0 <prvCheckTasksWaitingTermination+0x54>)
 8004392:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004394:	4b0b      	ldr	r3, [pc, #44]	@ (80043c4 <prvCheckTasksWaitingTermination+0x58>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3b01      	subs	r3, #1
 800439a:	4a0a      	ldr	r2, [pc, #40]	@ (80043c4 <prvCheckTasksWaitingTermination+0x58>)
 800439c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800439e:	f000 ffd5 	bl	800534c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f810 	bl	80043c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043a8:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <prvCheckTasksWaitingTermination+0x58>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e1      	bne.n	8004374 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043b0:	bf00      	nop
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20000d64 	.word	0x20000d64
 80043c0:	20000d90 	.word	0x20000d90
 80043c4:	20000d78 	.word	0x20000d78

080043c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3354      	adds	r3, #84	@ 0x54
 80043d4:	4618      	mov	r0, r3
 80043d6:	f001 fab5 	bl	8005944 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d108      	bne.n	80043f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e8:	4618      	mov	r0, r3
 80043ea:	f001 f94f 	bl	800568c <vPortFree>
				vPortFree( pxTCB );
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f001 f94c 	bl	800568c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043f4:	e019      	b.n	800442a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d103      	bne.n	8004408 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f001 f943 	bl	800568c <vPortFree>
	}
 8004406:	e010      	b.n	800442a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800440e:	2b02      	cmp	r3, #2
 8004410:	d00b      	beq.n	800442a <prvDeleteTCB+0x62>
	__asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	60fb      	str	r3, [r7, #12]
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop
 8004428:	e7fd      	b.n	8004426 <prvDeleteTCB+0x5e>
	}
 800442a:	bf00      	nop
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800443a:	4b0c      	ldr	r3, [pc, #48]	@ (800446c <prvResetNextTaskUnblockTime+0x38>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d104      	bne.n	800444e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004444:	4b0a      	ldr	r3, [pc, #40]	@ (8004470 <prvResetNextTaskUnblockTime+0x3c>)
 8004446:	f04f 32ff 	mov.w	r2, #4294967295
 800444a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800444c:	e008      	b.n	8004460 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800444e:	4b07      	ldr	r3, [pc, #28]	@ (800446c <prvResetNextTaskUnblockTime+0x38>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	4a04      	ldr	r2, [pc, #16]	@ (8004470 <prvResetNextTaskUnblockTime+0x3c>)
 800445e:	6013      	str	r3, [r2, #0]
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20000d48 	.word	0x20000d48
 8004470:	20000db0 	.word	0x20000db0

08004474 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800447a:	4b0b      	ldr	r3, [pc, #44]	@ (80044a8 <xTaskGetSchedulerState+0x34>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d102      	bne.n	8004488 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004482:	2301      	movs	r3, #1
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	e008      	b.n	800449a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004488:	4b08      	ldr	r3, [pc, #32]	@ (80044ac <xTaskGetSchedulerState+0x38>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d102      	bne.n	8004496 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004490:	2302      	movs	r3, #2
 8004492:	607b      	str	r3, [r7, #4]
 8004494:	e001      	b.n	800449a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004496:	2300      	movs	r3, #0
 8004498:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800449a:	687b      	ldr	r3, [r7, #4]
	}
 800449c:	4618      	mov	r0, r3
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	20000d9c 	.word	0x20000d9c
 80044ac:	20000db8 	.word	0x20000db8

080044b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d051      	beq.n	800456a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004574 <xTaskPriorityInherit+0xc4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d241      	bcs.n	8004558 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	db06      	blt.n	80044ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044dc:	4b25      	ldr	r3, [pc, #148]	@ (8004574 <xTaskPriorityInherit+0xc4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	6959      	ldr	r1, [r3, #20]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004578 <xTaskPriorityInherit+0xc8>)
 80044fc:	4413      	add	r3, r2
 80044fe:	4299      	cmp	r1, r3
 8004500:	d122      	bne.n	8004548 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	3304      	adds	r3, #4
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe f8fa 	bl	8002700 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800450c:	4b19      	ldr	r3, [pc, #100]	@ (8004574 <xTaskPriorityInherit+0xc4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800451a:	4b18      	ldr	r3, [pc, #96]	@ (800457c <xTaskPriorityInherit+0xcc>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d903      	bls.n	800452a <xTaskPriorityInherit+0x7a>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004526:	4a15      	ldr	r2, [pc, #84]	@ (800457c <xTaskPriorityInherit+0xcc>)
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800452e:	4613      	mov	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4a10      	ldr	r2, [pc, #64]	@ (8004578 <xTaskPriorityInherit+0xc8>)
 8004538:	441a      	add	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	3304      	adds	r3, #4
 800453e:	4619      	mov	r1, r3
 8004540:	4610      	mov	r0, r2
 8004542:	f7fe f882 	bl	800264a <vListInsertEnd>
 8004546:	e004      	b.n	8004552 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004548:	4b0a      	ldr	r3, [pc, #40]	@ (8004574 <xTaskPriorityInherit+0xc4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004552:	2301      	movs	r3, #1
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	e008      	b.n	800456a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800455c:	4b05      	ldr	r3, [pc, #20]	@ (8004574 <xTaskPriorityInherit+0xc4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004562:	429a      	cmp	r2, r3
 8004564:	d201      	bcs.n	800456a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004566:	2301      	movs	r3, #1
 8004568:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800456a:	68fb      	ldr	r3, [r7, #12]
	}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	200008bc 	.word	0x200008bc
 8004578:	200008c0 	.word	0x200008c0
 800457c:	20000d98 	.word	0x20000d98

08004580 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d058      	beq.n	8004648 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004596:	4b2f      	ldr	r3, [pc, #188]	@ (8004654 <xTaskPriorityDisinherit+0xd4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	429a      	cmp	r2, r3
 800459e:	d00b      	beq.n	80045b8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	60fb      	str	r3, [r7, #12]
}
 80045b2:	bf00      	nop
 80045b4:	bf00      	nop
 80045b6:	e7fd      	b.n	80045b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10b      	bne.n	80045d8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	60bb      	str	r3, [r7, #8]
}
 80045d2:	bf00      	nop
 80045d4:	bf00      	nop
 80045d6:	e7fd      	b.n	80045d4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045dc:	1e5a      	subs	r2, r3, #1
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d02c      	beq.n	8004648 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d128      	bne.n	8004648 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	3304      	adds	r3, #4
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe f880 	bl	8002700 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004618:	4b0f      	ldr	r3, [pc, #60]	@ (8004658 <xTaskPriorityDisinherit+0xd8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d903      	bls.n	8004628 <xTaskPriorityDisinherit+0xa8>
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004624:	4a0c      	ldr	r2, [pc, #48]	@ (8004658 <xTaskPriorityDisinherit+0xd8>)
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4a09      	ldr	r2, [pc, #36]	@ (800465c <xTaskPriorityDisinherit+0xdc>)
 8004636:	441a      	add	r2, r3
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	3304      	adds	r3, #4
 800463c:	4619      	mov	r1, r3
 800463e:	4610      	mov	r0, r2
 8004640:	f7fe f803 	bl	800264a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004644:	2301      	movs	r3, #1
 8004646:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004648:	697b      	ldr	r3, [r7, #20]
	}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	200008bc 	.word	0x200008bc
 8004658:	20000d98 	.word	0x20000d98
 800465c:	200008c0 	.word	0x200008c0

08004660 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800466e:	2301      	movs	r3, #1
 8004670:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d06c      	beq.n	8004752 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10b      	bne.n	8004698 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	60fb      	str	r3, [r7, #12]
}
 8004692:	bf00      	nop
 8004694:	bf00      	nop
 8004696:	e7fd      	b.n	8004694 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d902      	bls.n	80046a8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	e002      	b.n	80046ae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d04c      	beq.n	8004752 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d147      	bne.n	8004752 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80046c2:	4b26      	ldr	r3, [pc, #152]	@ (800475c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d10b      	bne.n	80046e4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	60bb      	str	r3, [r7, #8]
}
 80046de:	bf00      	nop
 80046e0:	bf00      	nop
 80046e2:	e7fd      	b.n	80046e0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	69fa      	ldr	r2, [r7, #28]
 80046ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	db04      	blt.n	8004702 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	6959      	ldr	r1, [r3, #20]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4a13      	ldr	r2, [pc, #76]	@ (8004760 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004712:	4413      	add	r3, r2
 8004714:	4299      	cmp	r1, r3
 8004716:	d11c      	bne.n	8004752 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	3304      	adds	r3, #4
 800471c:	4618      	mov	r0, r3
 800471e:	f7fd ffef 	bl	8002700 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004726:	4b0f      	ldr	r3, [pc, #60]	@ (8004764 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d903      	bls.n	8004736 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004732:	4a0c      	ldr	r2, [pc, #48]	@ (8004764 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4a07      	ldr	r2, [pc, #28]	@ (8004760 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004744:	441a      	add	r2, r3
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	3304      	adds	r3, #4
 800474a:	4619      	mov	r1, r3
 800474c:	4610      	mov	r0, r2
 800474e:	f7fd ff7c 	bl	800264a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004752:	bf00      	nop
 8004754:	3720      	adds	r7, #32
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	200008bc 	.word	0x200008bc
 8004760:	200008c0 	.word	0x200008c0
 8004764:	20000d98 	.word	0x20000d98

08004768 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800476c:	4b07      	ldr	r3, [pc, #28]	@ (800478c <pvTaskIncrementMutexHeldCount+0x24>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d004      	beq.n	800477e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004774:	4b05      	ldr	r3, [pc, #20]	@ (800478c <pvTaskIncrementMutexHeldCount+0x24>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800477a:	3201      	adds	r2, #1
 800477c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800477e:	4b03      	ldr	r3, [pc, #12]	@ (800478c <pvTaskIncrementMutexHeldCount+0x24>)
 8004780:	681b      	ldr	r3, [r3, #0]
	}
 8004782:	4618      	mov	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	bc80      	pop	{r7}
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	200008bc 	.word	0x200008bc

08004790 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800479a:	f000 fda7 	bl	80052ec <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800479e:	4b20      	ldr	r3, [pc, #128]	@ (8004820 <ulTaskNotifyTake+0x90>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d113      	bne.n	80047d2 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80047aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004820 <ulTaskNotifyTake+0x90>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00b      	beq.n	80047d2 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047ba:	2101      	movs	r1, #1
 80047bc:	6838      	ldr	r0, [r7, #0]
 80047be:	f000 f8f5 	bl	80049ac <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80047c2:	4b18      	ldr	r3, [pc, #96]	@ (8004824 <ulTaskNotifyTake+0x94>)
 80047c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80047d2:	f000 fdbb 	bl	800534c <vPortExitCritical>

		taskENTER_CRITICAL();
 80047d6:	f000 fd89 	bl	80052ec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80047da:	4b11      	ldr	r3, [pc, #68]	@ (8004820 <ulTaskNotifyTake+0x90>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80047e2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00e      	beq.n	8004808 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80047f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <ulTaskNotifyTake+0x90>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80047fa:	e005      	b.n	8004808 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80047fc:	4b08      	ldr	r3, [pc, #32]	@ (8004820 <ulTaskNotifyTake+0x90>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	3a01      	subs	r2, #1
 8004804:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004808:	4b05      	ldr	r3, [pc, #20]	@ (8004820 <ulTaskNotifyTake+0x90>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8004812:	f000 fd9b 	bl	800534c <vPortExitCritical>

		return ulReturn;
 8004816:	68fb      	ldr	r3, [r7, #12]
	}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	200008bc 	.word	0x200008bc
 8004824:	e000ed04 	.word	0xe000ed04

08004828 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	@ 0x28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004838:	2301      	movs	r3, #1
 800483a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10b      	bne.n	800485a <xTaskGenericNotify+0x32>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	61bb      	str	r3, [r7, #24]
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop
 8004858:	e7fd      	b.n	8004856 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800485e:	f000 fd45 	bl	80052ec <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d004      	beq.n	8004872 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8004878:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	2202      	movs	r2, #2
 800487e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	2b04      	cmp	r3, #4
 8004886:	d82e      	bhi.n	80048e6 <xTaskGenericNotify+0xbe>
 8004888:	a201      	add	r2, pc, #4	@ (adr r2, 8004890 <xTaskGenericNotify+0x68>)
 800488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488e:	bf00      	nop
 8004890:	0800490b 	.word	0x0800490b
 8004894:	080048a5 	.word	0x080048a5
 8004898:	080048b7 	.word	0x080048b7
 800489c:	080048c7 	.word	0x080048c7
 80048a0:	080048d1 	.word	0x080048d1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	431a      	orrs	r2, r3
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80048b4:	e02c      	b.n	8004910 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80048c4:	e024      	b.n	8004910 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80048ce:	e01f      	b.n	8004910 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80048d0:	7ffb      	ldrb	r3, [r7, #31]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d004      	beq.n	80048e0 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80048de:	e017      	b.n	8004910 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80048e4:	e014      	b.n	8004910 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f0:	d00d      	beq.n	800490e <xTaskGenericNotify+0xe6>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	617b      	str	r3, [r7, #20]
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop
 8004908:	e7fd      	b.n	8004906 <xTaskGenericNotify+0xde>
					break;
 800490a:	bf00      	nop
 800490c:	e000      	b.n	8004910 <xTaskGenericNotify+0xe8>

					break;
 800490e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004910:	7ffb      	ldrb	r3, [r7, #31]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d13b      	bne.n	800498e <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	3304      	adds	r3, #4
 800491a:	4618      	mov	r0, r3
 800491c:	f7fd fef0 	bl	8002700 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004924:	4b1d      	ldr	r3, [pc, #116]	@ (800499c <xTaskGenericNotify+0x174>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d903      	bls.n	8004934 <xTaskGenericNotify+0x10c>
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004930:	4a1a      	ldr	r2, [pc, #104]	@ (800499c <xTaskGenericNotify+0x174>)
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4a17      	ldr	r2, [pc, #92]	@ (80049a0 <xTaskGenericNotify+0x178>)
 8004942:	441a      	add	r2, r3
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	3304      	adds	r3, #4
 8004948:	4619      	mov	r1, r3
 800494a:	4610      	mov	r0, r2
 800494c:	f7fd fe7d 	bl	800264a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00b      	beq.n	8004970 <xTaskGenericNotify+0x148>
	__asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	613b      	str	r3, [r7, #16]
}
 800496a:	bf00      	nop
 800496c:	bf00      	nop
 800496e:	e7fd      	b.n	800496c <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004974:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <xTaskGenericNotify+0x17c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497a:	429a      	cmp	r2, r3
 800497c:	d907      	bls.n	800498e <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800497e:	4b0a      	ldr	r3, [pc, #40]	@ (80049a8 <xTaskGenericNotify+0x180>)
 8004980:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800498e:	f000 fcdd 	bl	800534c <vPortExitCritical>

		return xReturn;
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8004994:	4618      	mov	r0, r3
 8004996:	3728      	adds	r7, #40	@ 0x28
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000d98 	.word	0x20000d98
 80049a0:	200008c0 	.word	0x200008c0
 80049a4:	200008bc 	.word	0x200008bc
 80049a8:	e000ed04 	.word	0xe000ed04

080049ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80049b6:	4b21      	ldr	r3, [pc, #132]	@ (8004a3c <prvAddCurrentTaskToDelayedList+0x90>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049bc:	4b20      	ldr	r3, [pc, #128]	@ (8004a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3304      	adds	r3, #4
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fd fe9c 	bl	8002700 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ce:	d10a      	bne.n	80049e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d007      	beq.n	80049e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3304      	adds	r3, #4
 80049dc:	4619      	mov	r1, r3
 80049de:	4819      	ldr	r0, [pc, #100]	@ (8004a44 <prvAddCurrentTaskToDelayedList+0x98>)
 80049e0:	f7fd fe33 	bl	800264a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049e4:	e026      	b.n	8004a34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4413      	add	r3, r2
 80049ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049ee:	4b14      	ldr	r3, [pc, #80]	@ (8004a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d209      	bcs.n	8004a12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049fe:	4b12      	ldr	r3, [pc, #72]	@ (8004a48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4b0f      	ldr	r3, [pc, #60]	@ (8004a40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3304      	adds	r3, #4
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	f7fd fe40 	bl	8002690 <vListInsert>
}
 8004a10:	e010      	b.n	8004a34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a12:	4b0e      	ldr	r3, [pc, #56]	@ (8004a4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	4b0a      	ldr	r3, [pc, #40]	@ (8004a40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	f7fd fe36 	bl	8002690 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a24:	4b0a      	ldr	r3, [pc, #40]	@ (8004a50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d202      	bcs.n	8004a34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004a2e:	4a08      	ldr	r2, [pc, #32]	@ (8004a50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	6013      	str	r3, [r2, #0]
}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	20000d94 	.word	0x20000d94
 8004a40:	200008bc 	.word	0x200008bc
 8004a44:	20000d7c 	.word	0x20000d7c
 8004a48:	20000d4c 	.word	0x20000d4c
 8004a4c:	20000d48 	.word	0x20000d48
 8004a50:	20000db0 	.word	0x20000db0

08004a54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08a      	sub	sp, #40	@ 0x28
 8004a58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a5e:	f000 fb11 	bl	8005084 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a62:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad8 <xTimerCreateTimerTask+0x84>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d021      	beq.n	8004aae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a72:	1d3a      	adds	r2, r7, #4
 8004a74:	f107 0108 	add.w	r1, r7, #8
 8004a78:	f107 030c 	add.w	r3, r7, #12
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fd fd9f 	bl	80025c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	9202      	str	r2, [sp, #8]
 8004a8a:	9301      	str	r3, [sp, #4]
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	2300      	movs	r3, #0
 8004a92:	460a      	mov	r2, r1
 8004a94:	4911      	ldr	r1, [pc, #68]	@ (8004adc <xTimerCreateTimerTask+0x88>)
 8004a96:	4812      	ldr	r0, [pc, #72]	@ (8004ae0 <xTimerCreateTimerTask+0x8c>)
 8004a98:	f7fe fe86 	bl	80037a8 <xTaskCreateStatic>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	4a11      	ldr	r2, [pc, #68]	@ (8004ae4 <xTimerCreateTimerTask+0x90>)
 8004aa0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004aa2:	4b10      	ldr	r3, [pc, #64]	@ (8004ae4 <xTimerCreateTimerTask+0x90>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10b      	bne.n	8004acc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	613b      	str	r3, [r7, #16]
}
 8004ac6:	bf00      	nop
 8004ac8:	bf00      	nop
 8004aca:	e7fd      	b.n	8004ac8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004acc:	697b      	ldr	r3, [r7, #20]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000dec 	.word	0x20000dec
 8004adc:	08006480 	.word	0x08006480
 8004ae0:	08004c21 	.word	0x08004c21
 8004ae4:	20000df0 	.word	0x20000df0

08004ae8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08a      	sub	sp, #40	@ 0x28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10b      	bne.n	8004b18 <xTimerGenericCommand+0x30>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	623b      	str	r3, [r7, #32]
}
 8004b12:	bf00      	nop
 8004b14:	bf00      	nop
 8004b16:	e7fd      	b.n	8004b14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b18:	4b19      	ldr	r3, [pc, #100]	@ (8004b80 <xTimerGenericCommand+0x98>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d02a      	beq.n	8004b76 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b05      	cmp	r3, #5
 8004b30:	dc18      	bgt.n	8004b64 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b32:	f7ff fc9f 	bl	8004474 <xTaskGetSchedulerState>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d109      	bne.n	8004b50 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b3c:	4b10      	ldr	r3, [pc, #64]	@ (8004b80 <xTimerGenericCommand+0x98>)
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	f107 0110 	add.w	r1, r7, #16
 8004b44:	2300      	movs	r3, #0
 8004b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b48:	f7fd ffb8 	bl	8002abc <xQueueGenericSend>
 8004b4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b4e:	e012      	b.n	8004b76 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b50:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <xTimerGenericCommand+0x98>)
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	f107 0110 	add.w	r1, r7, #16
 8004b58:	2300      	movs	r3, #0
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f7fd ffae 	bl	8002abc <xQueueGenericSend>
 8004b60:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b62:	e008      	b.n	8004b76 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b64:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <xTimerGenericCommand+0x98>)
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	f107 0110 	add.w	r1, r7, #16
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	f7fe f8a6 	bl	8002cc0 <xQueueGenericSendFromISR>
 8004b74:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3728      	adds	r7, #40	@ 0x28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000dec 	.word	0x20000dec

08004b84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b8e:	4b23      	ldr	r3, [pc, #140]	@ (8004c1c <prvProcessExpiredTimer+0x98>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fd fdaf 	bl	8002700 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d023      	beq.n	8004bf8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	699a      	ldr	r2, [r3, #24]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	18d1      	adds	r1, r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	6978      	ldr	r0, [r7, #20]
 8004bbe:	f000 f8d3 	bl	8004d68 <prvInsertTimerInActiveList>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d020      	beq.n	8004c0a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bc8:	2300      	movs	r3, #0
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	6978      	ldr	r0, [r7, #20]
 8004bd4:	f7ff ff88 	bl	8004ae8 <xTimerGenericCommand>
 8004bd8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d114      	bne.n	8004c0a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	60fb      	str	r3, [r7, #12]
}
 8004bf2:	bf00      	nop
 8004bf4:	bf00      	nop
 8004bf6:	e7fd      	b.n	8004bf4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	6978      	ldr	r0, [r7, #20]
 8004c10:	4798      	blx	r3
}
 8004c12:	bf00      	nop
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000de4 	.word	0x20000de4

08004c20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c28:	f107 0308 	add.w	r3, r7, #8
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 f859 	bl	8004ce4 <prvGetNextExpireTime>
 8004c32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4619      	mov	r1, r3
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f805 	bl	8004c48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c3e:	f000 f8d5 	bl	8004dec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c42:	bf00      	nop
 8004c44:	e7f0      	b.n	8004c28 <prvTimerTask+0x8>
	...

08004c48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004c52:	f7ff f80d 	bl	8003c70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c56:	f107 0308 	add.w	r3, r7, #8
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 f864 	bl	8004d28 <prvSampleTimeNow>
 8004c60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d130      	bne.n	8004cca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10a      	bne.n	8004c84 <prvProcessTimerOrBlockTask+0x3c>
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d806      	bhi.n	8004c84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c76:	f7ff f809 	bl	8003c8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff ff81 	bl	8004b84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c82:	e024      	b.n	8004cce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d008      	beq.n	8004c9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c8a:	4b13      	ldr	r3, [pc, #76]	@ (8004cd8 <prvProcessTimerOrBlockTask+0x90>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <prvProcessTimerOrBlockTask+0x50>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <prvProcessTimerOrBlockTask+0x52>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004cdc <prvProcessTimerOrBlockTask+0x94>)
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	4619      	mov	r1, r3
 8004caa:	f7fe fd49 	bl	8003740 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004cae:	f7fe ffed 	bl	8003c8c <xTaskResumeAll>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004cb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ce0 <prvProcessTimerOrBlockTask+0x98>)
 8004cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	f3bf 8f6f 	isb	sy
}
 8004cc8:	e001      	b.n	8004cce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004cca:	f7fe ffdf 	bl	8003c8c <xTaskResumeAll>
}
 8004cce:	bf00      	nop
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000de8 	.word	0x20000de8
 8004cdc:	20000dec 	.word	0x20000dec
 8004ce0:	e000ed04 	.word	0xe000ed04

08004ce4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004cec:	4b0d      	ldr	r3, [pc, #52]	@ (8004d24 <prvGetNextExpireTime+0x40>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <prvGetNextExpireTime+0x16>
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	e000      	b.n	8004cfc <prvGetNextExpireTime+0x18>
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d105      	bne.n	8004d14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d08:	4b06      	ldr	r3, [pc, #24]	@ (8004d24 <prvGetNextExpireTime+0x40>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	e001      	b.n	8004d18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d18:	68fb      	ldr	r3, [r7, #12]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bc80      	pop	{r7}
 8004d22:	4770      	bx	lr
 8004d24:	20000de4 	.word	0x20000de4

08004d28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d30:	f7ff f84a 	bl	8003dc8 <xTaskGetTickCount>
 8004d34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d36:	4b0b      	ldr	r3, [pc, #44]	@ (8004d64 <prvSampleTimeNow+0x3c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d205      	bcs.n	8004d4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004d40:	f000 f93a 	bl	8004fb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	e002      	b.n	8004d52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004d52:	4a04      	ldr	r2, [pc, #16]	@ (8004d64 <prvSampleTimeNow+0x3c>)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004d58:	68fb      	ldr	r3, [r7, #12]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20000df4 	.word	0x20000df4

08004d68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d812      	bhi.n	8004db4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	1ad2      	subs	r2, r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d302      	bcc.n	8004da2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	e01b      	b.n	8004dda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004da2:	4b10      	ldr	r3, [pc, #64]	@ (8004de4 <prvInsertTimerInActiveList+0x7c>)
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3304      	adds	r3, #4
 8004daa:	4619      	mov	r1, r3
 8004dac:	4610      	mov	r0, r2
 8004dae:	f7fd fc6f 	bl	8002690 <vListInsert>
 8004db2:	e012      	b.n	8004dda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d206      	bcs.n	8004dca <prvInsertTimerInActiveList+0x62>
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d302      	bcc.n	8004dca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	e007      	b.n	8004dda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dca:	4b07      	ldr	r3, [pc, #28]	@ (8004de8 <prvInsertTimerInActiveList+0x80>)
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	f7fd fc5b 	bl	8002690 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004dda:	697b      	ldr	r3, [r7, #20]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20000de8 	.word	0x20000de8
 8004de8:	20000de4 	.word	0x20000de4

08004dec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08e      	sub	sp, #56	@ 0x38
 8004df0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004df2:	e0ce      	b.n	8004f92 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	da19      	bge.n	8004e2e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004dfa:	1d3b      	adds	r3, r7, #4
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10b      	bne.n	8004e1e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	61fb      	str	r3, [r7, #28]
}
 8004e18:	bf00      	nop
 8004e1a:	bf00      	nop
 8004e1c:	e7fd      	b.n	8004e1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e24:	6850      	ldr	r0, [r2, #4]
 8004e26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e28:	6892      	ldr	r2, [r2, #8]
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f2c0 80ae 	blt.w	8004f92 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d004      	beq.n	8004e4c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e44:	3304      	adds	r3, #4
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fd fc5a 	bl	8002700 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e4c:	463b      	mov	r3, r7
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff ff6a 	bl	8004d28 <prvSampleTimeNow>
 8004e54:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b09      	cmp	r3, #9
 8004e5a:	f200 8097 	bhi.w	8004f8c <prvProcessReceivedCommands+0x1a0>
 8004e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e64 <prvProcessReceivedCommands+0x78>)
 8004e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e64:	08004e8d 	.word	0x08004e8d
 8004e68:	08004e8d 	.word	0x08004e8d
 8004e6c:	08004e8d 	.word	0x08004e8d
 8004e70:	08004f03 	.word	0x08004f03
 8004e74:	08004f17 	.word	0x08004f17
 8004e78:	08004f63 	.word	0x08004f63
 8004e7c:	08004e8d 	.word	0x08004e8d
 8004e80:	08004e8d 	.word	0x08004e8d
 8004e84:	08004f03 	.word	0x08004f03
 8004e88:	08004f17 	.word	0x08004f17
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	18d1      	adds	r1, r2, r3
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004eac:	f7ff ff5c 	bl	8004d68 <prvInsertTimerInActiveList>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d06c      	beq.n	8004f90 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ebc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d061      	beq.n	8004f90 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	441a      	add	r2, r3
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	2100      	movs	r1, #0
 8004edc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ede:	f7ff fe03 	bl	8004ae8 <xTimerGenericCommand>
 8004ee2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d152      	bne.n	8004f90 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	61bb      	str	r3, [r7, #24]
}
 8004efc:	bf00      	nop
 8004efe:	bf00      	nop
 8004f00:	e7fd      	b.n	8004efe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f08:	f023 0301 	bic.w	r3, r3, #1
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f10:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004f14:	e03d      	b.n	8004f92 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f1c:	f043 0301 	orr.w	r3, r3, #1
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10b      	bne.n	8004f4e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	617b      	str	r3, [r7, #20]
}
 8004f48:	bf00      	nop
 8004f4a:	bf00      	nop
 8004f4c:	e7fd      	b.n	8004f4a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	18d1      	adds	r1, r2, r3
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f5c:	f7ff ff04 	bl	8004d68 <prvInsertTimerInActiveList>
					break;
 8004f60:	e017      	b.n	8004f92 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d103      	bne.n	8004f78 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004f70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f72:	f000 fb8b 	bl	800568c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f76:	e00c      	b.n	8004f92 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f7e:	f023 0301 	bic.w	r3, r3, #1
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004f8a:	e002      	b.n	8004f92 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004f8c:	bf00      	nop
 8004f8e:	e000      	b.n	8004f92 <prvProcessReceivedCommands+0x1a6>
					break;
 8004f90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f92:	4b08      	ldr	r3, [pc, #32]	@ (8004fb4 <prvProcessReceivedCommands+0x1c8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	1d39      	adds	r1, r7, #4
 8004f98:	2200      	movs	r2, #0
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fd ffbe 	bl	8002f1c <xQueueReceive>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f47f af26 	bne.w	8004df4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004fa8:	bf00      	nop
 8004faa:	bf00      	nop
 8004fac:	3730      	adds	r7, #48	@ 0x30
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000dec 	.word	0x20000dec

08004fb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fbe:	e049      	b.n	8005054 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800507c <prvSwitchTimerLists+0xc4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fca:	4b2c      	ldr	r3, [pc, #176]	@ (800507c <prvSwitchTimerLists+0xc4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fd fb91 	bl	8002700 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d02f      	beq.n	8005054 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	429a      	cmp	r2, r3
 8005004:	d90e      	bls.n	8005024 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005012:	4b1a      	ldr	r3, [pc, #104]	@ (800507c <prvSwitchTimerLists+0xc4>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3304      	adds	r3, #4
 800501a:	4619      	mov	r1, r3
 800501c:	4610      	mov	r0, r2
 800501e:	f7fd fb37 	bl	8002690 <vListInsert>
 8005022:	e017      	b.n	8005054 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005024:	2300      	movs	r3, #0
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	2300      	movs	r3, #0
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	2100      	movs	r1, #0
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff fd5a 	bl	8004ae8 <xTimerGenericCommand>
 8005034:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10b      	bne.n	8005054 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	603b      	str	r3, [r7, #0]
}
 800504e:	bf00      	nop
 8005050:	bf00      	nop
 8005052:	e7fd      	b.n	8005050 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005054:	4b09      	ldr	r3, [pc, #36]	@ (800507c <prvSwitchTimerLists+0xc4>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1b0      	bne.n	8004fc0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800505e:	4b07      	ldr	r3, [pc, #28]	@ (800507c <prvSwitchTimerLists+0xc4>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005064:	4b06      	ldr	r3, [pc, #24]	@ (8005080 <prvSwitchTimerLists+0xc8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a04      	ldr	r2, [pc, #16]	@ (800507c <prvSwitchTimerLists+0xc4>)
 800506a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800506c:	4a04      	ldr	r2, [pc, #16]	@ (8005080 <prvSwitchTimerLists+0xc8>)
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	6013      	str	r3, [r2, #0]
}
 8005072:	bf00      	nop
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20000de4 	.word	0x20000de4
 8005080:	20000de8 	.word	0x20000de8

08005084 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800508a:	f000 f92f 	bl	80052ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800508e:	4b15      	ldr	r3, [pc, #84]	@ (80050e4 <prvCheckForValidListAndQueue+0x60>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d120      	bne.n	80050d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005096:	4814      	ldr	r0, [pc, #80]	@ (80050e8 <prvCheckForValidListAndQueue+0x64>)
 8005098:	f7fd faac 	bl	80025f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800509c:	4813      	ldr	r0, [pc, #76]	@ (80050ec <prvCheckForValidListAndQueue+0x68>)
 800509e:	f7fd faa9 	bl	80025f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80050a2:	4b13      	ldr	r3, [pc, #76]	@ (80050f0 <prvCheckForValidListAndQueue+0x6c>)
 80050a4:	4a10      	ldr	r2, [pc, #64]	@ (80050e8 <prvCheckForValidListAndQueue+0x64>)
 80050a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80050a8:	4b12      	ldr	r3, [pc, #72]	@ (80050f4 <prvCheckForValidListAndQueue+0x70>)
 80050aa:	4a10      	ldr	r2, [pc, #64]	@ (80050ec <prvCheckForValidListAndQueue+0x68>)
 80050ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80050ae:	2300      	movs	r3, #0
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	4b11      	ldr	r3, [pc, #68]	@ (80050f8 <prvCheckForValidListAndQueue+0x74>)
 80050b4:	4a11      	ldr	r2, [pc, #68]	@ (80050fc <prvCheckForValidListAndQueue+0x78>)
 80050b6:	2110      	movs	r1, #16
 80050b8:	200a      	movs	r0, #10
 80050ba:	f7fd fbb5 	bl	8002828 <xQueueGenericCreateStatic>
 80050be:	4603      	mov	r3, r0
 80050c0:	4a08      	ldr	r2, [pc, #32]	@ (80050e4 <prvCheckForValidListAndQueue+0x60>)
 80050c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80050c4:	4b07      	ldr	r3, [pc, #28]	@ (80050e4 <prvCheckForValidListAndQueue+0x60>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050cc:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <prvCheckForValidListAndQueue+0x60>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	490b      	ldr	r1, [pc, #44]	@ (8005100 <prvCheckForValidListAndQueue+0x7c>)
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fe fae2 	bl	800369c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050d8:	f000 f938 	bl	800534c <vPortExitCritical>
}
 80050dc:	bf00      	nop
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	20000dec 	.word	0x20000dec
 80050e8:	20000dbc 	.word	0x20000dbc
 80050ec:	20000dd0 	.word	0x20000dd0
 80050f0:	20000de4 	.word	0x20000de4
 80050f4:	20000de8 	.word	0x20000de8
 80050f8:	20000e98 	.word	0x20000e98
 80050fc:	20000df8 	.word	0x20000df8
 8005100:	08006488 	.word	0x08006488

08005104 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	3b04      	subs	r3, #4
 8005114:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800511c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3b04      	subs	r3, #4
 8005122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f023 0201 	bic.w	r2, r3, #1
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3b04      	subs	r3, #4
 8005132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005134:	4a08      	ldr	r2, [pc, #32]	@ (8005158 <pxPortInitialiseStack+0x54>)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3b14      	subs	r3, #20
 800513e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	3b20      	subs	r3, #32
 800514a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800514c:	68fb      	ldr	r3, [r7, #12]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr
 8005158:	0800515d 	.word	0x0800515d

0800515c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005162:	2300      	movs	r3, #0
 8005164:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005166:	4b12      	ldr	r3, [pc, #72]	@ (80051b0 <prvTaskExitError+0x54>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516e:	d00b      	beq.n	8005188 <prvTaskExitError+0x2c>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	60fb      	str	r3, [r7, #12]
}
 8005182:	bf00      	nop
 8005184:	bf00      	nop
 8005186:	e7fd      	b.n	8005184 <prvTaskExitError+0x28>
	__asm volatile
 8005188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	60bb      	str	r3, [r7, #8]
}
 800519a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800519c:	bf00      	nop
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0fc      	beq.n	800519e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc80      	pop	{r7}
 80051ae:	4770      	bx	lr
 80051b0:	2000000c 	.word	0x2000000c
	...

080051c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051c0:	4b07      	ldr	r3, [pc, #28]	@ (80051e0 <pxCurrentTCBConst2>)
 80051c2:	6819      	ldr	r1, [r3, #0]
 80051c4:	6808      	ldr	r0, [r1, #0]
 80051c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051ca:	f380 8809 	msr	PSP, r0
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f04f 0000 	mov.w	r0, #0
 80051d6:	f380 8811 	msr	BASEPRI, r0
 80051da:	f04e 0e0d 	orr.w	lr, lr, #13
 80051de:	4770      	bx	lr

080051e0 <pxCurrentTCBConst2>:
 80051e0:	200008bc 	.word	0x200008bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051e4:	bf00      	nop
 80051e6:	bf00      	nop

080051e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80051e8:	4806      	ldr	r0, [pc, #24]	@ (8005204 <prvPortStartFirstTask+0x1c>)
 80051ea:	6800      	ldr	r0, [r0, #0]
 80051ec:	6800      	ldr	r0, [r0, #0]
 80051ee:	f380 8808 	msr	MSP, r0
 80051f2:	b662      	cpsie	i
 80051f4:	b661      	cpsie	f
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	df00      	svc	0
 8005200:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005202:	bf00      	nop
 8005204:	e000ed08 	.word	0xe000ed08

08005208 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800520e:	4b32      	ldr	r3, [pc, #200]	@ (80052d8 <xPortStartScheduler+0xd0>)
 8005210:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	22ff      	movs	r2, #255	@ 0xff
 800521e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	b2db      	uxtb	r3, r3
 800522c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005230:	b2da      	uxtb	r2, r3
 8005232:	4b2a      	ldr	r3, [pc, #168]	@ (80052dc <xPortStartScheduler+0xd4>)
 8005234:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005236:	4b2a      	ldr	r3, [pc, #168]	@ (80052e0 <xPortStartScheduler+0xd8>)
 8005238:	2207      	movs	r2, #7
 800523a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800523c:	e009      	b.n	8005252 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800523e:	4b28      	ldr	r3, [pc, #160]	@ (80052e0 <xPortStartScheduler+0xd8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3b01      	subs	r3, #1
 8005244:	4a26      	ldr	r2, [pc, #152]	@ (80052e0 <xPortStartScheduler+0xd8>)
 8005246:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	b2db      	uxtb	r3, r3
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	b2db      	uxtb	r3, r3
 8005250:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005252:	78fb      	ldrb	r3, [r7, #3]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800525a:	2b80      	cmp	r3, #128	@ 0x80
 800525c:	d0ef      	beq.n	800523e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800525e:	4b20      	ldr	r3, [pc, #128]	@ (80052e0 <xPortStartScheduler+0xd8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f1c3 0307 	rsb	r3, r3, #7
 8005266:	2b04      	cmp	r3, #4
 8005268:	d00b      	beq.n	8005282 <xPortStartScheduler+0x7a>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	60bb      	str	r3, [r7, #8]
}
 800527c:	bf00      	nop
 800527e:	bf00      	nop
 8005280:	e7fd      	b.n	800527e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005282:	4b17      	ldr	r3, [pc, #92]	@ (80052e0 <xPortStartScheduler+0xd8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	4a15      	ldr	r2, [pc, #84]	@ (80052e0 <xPortStartScheduler+0xd8>)
 800528a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800528c:	4b14      	ldr	r3, [pc, #80]	@ (80052e0 <xPortStartScheduler+0xd8>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005294:	4a12      	ldr	r2, [pc, #72]	@ (80052e0 <xPortStartScheduler+0xd8>)
 8005296:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	b2da      	uxtb	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052a0:	4b10      	ldr	r3, [pc, #64]	@ (80052e4 <xPortStartScheduler+0xdc>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a0f      	ldr	r2, [pc, #60]	@ (80052e4 <xPortStartScheduler+0xdc>)
 80052a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052ac:	4b0d      	ldr	r3, [pc, #52]	@ (80052e4 <xPortStartScheduler+0xdc>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a0c      	ldr	r2, [pc, #48]	@ (80052e4 <xPortStartScheduler+0xdc>)
 80052b2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80052b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80052b8:	f000 f8b8 	bl	800542c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052bc:	4b0a      	ldr	r3, [pc, #40]	@ (80052e8 <xPortStartScheduler+0xe0>)
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052c2:	f7ff ff91 	bl	80051e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80052c6:	f7fe fe59 	bl	8003f7c <vTaskSwitchContext>
	prvTaskExitError();
 80052ca:	f7ff ff47 	bl	800515c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	e000e400 	.word	0xe000e400
 80052dc:	20000ee8 	.word	0x20000ee8
 80052e0:	20000eec 	.word	0x20000eec
 80052e4:	e000ed20 	.word	0xe000ed20
 80052e8:	2000000c 	.word	0x2000000c

080052ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
	__asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	607b      	str	r3, [r7, #4]
}
 8005304:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005306:	4b0f      	ldr	r3, [pc, #60]	@ (8005344 <vPortEnterCritical+0x58>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3301      	adds	r3, #1
 800530c:	4a0d      	ldr	r2, [pc, #52]	@ (8005344 <vPortEnterCritical+0x58>)
 800530e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005310:	4b0c      	ldr	r3, [pc, #48]	@ (8005344 <vPortEnterCritical+0x58>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d110      	bne.n	800533a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005318:	4b0b      	ldr	r3, [pc, #44]	@ (8005348 <vPortEnterCritical+0x5c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00b      	beq.n	800533a <vPortEnterCritical+0x4e>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	603b      	str	r3, [r7, #0]
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	e7fd      	b.n	8005336 <vPortEnterCritical+0x4a>
	}
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr
 8005344:	2000000c 	.word	0x2000000c
 8005348:	e000ed04 	.word	0xe000ed04

0800534c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005352:	4b12      	ldr	r3, [pc, #72]	@ (800539c <vPortExitCritical+0x50>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10b      	bne.n	8005372 <vPortExitCritical+0x26>
	__asm volatile
 800535a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800535e:	f383 8811 	msr	BASEPRI, r3
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	607b      	str	r3, [r7, #4]
}
 800536c:	bf00      	nop
 800536e:	bf00      	nop
 8005370:	e7fd      	b.n	800536e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005372:	4b0a      	ldr	r3, [pc, #40]	@ (800539c <vPortExitCritical+0x50>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3b01      	subs	r3, #1
 8005378:	4a08      	ldr	r2, [pc, #32]	@ (800539c <vPortExitCritical+0x50>)
 800537a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800537c:	4b07      	ldr	r3, [pc, #28]	@ (800539c <vPortExitCritical+0x50>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d105      	bne.n	8005390 <vPortExitCritical+0x44>
 8005384:	2300      	movs	r3, #0
 8005386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	f383 8811 	msr	BASEPRI, r3
}
 800538e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	2000000c 	.word	0x2000000c

080053a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053a0:	f3ef 8009 	mrs	r0, PSP
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	4b0d      	ldr	r3, [pc, #52]	@ (80053e0 <pxCurrentTCBConst>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053b0:	6010      	str	r0, [r2, #0]
 80053b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80053b6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80053ba:	f380 8811 	msr	BASEPRI, r0
 80053be:	f7fe fddd 	bl	8003f7c <vTaskSwitchContext>
 80053c2:	f04f 0000 	mov.w	r0, #0
 80053c6:	f380 8811 	msr	BASEPRI, r0
 80053ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80053ce:	6819      	ldr	r1, [r3, #0]
 80053d0:	6808      	ldr	r0, [r1, #0]
 80053d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053d6:	f380 8809 	msr	PSP, r0
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	4770      	bx	lr

080053e0 <pxCurrentTCBConst>:
 80053e0:	200008bc 	.word	0x200008bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop

080053e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
	__asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	607b      	str	r3, [r7, #4]
}
 8005400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005402:	f7fe fd01 	bl	8003e08 <xTaskIncrementTick>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800540c:	4b06      	ldr	r3, [pc, #24]	@ (8005428 <xPortSysTickHandler+0x40>)
 800540e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	2300      	movs	r3, #0
 8005416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	f383 8811 	msr	BASEPRI, r3
}
 800541e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	e000ed04 	.word	0xe000ed04

0800542c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005430:	4b0a      	ldr	r3, [pc, #40]	@ (800545c <vPortSetupTimerInterrupt+0x30>)
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005436:	4b0a      	ldr	r3, [pc, #40]	@ (8005460 <vPortSetupTimerInterrupt+0x34>)
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800543c:	4b09      	ldr	r3, [pc, #36]	@ (8005464 <vPortSetupTimerInterrupt+0x38>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a09      	ldr	r2, [pc, #36]	@ (8005468 <vPortSetupTimerInterrupt+0x3c>)
 8005442:	fba2 2303 	umull	r2, r3, r2, r3
 8005446:	099b      	lsrs	r3, r3, #6
 8005448:	4a08      	ldr	r2, [pc, #32]	@ (800546c <vPortSetupTimerInterrupt+0x40>)
 800544a:	3b01      	subs	r3, #1
 800544c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800544e:	4b03      	ldr	r3, [pc, #12]	@ (800545c <vPortSetupTimerInterrupt+0x30>)
 8005450:	2207      	movs	r2, #7
 8005452:	601a      	str	r2, [r3, #0]
}
 8005454:	bf00      	nop
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr
 800545c:	e000e010 	.word	0xe000e010
 8005460:	e000e018 	.word	0xe000e018
 8005464:	20000000 	.word	0x20000000
 8005468:	10624dd3 	.word	0x10624dd3
 800546c:	e000e014 	.word	0xe000e014

08005470 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005476:	f3ef 8305 	mrs	r3, IPSR
 800547a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2b0f      	cmp	r3, #15
 8005480:	d915      	bls.n	80054ae <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005482:	4a17      	ldr	r2, [pc, #92]	@ (80054e0 <vPortValidateInterruptPriority+0x70>)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800548c:	4b15      	ldr	r3, [pc, #84]	@ (80054e4 <vPortValidateInterruptPriority+0x74>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	7afa      	ldrb	r2, [r7, #11]
 8005492:	429a      	cmp	r2, r3
 8005494:	d20b      	bcs.n	80054ae <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	607b      	str	r3, [r7, #4]
}
 80054a8:	bf00      	nop
 80054aa:	bf00      	nop
 80054ac:	e7fd      	b.n	80054aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054ae:	4b0e      	ldr	r3, [pc, #56]	@ (80054e8 <vPortValidateInterruptPriority+0x78>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80054b6:	4b0d      	ldr	r3, [pc, #52]	@ (80054ec <vPortValidateInterruptPriority+0x7c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d90b      	bls.n	80054d6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	603b      	str	r3, [r7, #0]
}
 80054d0:	bf00      	nop
 80054d2:	bf00      	nop
 80054d4:	e7fd      	b.n	80054d2 <vPortValidateInterruptPriority+0x62>
	}
 80054d6:	bf00      	nop
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr
 80054e0:	e000e3f0 	.word	0xe000e3f0
 80054e4:	20000ee8 	.word	0x20000ee8
 80054e8:	e000ed0c 	.word	0xe000ed0c
 80054ec:	20000eec 	.word	0x20000eec

080054f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08a      	sub	sp, #40	@ 0x28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054fc:	f7fe fbb8 	bl	8003c70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005500:	4b5c      	ldr	r3, [pc, #368]	@ (8005674 <pvPortMalloc+0x184>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005508:	f000 f924 	bl	8005754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800550c:	4b5a      	ldr	r3, [pc, #360]	@ (8005678 <pvPortMalloc+0x188>)
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4013      	ands	r3, r2
 8005514:	2b00      	cmp	r3, #0
 8005516:	f040 8095 	bne.w	8005644 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01e      	beq.n	800555e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005520:	2208      	movs	r2, #8
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4413      	add	r3, r2
 8005526:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	2b00      	cmp	r3, #0
 8005530:	d015      	beq.n	800555e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f023 0307 	bic.w	r3, r3, #7
 8005538:	3308      	adds	r3, #8
 800553a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00b      	beq.n	800555e <pvPortMalloc+0x6e>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	617b      	str	r3, [r7, #20]
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	e7fd      	b.n	800555a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d06f      	beq.n	8005644 <pvPortMalloc+0x154>
 8005564:	4b45      	ldr	r3, [pc, #276]	@ (800567c <pvPortMalloc+0x18c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	429a      	cmp	r2, r3
 800556c:	d86a      	bhi.n	8005644 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800556e:	4b44      	ldr	r3, [pc, #272]	@ (8005680 <pvPortMalloc+0x190>)
 8005570:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005572:	4b43      	ldr	r3, [pc, #268]	@ (8005680 <pvPortMalloc+0x190>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005578:	e004      	b.n	8005584 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	429a      	cmp	r2, r3
 800558c:	d903      	bls.n	8005596 <pvPortMalloc+0xa6>
 800558e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f1      	bne.n	800557a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005596:	4b37      	ldr	r3, [pc, #220]	@ (8005674 <pvPortMalloc+0x184>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800559c:	429a      	cmp	r2, r3
 800559e:	d051      	beq.n	8005644 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2208      	movs	r2, #8
 80055a6:	4413      	add	r3, r2
 80055a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	1ad2      	subs	r2, r2, r3
 80055ba:	2308      	movs	r3, #8
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	429a      	cmp	r2, r3
 80055c0:	d920      	bls.n	8005604 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4413      	add	r3, r2
 80055c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00b      	beq.n	80055ec <pvPortMalloc+0xfc>
	__asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	613b      	str	r3, [r7, #16]
}
 80055e6:	bf00      	nop
 80055e8:	bf00      	nop
 80055ea:	e7fd      	b.n	80055e8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	1ad2      	subs	r2, r2, r3
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055fe:	69b8      	ldr	r0, [r7, #24]
 8005600:	f000 f90a 	bl	8005818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005604:	4b1d      	ldr	r3, [pc, #116]	@ (800567c <pvPortMalloc+0x18c>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	4a1b      	ldr	r2, [pc, #108]	@ (800567c <pvPortMalloc+0x18c>)
 8005610:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005612:	4b1a      	ldr	r3, [pc, #104]	@ (800567c <pvPortMalloc+0x18c>)
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	4b1b      	ldr	r3, [pc, #108]	@ (8005684 <pvPortMalloc+0x194>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d203      	bcs.n	8005626 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800561e:	4b17      	ldr	r3, [pc, #92]	@ (800567c <pvPortMalloc+0x18c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a18      	ldr	r2, [pc, #96]	@ (8005684 <pvPortMalloc+0x194>)
 8005624:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	4b13      	ldr	r3, [pc, #76]	@ (8005678 <pvPortMalloc+0x188>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	431a      	orrs	r2, r3
 8005630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005632:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800563a:	4b13      	ldr	r3, [pc, #76]	@ (8005688 <pvPortMalloc+0x198>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3301      	adds	r3, #1
 8005640:	4a11      	ldr	r2, [pc, #68]	@ (8005688 <pvPortMalloc+0x198>)
 8005642:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005644:	f7fe fb22 	bl	8003c8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	f003 0307 	and.w	r3, r3, #7
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00b      	beq.n	800566a <pvPortMalloc+0x17a>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	60fb      	str	r3, [r7, #12]
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop
 8005668:	e7fd      	b.n	8005666 <pvPortMalloc+0x176>
	return pvReturn;
 800566a:	69fb      	ldr	r3, [r7, #28]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3728      	adds	r7, #40	@ 0x28
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	20001af8 	.word	0x20001af8
 8005678:	20001b0c 	.word	0x20001b0c
 800567c:	20001afc 	.word	0x20001afc
 8005680:	20001af0 	.word	0x20001af0
 8005684:	20001b00 	.word	0x20001b00
 8005688:	20001b04 	.word	0x20001b04

0800568c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d04f      	beq.n	800573e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800569e:	2308      	movs	r3, #8
 80056a0:	425b      	negs	r3, r3
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4413      	add	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	4b25      	ldr	r3, [pc, #148]	@ (8005748 <vPortFree+0xbc>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4013      	ands	r3, r2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10b      	bne.n	80056d2 <vPortFree+0x46>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	60fb      	str	r3, [r7, #12]
}
 80056cc:	bf00      	nop
 80056ce:	bf00      	nop
 80056d0:	e7fd      	b.n	80056ce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00b      	beq.n	80056f2 <vPortFree+0x66>
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	60bb      	str	r3, [r7, #8]
}
 80056ec:	bf00      	nop
 80056ee:	bf00      	nop
 80056f0:	e7fd      	b.n	80056ee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	4b14      	ldr	r3, [pc, #80]	@ (8005748 <vPortFree+0xbc>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4013      	ands	r3, r2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01e      	beq.n	800573e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d11a      	bne.n	800573e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	4b0e      	ldr	r3, [pc, #56]	@ (8005748 <vPortFree+0xbc>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	43db      	mvns	r3, r3
 8005712:	401a      	ands	r2, r3
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005718:	f7fe faaa 	bl	8003c70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	4b0a      	ldr	r3, [pc, #40]	@ (800574c <vPortFree+0xc0>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4413      	add	r3, r2
 8005726:	4a09      	ldr	r2, [pc, #36]	@ (800574c <vPortFree+0xc0>)
 8005728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800572a:	6938      	ldr	r0, [r7, #16]
 800572c:	f000 f874 	bl	8005818 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005730:	4b07      	ldr	r3, [pc, #28]	@ (8005750 <vPortFree+0xc4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3301      	adds	r3, #1
 8005736:	4a06      	ldr	r2, [pc, #24]	@ (8005750 <vPortFree+0xc4>)
 8005738:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800573a:	f7fe faa7 	bl	8003c8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800573e:	bf00      	nop
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20001b0c 	.word	0x20001b0c
 800574c:	20001afc 	.word	0x20001afc
 8005750:	20001b08 	.word	0x20001b08

08005754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800575a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800575e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005760:	4b27      	ldr	r3, [pc, #156]	@ (8005800 <prvHeapInit+0xac>)
 8005762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00c      	beq.n	8005788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3307      	adds	r3, #7
 8005772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0307 	bic.w	r3, r3, #7
 800577a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	4a1f      	ldr	r2, [pc, #124]	@ (8005800 <prvHeapInit+0xac>)
 8005784:	4413      	add	r3, r2
 8005786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800578c:	4a1d      	ldr	r2, [pc, #116]	@ (8005804 <prvHeapInit+0xb0>)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005792:	4b1c      	ldr	r3, [pc, #112]	@ (8005804 <prvHeapInit+0xb0>)
 8005794:	2200      	movs	r2, #0
 8005796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	4413      	add	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057a0:	2208      	movs	r2, #8
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1a9b      	subs	r3, r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0307 	bic.w	r3, r3, #7
 80057ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4a15      	ldr	r2, [pc, #84]	@ (8005808 <prvHeapInit+0xb4>)
 80057b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057b6:	4b14      	ldr	r3, [pc, #80]	@ (8005808 <prvHeapInit+0xb4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2200      	movs	r2, #0
 80057bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057be:	4b12      	ldr	r3, [pc, #72]	@ (8005808 <prvHeapInit+0xb4>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	1ad2      	subs	r2, r2, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005808 <prvHeapInit+0xb4>)
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	4a0a      	ldr	r2, [pc, #40]	@ (800580c <prvHeapInit+0xb8>)
 80057e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	4a09      	ldr	r2, [pc, #36]	@ (8005810 <prvHeapInit+0xbc>)
 80057ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057ec:	4b09      	ldr	r3, [pc, #36]	@ (8005814 <prvHeapInit+0xc0>)
 80057ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80057f2:	601a      	str	r2, [r3, #0]
}
 80057f4:	bf00      	nop
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bc80      	pop	{r7}
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	20000ef0 	.word	0x20000ef0
 8005804:	20001af0 	.word	0x20001af0
 8005808:	20001af8 	.word	0x20001af8
 800580c:	20001b00 	.word	0x20001b00
 8005810:	20001afc 	.word	0x20001afc
 8005814:	20001b0c 	.word	0x20001b0c

08005818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005820:	4b27      	ldr	r3, [pc, #156]	@ (80058c0 <prvInsertBlockIntoFreeList+0xa8>)
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	e002      	b.n	800582c <prvInsertBlockIntoFreeList+0x14>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	429a      	cmp	r2, r3
 8005834:	d8f7      	bhi.n	8005826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	4413      	add	r3, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	429a      	cmp	r2, r3
 8005846:	d108      	bne.n	800585a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	441a      	add	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	441a      	add	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	429a      	cmp	r2, r3
 800586c:	d118      	bne.n	80058a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4b14      	ldr	r3, [pc, #80]	@ (80058c4 <prvInsertBlockIntoFreeList+0xac>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d00d      	beq.n	8005896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	441a      	add	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	e008      	b.n	80058a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005896:	4b0b      	ldr	r3, [pc, #44]	@ (80058c4 <prvInsertBlockIntoFreeList+0xac>)
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	e003      	b.n	80058a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d002      	beq.n	80058b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058b6:	bf00      	nop
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bc80      	pop	{r7}
 80058be:	4770      	bx	lr
 80058c0:	20001af0 	.word	0x20001af0
 80058c4:	20001af8 	.word	0x20001af8

080058c8 <sniprintf>:
 80058c8:	b40c      	push	{r2, r3}
 80058ca:	b530      	push	{r4, r5, lr}
 80058cc:	4b18      	ldr	r3, [pc, #96]	@ (8005930 <sniprintf+0x68>)
 80058ce:	1e0c      	subs	r4, r1, #0
 80058d0:	681d      	ldr	r5, [r3, #0]
 80058d2:	b09d      	sub	sp, #116	@ 0x74
 80058d4:	da08      	bge.n	80058e8 <sniprintf+0x20>
 80058d6:	238b      	movs	r3, #139	@ 0x8b
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295
 80058dc:	602b      	str	r3, [r5, #0]
 80058de:	b01d      	add	sp, #116	@ 0x74
 80058e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058e4:	b002      	add	sp, #8
 80058e6:	4770      	bx	lr
 80058e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80058ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80058f6:	bf0c      	ite	eq
 80058f8:	4623      	moveq	r3, r4
 80058fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80058fe:	9304      	str	r3, [sp, #16]
 8005900:	9307      	str	r3, [sp, #28]
 8005902:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005906:	9002      	str	r0, [sp, #8]
 8005908:	9006      	str	r0, [sp, #24]
 800590a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800590e:	4628      	mov	r0, r5
 8005910:	ab21      	add	r3, sp, #132	@ 0x84
 8005912:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005914:	a902      	add	r1, sp, #8
 8005916:	9301      	str	r3, [sp, #4]
 8005918:	f000 f9fe 	bl	8005d18 <_svfiprintf_r>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	bfbc      	itt	lt
 8005920:	238b      	movlt	r3, #139	@ 0x8b
 8005922:	602b      	strlt	r3, [r5, #0]
 8005924:	2c00      	cmp	r4, #0
 8005926:	d0da      	beq.n	80058de <sniprintf+0x16>
 8005928:	2200      	movs	r2, #0
 800592a:	9b02      	ldr	r3, [sp, #8]
 800592c:	701a      	strb	r2, [r3, #0]
 800592e:	e7d6      	b.n	80058de <sniprintf+0x16>
 8005930:	20000010 	.word	0x20000010

08005934 <memset>:
 8005934:	4603      	mov	r3, r0
 8005936:	4402      	add	r2, r0
 8005938:	4293      	cmp	r3, r2
 800593a:	d100      	bne.n	800593e <memset+0xa>
 800593c:	4770      	bx	lr
 800593e:	f803 1b01 	strb.w	r1, [r3], #1
 8005942:	e7f9      	b.n	8005938 <memset+0x4>

08005944 <_reclaim_reent>:
 8005944:	4b2d      	ldr	r3, [pc, #180]	@ (80059fc <_reclaim_reent+0xb8>)
 8005946:	b570      	push	{r4, r5, r6, lr}
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4604      	mov	r4, r0
 800594c:	4283      	cmp	r3, r0
 800594e:	d053      	beq.n	80059f8 <_reclaim_reent+0xb4>
 8005950:	69c3      	ldr	r3, [r0, #28]
 8005952:	b31b      	cbz	r3, 800599c <_reclaim_reent+0x58>
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	b163      	cbz	r3, 8005972 <_reclaim_reent+0x2e>
 8005958:	2500      	movs	r5, #0
 800595a:	69e3      	ldr	r3, [r4, #28]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	5959      	ldr	r1, [r3, r5]
 8005960:	b9b1      	cbnz	r1, 8005990 <_reclaim_reent+0x4c>
 8005962:	3504      	adds	r5, #4
 8005964:	2d80      	cmp	r5, #128	@ 0x80
 8005966:	d1f8      	bne.n	800595a <_reclaim_reent+0x16>
 8005968:	69e3      	ldr	r3, [r4, #28]
 800596a:	4620      	mov	r0, r4
 800596c:	68d9      	ldr	r1, [r3, #12]
 800596e:	f000 f881 	bl	8005a74 <_free_r>
 8005972:	69e3      	ldr	r3, [r4, #28]
 8005974:	6819      	ldr	r1, [r3, #0]
 8005976:	b111      	cbz	r1, 800597e <_reclaim_reent+0x3a>
 8005978:	4620      	mov	r0, r4
 800597a:	f000 f87b 	bl	8005a74 <_free_r>
 800597e:	69e3      	ldr	r3, [r4, #28]
 8005980:	689d      	ldr	r5, [r3, #8]
 8005982:	b15d      	cbz	r5, 800599c <_reclaim_reent+0x58>
 8005984:	4629      	mov	r1, r5
 8005986:	4620      	mov	r0, r4
 8005988:	682d      	ldr	r5, [r5, #0]
 800598a:	f000 f873 	bl	8005a74 <_free_r>
 800598e:	e7f8      	b.n	8005982 <_reclaim_reent+0x3e>
 8005990:	680e      	ldr	r6, [r1, #0]
 8005992:	4620      	mov	r0, r4
 8005994:	f000 f86e 	bl	8005a74 <_free_r>
 8005998:	4631      	mov	r1, r6
 800599a:	e7e1      	b.n	8005960 <_reclaim_reent+0x1c>
 800599c:	6961      	ldr	r1, [r4, #20]
 800599e:	b111      	cbz	r1, 80059a6 <_reclaim_reent+0x62>
 80059a0:	4620      	mov	r0, r4
 80059a2:	f000 f867 	bl	8005a74 <_free_r>
 80059a6:	69e1      	ldr	r1, [r4, #28]
 80059a8:	b111      	cbz	r1, 80059b0 <_reclaim_reent+0x6c>
 80059aa:	4620      	mov	r0, r4
 80059ac:	f000 f862 	bl	8005a74 <_free_r>
 80059b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80059b2:	b111      	cbz	r1, 80059ba <_reclaim_reent+0x76>
 80059b4:	4620      	mov	r0, r4
 80059b6:	f000 f85d 	bl	8005a74 <_free_r>
 80059ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059bc:	b111      	cbz	r1, 80059c4 <_reclaim_reent+0x80>
 80059be:	4620      	mov	r0, r4
 80059c0:	f000 f858 	bl	8005a74 <_free_r>
 80059c4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80059c6:	b111      	cbz	r1, 80059ce <_reclaim_reent+0x8a>
 80059c8:	4620      	mov	r0, r4
 80059ca:	f000 f853 	bl	8005a74 <_free_r>
 80059ce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80059d0:	b111      	cbz	r1, 80059d8 <_reclaim_reent+0x94>
 80059d2:	4620      	mov	r0, r4
 80059d4:	f000 f84e 	bl	8005a74 <_free_r>
 80059d8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80059da:	b111      	cbz	r1, 80059e2 <_reclaim_reent+0x9e>
 80059dc:	4620      	mov	r0, r4
 80059de:	f000 f849 	bl	8005a74 <_free_r>
 80059e2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80059e4:	b111      	cbz	r1, 80059ec <_reclaim_reent+0xa8>
 80059e6:	4620      	mov	r0, r4
 80059e8:	f000 f844 	bl	8005a74 <_free_r>
 80059ec:	6a23      	ldr	r3, [r4, #32]
 80059ee:	b11b      	cbz	r3, 80059f8 <_reclaim_reent+0xb4>
 80059f0:	4620      	mov	r0, r4
 80059f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80059f6:	4718      	bx	r3
 80059f8:	bd70      	pop	{r4, r5, r6, pc}
 80059fa:	bf00      	nop
 80059fc:	20000010 	.word	0x20000010

08005a00 <__errno>:
 8005a00:	4b01      	ldr	r3, [pc, #4]	@ (8005a08 <__errno+0x8>)
 8005a02:	6818      	ldr	r0, [r3, #0]
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	20000010 	.word	0x20000010

08005a0c <__libc_init_array>:
 8005a0c:	b570      	push	{r4, r5, r6, lr}
 8005a0e:	2600      	movs	r6, #0
 8005a10:	4d0c      	ldr	r5, [pc, #48]	@ (8005a44 <__libc_init_array+0x38>)
 8005a12:	4c0d      	ldr	r4, [pc, #52]	@ (8005a48 <__libc_init_array+0x3c>)
 8005a14:	1b64      	subs	r4, r4, r5
 8005a16:	10a4      	asrs	r4, r4, #2
 8005a18:	42a6      	cmp	r6, r4
 8005a1a:	d109      	bne.n	8005a30 <__libc_init_array+0x24>
 8005a1c:	f000 fc76 	bl	800630c <_init>
 8005a20:	2600      	movs	r6, #0
 8005a22:	4d0a      	ldr	r5, [pc, #40]	@ (8005a4c <__libc_init_array+0x40>)
 8005a24:	4c0a      	ldr	r4, [pc, #40]	@ (8005a50 <__libc_init_array+0x44>)
 8005a26:	1b64      	subs	r4, r4, r5
 8005a28:	10a4      	asrs	r4, r4, #2
 8005a2a:	42a6      	cmp	r6, r4
 8005a2c:	d105      	bne.n	8005a3a <__libc_init_array+0x2e>
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
 8005a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a34:	4798      	blx	r3
 8005a36:	3601      	adds	r6, #1
 8005a38:	e7ee      	b.n	8005a18 <__libc_init_array+0xc>
 8005a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a3e:	4798      	blx	r3
 8005a40:	3601      	adds	r6, #1
 8005a42:	e7f2      	b.n	8005a2a <__libc_init_array+0x1e>
 8005a44:	08006598 	.word	0x08006598
 8005a48:	08006598 	.word	0x08006598
 8005a4c:	08006598 	.word	0x08006598
 8005a50:	0800659c 	.word	0x0800659c

08005a54 <__retarget_lock_acquire_recursive>:
 8005a54:	4770      	bx	lr

08005a56 <__retarget_lock_release_recursive>:
 8005a56:	4770      	bx	lr

08005a58 <memcpy>:
 8005a58:	440a      	add	r2, r1
 8005a5a:	4291      	cmp	r1, r2
 8005a5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a60:	d100      	bne.n	8005a64 <memcpy+0xc>
 8005a62:	4770      	bx	lr
 8005a64:	b510      	push	{r4, lr}
 8005a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a6a:	4291      	cmp	r1, r2
 8005a6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a70:	d1f9      	bne.n	8005a66 <memcpy+0xe>
 8005a72:	bd10      	pop	{r4, pc}

08005a74 <_free_r>:
 8005a74:	b538      	push	{r3, r4, r5, lr}
 8005a76:	4605      	mov	r5, r0
 8005a78:	2900      	cmp	r1, #0
 8005a7a:	d040      	beq.n	8005afe <_free_r+0x8a>
 8005a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a80:	1f0c      	subs	r4, r1, #4
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	bfb8      	it	lt
 8005a86:	18e4      	addlt	r4, r4, r3
 8005a88:	f000 f8de 	bl	8005c48 <__malloc_lock>
 8005a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005b00 <_free_r+0x8c>)
 8005a8e:	6813      	ldr	r3, [r2, #0]
 8005a90:	b933      	cbnz	r3, 8005aa0 <_free_r+0x2c>
 8005a92:	6063      	str	r3, [r4, #4]
 8005a94:	6014      	str	r4, [r2, #0]
 8005a96:	4628      	mov	r0, r5
 8005a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a9c:	f000 b8da 	b.w	8005c54 <__malloc_unlock>
 8005aa0:	42a3      	cmp	r3, r4
 8005aa2:	d908      	bls.n	8005ab6 <_free_r+0x42>
 8005aa4:	6820      	ldr	r0, [r4, #0]
 8005aa6:	1821      	adds	r1, r4, r0
 8005aa8:	428b      	cmp	r3, r1
 8005aaa:	bf01      	itttt	eq
 8005aac:	6819      	ldreq	r1, [r3, #0]
 8005aae:	685b      	ldreq	r3, [r3, #4]
 8005ab0:	1809      	addeq	r1, r1, r0
 8005ab2:	6021      	streq	r1, [r4, #0]
 8005ab4:	e7ed      	b.n	8005a92 <_free_r+0x1e>
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	b10b      	cbz	r3, 8005ac0 <_free_r+0x4c>
 8005abc:	42a3      	cmp	r3, r4
 8005abe:	d9fa      	bls.n	8005ab6 <_free_r+0x42>
 8005ac0:	6811      	ldr	r1, [r2, #0]
 8005ac2:	1850      	adds	r0, r2, r1
 8005ac4:	42a0      	cmp	r0, r4
 8005ac6:	d10b      	bne.n	8005ae0 <_free_r+0x6c>
 8005ac8:	6820      	ldr	r0, [r4, #0]
 8005aca:	4401      	add	r1, r0
 8005acc:	1850      	adds	r0, r2, r1
 8005ace:	4283      	cmp	r3, r0
 8005ad0:	6011      	str	r1, [r2, #0]
 8005ad2:	d1e0      	bne.n	8005a96 <_free_r+0x22>
 8005ad4:	6818      	ldr	r0, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	4408      	add	r0, r1
 8005ada:	6010      	str	r0, [r2, #0]
 8005adc:	6053      	str	r3, [r2, #4]
 8005ade:	e7da      	b.n	8005a96 <_free_r+0x22>
 8005ae0:	d902      	bls.n	8005ae8 <_free_r+0x74>
 8005ae2:	230c      	movs	r3, #12
 8005ae4:	602b      	str	r3, [r5, #0]
 8005ae6:	e7d6      	b.n	8005a96 <_free_r+0x22>
 8005ae8:	6820      	ldr	r0, [r4, #0]
 8005aea:	1821      	adds	r1, r4, r0
 8005aec:	428b      	cmp	r3, r1
 8005aee:	bf01      	itttt	eq
 8005af0:	6819      	ldreq	r1, [r3, #0]
 8005af2:	685b      	ldreq	r3, [r3, #4]
 8005af4:	1809      	addeq	r1, r1, r0
 8005af6:	6021      	streq	r1, [r4, #0]
 8005af8:	6063      	str	r3, [r4, #4]
 8005afa:	6054      	str	r4, [r2, #4]
 8005afc:	e7cb      	b.n	8005a96 <_free_r+0x22>
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
 8005b00:	20001c54 	.word	0x20001c54

08005b04 <sbrk_aligned>:
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	4e0f      	ldr	r6, [pc, #60]	@ (8005b44 <sbrk_aligned+0x40>)
 8005b08:	460c      	mov	r4, r1
 8005b0a:	6831      	ldr	r1, [r6, #0]
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	b911      	cbnz	r1, 8005b16 <sbrk_aligned+0x12>
 8005b10:	f000 fba8 	bl	8006264 <_sbrk_r>
 8005b14:	6030      	str	r0, [r6, #0]
 8005b16:	4621      	mov	r1, r4
 8005b18:	4628      	mov	r0, r5
 8005b1a:	f000 fba3 	bl	8006264 <_sbrk_r>
 8005b1e:	1c43      	adds	r3, r0, #1
 8005b20:	d103      	bne.n	8005b2a <sbrk_aligned+0x26>
 8005b22:	f04f 34ff 	mov.w	r4, #4294967295
 8005b26:	4620      	mov	r0, r4
 8005b28:	bd70      	pop	{r4, r5, r6, pc}
 8005b2a:	1cc4      	adds	r4, r0, #3
 8005b2c:	f024 0403 	bic.w	r4, r4, #3
 8005b30:	42a0      	cmp	r0, r4
 8005b32:	d0f8      	beq.n	8005b26 <sbrk_aligned+0x22>
 8005b34:	1a21      	subs	r1, r4, r0
 8005b36:	4628      	mov	r0, r5
 8005b38:	f000 fb94 	bl	8006264 <_sbrk_r>
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d1f2      	bne.n	8005b26 <sbrk_aligned+0x22>
 8005b40:	e7ef      	b.n	8005b22 <sbrk_aligned+0x1e>
 8005b42:	bf00      	nop
 8005b44:	20001c50 	.word	0x20001c50

08005b48 <_malloc_r>:
 8005b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b4c:	1ccd      	adds	r5, r1, #3
 8005b4e:	f025 0503 	bic.w	r5, r5, #3
 8005b52:	3508      	adds	r5, #8
 8005b54:	2d0c      	cmp	r5, #12
 8005b56:	bf38      	it	cc
 8005b58:	250c      	movcc	r5, #12
 8005b5a:	2d00      	cmp	r5, #0
 8005b5c:	4606      	mov	r6, r0
 8005b5e:	db01      	blt.n	8005b64 <_malloc_r+0x1c>
 8005b60:	42a9      	cmp	r1, r5
 8005b62:	d904      	bls.n	8005b6e <_malloc_r+0x26>
 8005b64:	230c      	movs	r3, #12
 8005b66:	6033      	str	r3, [r6, #0]
 8005b68:	2000      	movs	r0, #0
 8005b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c44 <_malloc_r+0xfc>
 8005b72:	f000 f869 	bl	8005c48 <__malloc_lock>
 8005b76:	f8d8 3000 	ldr.w	r3, [r8]
 8005b7a:	461c      	mov	r4, r3
 8005b7c:	bb44      	cbnz	r4, 8005bd0 <_malloc_r+0x88>
 8005b7e:	4629      	mov	r1, r5
 8005b80:	4630      	mov	r0, r6
 8005b82:	f7ff ffbf 	bl	8005b04 <sbrk_aligned>
 8005b86:	1c43      	adds	r3, r0, #1
 8005b88:	4604      	mov	r4, r0
 8005b8a:	d158      	bne.n	8005c3e <_malloc_r+0xf6>
 8005b8c:	f8d8 4000 	ldr.w	r4, [r8]
 8005b90:	4627      	mov	r7, r4
 8005b92:	2f00      	cmp	r7, #0
 8005b94:	d143      	bne.n	8005c1e <_malloc_r+0xd6>
 8005b96:	2c00      	cmp	r4, #0
 8005b98:	d04b      	beq.n	8005c32 <_malloc_r+0xea>
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	4639      	mov	r1, r7
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	eb04 0903 	add.w	r9, r4, r3
 8005ba4:	f000 fb5e 	bl	8006264 <_sbrk_r>
 8005ba8:	4581      	cmp	r9, r0
 8005baa:	d142      	bne.n	8005c32 <_malloc_r+0xea>
 8005bac:	6821      	ldr	r1, [r4, #0]
 8005bae:	4630      	mov	r0, r6
 8005bb0:	1a6d      	subs	r5, r5, r1
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	f7ff ffa6 	bl	8005b04 <sbrk_aligned>
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d03a      	beq.n	8005c32 <_malloc_r+0xea>
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	442b      	add	r3, r5
 8005bc0:	6023      	str	r3, [r4, #0]
 8005bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	bb62      	cbnz	r2, 8005c24 <_malloc_r+0xdc>
 8005bca:	f8c8 7000 	str.w	r7, [r8]
 8005bce:	e00f      	b.n	8005bf0 <_malloc_r+0xa8>
 8005bd0:	6822      	ldr	r2, [r4, #0]
 8005bd2:	1b52      	subs	r2, r2, r5
 8005bd4:	d420      	bmi.n	8005c18 <_malloc_r+0xd0>
 8005bd6:	2a0b      	cmp	r2, #11
 8005bd8:	d917      	bls.n	8005c0a <_malloc_r+0xc2>
 8005bda:	1961      	adds	r1, r4, r5
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	6025      	str	r5, [r4, #0]
 8005be0:	bf18      	it	ne
 8005be2:	6059      	strne	r1, [r3, #4]
 8005be4:	6863      	ldr	r3, [r4, #4]
 8005be6:	bf08      	it	eq
 8005be8:	f8c8 1000 	streq.w	r1, [r8]
 8005bec:	5162      	str	r2, [r4, r5]
 8005bee:	604b      	str	r3, [r1, #4]
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	f000 f82f 	bl	8005c54 <__malloc_unlock>
 8005bf6:	f104 000b 	add.w	r0, r4, #11
 8005bfa:	1d23      	adds	r3, r4, #4
 8005bfc:	f020 0007 	bic.w	r0, r0, #7
 8005c00:	1ac2      	subs	r2, r0, r3
 8005c02:	bf1c      	itt	ne
 8005c04:	1a1b      	subne	r3, r3, r0
 8005c06:	50a3      	strne	r3, [r4, r2]
 8005c08:	e7af      	b.n	8005b6a <_malloc_r+0x22>
 8005c0a:	6862      	ldr	r2, [r4, #4]
 8005c0c:	42a3      	cmp	r3, r4
 8005c0e:	bf0c      	ite	eq
 8005c10:	f8c8 2000 	streq.w	r2, [r8]
 8005c14:	605a      	strne	r2, [r3, #4]
 8005c16:	e7eb      	b.n	8005bf0 <_malloc_r+0xa8>
 8005c18:	4623      	mov	r3, r4
 8005c1a:	6864      	ldr	r4, [r4, #4]
 8005c1c:	e7ae      	b.n	8005b7c <_malloc_r+0x34>
 8005c1e:	463c      	mov	r4, r7
 8005c20:	687f      	ldr	r7, [r7, #4]
 8005c22:	e7b6      	b.n	8005b92 <_malloc_r+0x4a>
 8005c24:	461a      	mov	r2, r3
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	42a3      	cmp	r3, r4
 8005c2a:	d1fb      	bne.n	8005c24 <_malloc_r+0xdc>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	6053      	str	r3, [r2, #4]
 8005c30:	e7de      	b.n	8005bf0 <_malloc_r+0xa8>
 8005c32:	230c      	movs	r3, #12
 8005c34:	4630      	mov	r0, r6
 8005c36:	6033      	str	r3, [r6, #0]
 8005c38:	f000 f80c 	bl	8005c54 <__malloc_unlock>
 8005c3c:	e794      	b.n	8005b68 <_malloc_r+0x20>
 8005c3e:	6005      	str	r5, [r0, #0]
 8005c40:	e7d6      	b.n	8005bf0 <_malloc_r+0xa8>
 8005c42:	bf00      	nop
 8005c44:	20001c54 	.word	0x20001c54

08005c48 <__malloc_lock>:
 8005c48:	4801      	ldr	r0, [pc, #4]	@ (8005c50 <__malloc_lock+0x8>)
 8005c4a:	f7ff bf03 	b.w	8005a54 <__retarget_lock_acquire_recursive>
 8005c4e:	bf00      	nop
 8005c50:	20001c4c 	.word	0x20001c4c

08005c54 <__malloc_unlock>:
 8005c54:	4801      	ldr	r0, [pc, #4]	@ (8005c5c <__malloc_unlock+0x8>)
 8005c56:	f7ff befe 	b.w	8005a56 <__retarget_lock_release_recursive>
 8005c5a:	bf00      	nop
 8005c5c:	20001c4c 	.word	0x20001c4c

08005c60 <__ssputs_r>:
 8005c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c64:	461f      	mov	r7, r3
 8005c66:	688e      	ldr	r6, [r1, #8]
 8005c68:	4682      	mov	sl, r0
 8005c6a:	42be      	cmp	r6, r7
 8005c6c:	460c      	mov	r4, r1
 8005c6e:	4690      	mov	r8, r2
 8005c70:	680b      	ldr	r3, [r1, #0]
 8005c72:	d82d      	bhi.n	8005cd0 <__ssputs_r+0x70>
 8005c74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c7c:	d026      	beq.n	8005ccc <__ssputs_r+0x6c>
 8005c7e:	6965      	ldr	r5, [r4, #20]
 8005c80:	6909      	ldr	r1, [r1, #16]
 8005c82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c86:	eba3 0901 	sub.w	r9, r3, r1
 8005c8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c8e:	1c7b      	adds	r3, r7, #1
 8005c90:	444b      	add	r3, r9
 8005c92:	106d      	asrs	r5, r5, #1
 8005c94:	429d      	cmp	r5, r3
 8005c96:	bf38      	it	cc
 8005c98:	461d      	movcc	r5, r3
 8005c9a:	0553      	lsls	r3, r2, #21
 8005c9c:	d527      	bpl.n	8005cee <__ssputs_r+0x8e>
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	f7ff ff52 	bl	8005b48 <_malloc_r>
 8005ca4:	4606      	mov	r6, r0
 8005ca6:	b360      	cbz	r0, 8005d02 <__ssputs_r+0xa2>
 8005ca8:	464a      	mov	r2, r9
 8005caa:	6921      	ldr	r1, [r4, #16]
 8005cac:	f7ff fed4 	bl	8005a58 <memcpy>
 8005cb0:	89a3      	ldrh	r3, [r4, #12]
 8005cb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cba:	81a3      	strh	r3, [r4, #12]
 8005cbc:	6126      	str	r6, [r4, #16]
 8005cbe:	444e      	add	r6, r9
 8005cc0:	6026      	str	r6, [r4, #0]
 8005cc2:	463e      	mov	r6, r7
 8005cc4:	6165      	str	r5, [r4, #20]
 8005cc6:	eba5 0509 	sub.w	r5, r5, r9
 8005cca:	60a5      	str	r5, [r4, #8]
 8005ccc:	42be      	cmp	r6, r7
 8005cce:	d900      	bls.n	8005cd2 <__ssputs_r+0x72>
 8005cd0:	463e      	mov	r6, r7
 8005cd2:	4632      	mov	r2, r6
 8005cd4:	4641      	mov	r1, r8
 8005cd6:	6820      	ldr	r0, [r4, #0]
 8005cd8:	f000 faaa 	bl	8006230 <memmove>
 8005cdc:	2000      	movs	r0, #0
 8005cde:	68a3      	ldr	r3, [r4, #8]
 8005ce0:	1b9b      	subs	r3, r3, r6
 8005ce2:	60a3      	str	r3, [r4, #8]
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	4433      	add	r3, r6
 8005ce8:	6023      	str	r3, [r4, #0]
 8005cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cee:	462a      	mov	r2, r5
 8005cf0:	f000 fad6 	bl	80062a0 <_realloc_r>
 8005cf4:	4606      	mov	r6, r0
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	d1e0      	bne.n	8005cbc <__ssputs_r+0x5c>
 8005cfa:	4650      	mov	r0, sl
 8005cfc:	6921      	ldr	r1, [r4, #16]
 8005cfe:	f7ff feb9 	bl	8005a74 <_free_r>
 8005d02:	230c      	movs	r3, #12
 8005d04:	f8ca 3000 	str.w	r3, [sl]
 8005d08:	89a3      	ldrh	r3, [r4, #12]
 8005d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d12:	81a3      	strh	r3, [r4, #12]
 8005d14:	e7e9      	b.n	8005cea <__ssputs_r+0x8a>
	...

08005d18 <_svfiprintf_r>:
 8005d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d1c:	4698      	mov	r8, r3
 8005d1e:	898b      	ldrh	r3, [r1, #12]
 8005d20:	4607      	mov	r7, r0
 8005d22:	061b      	lsls	r3, r3, #24
 8005d24:	460d      	mov	r5, r1
 8005d26:	4614      	mov	r4, r2
 8005d28:	b09d      	sub	sp, #116	@ 0x74
 8005d2a:	d510      	bpl.n	8005d4e <_svfiprintf_r+0x36>
 8005d2c:	690b      	ldr	r3, [r1, #16]
 8005d2e:	b973      	cbnz	r3, 8005d4e <_svfiprintf_r+0x36>
 8005d30:	2140      	movs	r1, #64	@ 0x40
 8005d32:	f7ff ff09 	bl	8005b48 <_malloc_r>
 8005d36:	6028      	str	r0, [r5, #0]
 8005d38:	6128      	str	r0, [r5, #16]
 8005d3a:	b930      	cbnz	r0, 8005d4a <_svfiprintf_r+0x32>
 8005d3c:	230c      	movs	r3, #12
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	f04f 30ff 	mov.w	r0, #4294967295
 8005d44:	b01d      	add	sp, #116	@ 0x74
 8005d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d4a:	2340      	movs	r3, #64	@ 0x40
 8005d4c:	616b      	str	r3, [r5, #20]
 8005d4e:	2300      	movs	r3, #0
 8005d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d52:	2320      	movs	r3, #32
 8005d54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d58:	2330      	movs	r3, #48	@ 0x30
 8005d5a:	f04f 0901 	mov.w	r9, #1
 8005d5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d62:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005efc <_svfiprintf_r+0x1e4>
 8005d66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d6a:	4623      	mov	r3, r4
 8005d6c:	469a      	mov	sl, r3
 8005d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d72:	b10a      	cbz	r2, 8005d78 <_svfiprintf_r+0x60>
 8005d74:	2a25      	cmp	r2, #37	@ 0x25
 8005d76:	d1f9      	bne.n	8005d6c <_svfiprintf_r+0x54>
 8005d78:	ebba 0b04 	subs.w	fp, sl, r4
 8005d7c:	d00b      	beq.n	8005d96 <_svfiprintf_r+0x7e>
 8005d7e:	465b      	mov	r3, fp
 8005d80:	4622      	mov	r2, r4
 8005d82:	4629      	mov	r1, r5
 8005d84:	4638      	mov	r0, r7
 8005d86:	f7ff ff6b 	bl	8005c60 <__ssputs_r>
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	f000 80a7 	beq.w	8005ede <_svfiprintf_r+0x1c6>
 8005d90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d92:	445a      	add	r2, fp
 8005d94:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d96:	f89a 3000 	ldrb.w	r3, [sl]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 809f 	beq.w	8005ede <_svfiprintf_r+0x1c6>
 8005da0:	2300      	movs	r3, #0
 8005da2:	f04f 32ff 	mov.w	r2, #4294967295
 8005da6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005daa:	f10a 0a01 	add.w	sl, sl, #1
 8005dae:	9304      	str	r3, [sp, #16]
 8005db0:	9307      	str	r3, [sp, #28]
 8005db2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005db6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005db8:	4654      	mov	r4, sl
 8005dba:	2205      	movs	r2, #5
 8005dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dc0:	484e      	ldr	r0, [pc, #312]	@ (8005efc <_svfiprintf_r+0x1e4>)
 8005dc2:	f000 fa5f 	bl	8006284 <memchr>
 8005dc6:	9a04      	ldr	r2, [sp, #16]
 8005dc8:	b9d8      	cbnz	r0, 8005e02 <_svfiprintf_r+0xea>
 8005dca:	06d0      	lsls	r0, r2, #27
 8005dcc:	bf44      	itt	mi
 8005dce:	2320      	movmi	r3, #32
 8005dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dd4:	0711      	lsls	r1, r2, #28
 8005dd6:	bf44      	itt	mi
 8005dd8:	232b      	movmi	r3, #43	@ 0x2b
 8005dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dde:	f89a 3000 	ldrb.w	r3, [sl]
 8005de2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005de4:	d015      	beq.n	8005e12 <_svfiprintf_r+0xfa>
 8005de6:	4654      	mov	r4, sl
 8005de8:	2000      	movs	r0, #0
 8005dea:	f04f 0c0a 	mov.w	ip, #10
 8005dee:	9a07      	ldr	r2, [sp, #28]
 8005df0:	4621      	mov	r1, r4
 8005df2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005df6:	3b30      	subs	r3, #48	@ 0x30
 8005df8:	2b09      	cmp	r3, #9
 8005dfa:	d94b      	bls.n	8005e94 <_svfiprintf_r+0x17c>
 8005dfc:	b1b0      	cbz	r0, 8005e2c <_svfiprintf_r+0x114>
 8005dfe:	9207      	str	r2, [sp, #28]
 8005e00:	e014      	b.n	8005e2c <_svfiprintf_r+0x114>
 8005e02:	eba0 0308 	sub.w	r3, r0, r8
 8005e06:	fa09 f303 	lsl.w	r3, r9, r3
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	46a2      	mov	sl, r4
 8005e0e:	9304      	str	r3, [sp, #16]
 8005e10:	e7d2      	b.n	8005db8 <_svfiprintf_r+0xa0>
 8005e12:	9b03      	ldr	r3, [sp, #12]
 8005e14:	1d19      	adds	r1, r3, #4
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	9103      	str	r1, [sp, #12]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	bfbb      	ittet	lt
 8005e1e:	425b      	neglt	r3, r3
 8005e20:	f042 0202 	orrlt.w	r2, r2, #2
 8005e24:	9307      	strge	r3, [sp, #28]
 8005e26:	9307      	strlt	r3, [sp, #28]
 8005e28:	bfb8      	it	lt
 8005e2a:	9204      	strlt	r2, [sp, #16]
 8005e2c:	7823      	ldrb	r3, [r4, #0]
 8005e2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e30:	d10a      	bne.n	8005e48 <_svfiprintf_r+0x130>
 8005e32:	7863      	ldrb	r3, [r4, #1]
 8005e34:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e36:	d132      	bne.n	8005e9e <_svfiprintf_r+0x186>
 8005e38:	9b03      	ldr	r3, [sp, #12]
 8005e3a:	3402      	adds	r4, #2
 8005e3c:	1d1a      	adds	r2, r3, #4
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	9203      	str	r2, [sp, #12]
 8005e42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e46:	9305      	str	r3, [sp, #20]
 8005e48:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005f00 <_svfiprintf_r+0x1e8>
 8005e4c:	2203      	movs	r2, #3
 8005e4e:	4650      	mov	r0, sl
 8005e50:	7821      	ldrb	r1, [r4, #0]
 8005e52:	f000 fa17 	bl	8006284 <memchr>
 8005e56:	b138      	cbz	r0, 8005e68 <_svfiprintf_r+0x150>
 8005e58:	2240      	movs	r2, #64	@ 0x40
 8005e5a:	9b04      	ldr	r3, [sp, #16]
 8005e5c:	eba0 000a 	sub.w	r0, r0, sl
 8005e60:	4082      	lsls	r2, r0
 8005e62:	4313      	orrs	r3, r2
 8005e64:	3401      	adds	r4, #1
 8005e66:	9304      	str	r3, [sp, #16]
 8005e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e6c:	2206      	movs	r2, #6
 8005e6e:	4825      	ldr	r0, [pc, #148]	@ (8005f04 <_svfiprintf_r+0x1ec>)
 8005e70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e74:	f000 fa06 	bl	8006284 <memchr>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	d036      	beq.n	8005eea <_svfiprintf_r+0x1d2>
 8005e7c:	4b22      	ldr	r3, [pc, #136]	@ (8005f08 <_svfiprintf_r+0x1f0>)
 8005e7e:	bb1b      	cbnz	r3, 8005ec8 <_svfiprintf_r+0x1b0>
 8005e80:	9b03      	ldr	r3, [sp, #12]
 8005e82:	3307      	adds	r3, #7
 8005e84:	f023 0307 	bic.w	r3, r3, #7
 8005e88:	3308      	adds	r3, #8
 8005e8a:	9303      	str	r3, [sp, #12]
 8005e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e8e:	4433      	add	r3, r6
 8005e90:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e92:	e76a      	b.n	8005d6a <_svfiprintf_r+0x52>
 8005e94:	460c      	mov	r4, r1
 8005e96:	2001      	movs	r0, #1
 8005e98:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e9c:	e7a8      	b.n	8005df0 <_svfiprintf_r+0xd8>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f04f 0c0a 	mov.w	ip, #10
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	3401      	adds	r4, #1
 8005ea8:	9305      	str	r3, [sp, #20]
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005eb0:	3a30      	subs	r2, #48	@ 0x30
 8005eb2:	2a09      	cmp	r2, #9
 8005eb4:	d903      	bls.n	8005ebe <_svfiprintf_r+0x1a6>
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0c6      	beq.n	8005e48 <_svfiprintf_r+0x130>
 8005eba:	9105      	str	r1, [sp, #20]
 8005ebc:	e7c4      	b.n	8005e48 <_svfiprintf_r+0x130>
 8005ebe:	4604      	mov	r4, r0
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ec6:	e7f0      	b.n	8005eaa <_svfiprintf_r+0x192>
 8005ec8:	ab03      	add	r3, sp, #12
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	462a      	mov	r2, r5
 8005ece:	4638      	mov	r0, r7
 8005ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8005f0c <_svfiprintf_r+0x1f4>)
 8005ed2:	a904      	add	r1, sp, #16
 8005ed4:	f3af 8000 	nop.w
 8005ed8:	1c42      	adds	r2, r0, #1
 8005eda:	4606      	mov	r6, r0
 8005edc:	d1d6      	bne.n	8005e8c <_svfiprintf_r+0x174>
 8005ede:	89ab      	ldrh	r3, [r5, #12]
 8005ee0:	065b      	lsls	r3, r3, #25
 8005ee2:	f53f af2d 	bmi.w	8005d40 <_svfiprintf_r+0x28>
 8005ee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ee8:	e72c      	b.n	8005d44 <_svfiprintf_r+0x2c>
 8005eea:	ab03      	add	r3, sp, #12
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	462a      	mov	r2, r5
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	4b06      	ldr	r3, [pc, #24]	@ (8005f0c <_svfiprintf_r+0x1f4>)
 8005ef4:	a904      	add	r1, sp, #16
 8005ef6:	f000 f87d 	bl	8005ff4 <_printf_i>
 8005efa:	e7ed      	b.n	8005ed8 <_svfiprintf_r+0x1c0>
 8005efc:	0800655a 	.word	0x0800655a
 8005f00:	08006560 	.word	0x08006560
 8005f04:	08006564 	.word	0x08006564
 8005f08:	00000000 	.word	0x00000000
 8005f0c:	08005c61 	.word	0x08005c61

08005f10 <_printf_common>:
 8005f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f14:	4616      	mov	r6, r2
 8005f16:	4698      	mov	r8, r3
 8005f18:	688a      	ldr	r2, [r1, #8]
 8005f1a:	690b      	ldr	r3, [r1, #16]
 8005f1c:	4607      	mov	r7, r0
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	bfb8      	it	lt
 8005f22:	4613      	movlt	r3, r2
 8005f24:	6033      	str	r3, [r6, #0]
 8005f26:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f30:	b10a      	cbz	r2, 8005f36 <_printf_common+0x26>
 8005f32:	3301      	adds	r3, #1
 8005f34:	6033      	str	r3, [r6, #0]
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	0699      	lsls	r1, r3, #26
 8005f3a:	bf42      	ittt	mi
 8005f3c:	6833      	ldrmi	r3, [r6, #0]
 8005f3e:	3302      	addmi	r3, #2
 8005f40:	6033      	strmi	r3, [r6, #0]
 8005f42:	6825      	ldr	r5, [r4, #0]
 8005f44:	f015 0506 	ands.w	r5, r5, #6
 8005f48:	d106      	bne.n	8005f58 <_printf_common+0x48>
 8005f4a:	f104 0a19 	add.w	sl, r4, #25
 8005f4e:	68e3      	ldr	r3, [r4, #12]
 8005f50:	6832      	ldr	r2, [r6, #0]
 8005f52:	1a9b      	subs	r3, r3, r2
 8005f54:	42ab      	cmp	r3, r5
 8005f56:	dc2b      	bgt.n	8005fb0 <_printf_common+0xa0>
 8005f58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f5c:	6822      	ldr	r2, [r4, #0]
 8005f5e:	3b00      	subs	r3, #0
 8005f60:	bf18      	it	ne
 8005f62:	2301      	movne	r3, #1
 8005f64:	0692      	lsls	r2, r2, #26
 8005f66:	d430      	bmi.n	8005fca <_printf_common+0xba>
 8005f68:	4641      	mov	r1, r8
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f70:	47c8      	blx	r9
 8005f72:	3001      	adds	r0, #1
 8005f74:	d023      	beq.n	8005fbe <_printf_common+0xae>
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	6922      	ldr	r2, [r4, #16]
 8005f7a:	f003 0306 	and.w	r3, r3, #6
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	bf14      	ite	ne
 8005f82:	2500      	movne	r5, #0
 8005f84:	6833      	ldreq	r3, [r6, #0]
 8005f86:	f04f 0600 	mov.w	r6, #0
 8005f8a:	bf08      	it	eq
 8005f8c:	68e5      	ldreq	r5, [r4, #12]
 8005f8e:	f104 041a 	add.w	r4, r4, #26
 8005f92:	bf08      	it	eq
 8005f94:	1aed      	subeq	r5, r5, r3
 8005f96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005f9a:	bf08      	it	eq
 8005f9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	bfc4      	itt	gt
 8005fa4:	1a9b      	subgt	r3, r3, r2
 8005fa6:	18ed      	addgt	r5, r5, r3
 8005fa8:	42b5      	cmp	r5, r6
 8005faa:	d11a      	bne.n	8005fe2 <_printf_common+0xd2>
 8005fac:	2000      	movs	r0, #0
 8005fae:	e008      	b.n	8005fc2 <_printf_common+0xb2>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	4652      	mov	r2, sl
 8005fb4:	4641      	mov	r1, r8
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	47c8      	blx	r9
 8005fba:	3001      	adds	r0, #1
 8005fbc:	d103      	bne.n	8005fc6 <_printf_common+0xb6>
 8005fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc6:	3501      	adds	r5, #1
 8005fc8:	e7c1      	b.n	8005f4e <_printf_common+0x3e>
 8005fca:	2030      	movs	r0, #48	@ 0x30
 8005fcc:	18e1      	adds	r1, r4, r3
 8005fce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fd8:	4422      	add	r2, r4
 8005fda:	3302      	adds	r3, #2
 8005fdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fe0:	e7c2      	b.n	8005f68 <_printf_common+0x58>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	4622      	mov	r2, r4
 8005fe6:	4641      	mov	r1, r8
 8005fe8:	4638      	mov	r0, r7
 8005fea:	47c8      	blx	r9
 8005fec:	3001      	adds	r0, #1
 8005fee:	d0e6      	beq.n	8005fbe <_printf_common+0xae>
 8005ff0:	3601      	adds	r6, #1
 8005ff2:	e7d9      	b.n	8005fa8 <_printf_common+0x98>

08005ff4 <_printf_i>:
 8005ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff8:	7e0f      	ldrb	r7, [r1, #24]
 8005ffa:	4691      	mov	r9, r2
 8005ffc:	2f78      	cmp	r7, #120	@ 0x78
 8005ffe:	4680      	mov	r8, r0
 8006000:	460c      	mov	r4, r1
 8006002:	469a      	mov	sl, r3
 8006004:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006006:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800600a:	d807      	bhi.n	800601c <_printf_i+0x28>
 800600c:	2f62      	cmp	r7, #98	@ 0x62
 800600e:	d80a      	bhi.n	8006026 <_printf_i+0x32>
 8006010:	2f00      	cmp	r7, #0
 8006012:	f000 80d1 	beq.w	80061b8 <_printf_i+0x1c4>
 8006016:	2f58      	cmp	r7, #88	@ 0x58
 8006018:	f000 80b8 	beq.w	800618c <_printf_i+0x198>
 800601c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006020:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006024:	e03a      	b.n	800609c <_printf_i+0xa8>
 8006026:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800602a:	2b15      	cmp	r3, #21
 800602c:	d8f6      	bhi.n	800601c <_printf_i+0x28>
 800602e:	a101      	add	r1, pc, #4	@ (adr r1, 8006034 <_printf_i+0x40>)
 8006030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006034:	0800608d 	.word	0x0800608d
 8006038:	080060a1 	.word	0x080060a1
 800603c:	0800601d 	.word	0x0800601d
 8006040:	0800601d 	.word	0x0800601d
 8006044:	0800601d 	.word	0x0800601d
 8006048:	0800601d 	.word	0x0800601d
 800604c:	080060a1 	.word	0x080060a1
 8006050:	0800601d 	.word	0x0800601d
 8006054:	0800601d 	.word	0x0800601d
 8006058:	0800601d 	.word	0x0800601d
 800605c:	0800601d 	.word	0x0800601d
 8006060:	0800619f 	.word	0x0800619f
 8006064:	080060cb 	.word	0x080060cb
 8006068:	08006159 	.word	0x08006159
 800606c:	0800601d 	.word	0x0800601d
 8006070:	0800601d 	.word	0x0800601d
 8006074:	080061c1 	.word	0x080061c1
 8006078:	0800601d 	.word	0x0800601d
 800607c:	080060cb 	.word	0x080060cb
 8006080:	0800601d 	.word	0x0800601d
 8006084:	0800601d 	.word	0x0800601d
 8006088:	08006161 	.word	0x08006161
 800608c:	6833      	ldr	r3, [r6, #0]
 800608e:	1d1a      	adds	r2, r3, #4
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6032      	str	r2, [r6, #0]
 8006094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006098:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800609c:	2301      	movs	r3, #1
 800609e:	e09c      	b.n	80061da <_printf_i+0x1e6>
 80060a0:	6833      	ldr	r3, [r6, #0]
 80060a2:	6820      	ldr	r0, [r4, #0]
 80060a4:	1d19      	adds	r1, r3, #4
 80060a6:	6031      	str	r1, [r6, #0]
 80060a8:	0606      	lsls	r6, r0, #24
 80060aa:	d501      	bpl.n	80060b0 <_printf_i+0xbc>
 80060ac:	681d      	ldr	r5, [r3, #0]
 80060ae:	e003      	b.n	80060b8 <_printf_i+0xc4>
 80060b0:	0645      	lsls	r5, r0, #25
 80060b2:	d5fb      	bpl.n	80060ac <_printf_i+0xb8>
 80060b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060b8:	2d00      	cmp	r5, #0
 80060ba:	da03      	bge.n	80060c4 <_printf_i+0xd0>
 80060bc:	232d      	movs	r3, #45	@ 0x2d
 80060be:	426d      	negs	r5, r5
 80060c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060c4:	230a      	movs	r3, #10
 80060c6:	4858      	ldr	r0, [pc, #352]	@ (8006228 <_printf_i+0x234>)
 80060c8:	e011      	b.n	80060ee <_printf_i+0xfa>
 80060ca:	6821      	ldr	r1, [r4, #0]
 80060cc:	6833      	ldr	r3, [r6, #0]
 80060ce:	0608      	lsls	r0, r1, #24
 80060d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80060d4:	d402      	bmi.n	80060dc <_printf_i+0xe8>
 80060d6:	0649      	lsls	r1, r1, #25
 80060d8:	bf48      	it	mi
 80060da:	b2ad      	uxthmi	r5, r5
 80060dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80060de:	6033      	str	r3, [r6, #0]
 80060e0:	bf14      	ite	ne
 80060e2:	230a      	movne	r3, #10
 80060e4:	2308      	moveq	r3, #8
 80060e6:	4850      	ldr	r0, [pc, #320]	@ (8006228 <_printf_i+0x234>)
 80060e8:	2100      	movs	r1, #0
 80060ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060ee:	6866      	ldr	r6, [r4, #4]
 80060f0:	2e00      	cmp	r6, #0
 80060f2:	60a6      	str	r6, [r4, #8]
 80060f4:	db05      	blt.n	8006102 <_printf_i+0x10e>
 80060f6:	6821      	ldr	r1, [r4, #0]
 80060f8:	432e      	orrs	r6, r5
 80060fa:	f021 0104 	bic.w	r1, r1, #4
 80060fe:	6021      	str	r1, [r4, #0]
 8006100:	d04b      	beq.n	800619a <_printf_i+0x1a6>
 8006102:	4616      	mov	r6, r2
 8006104:	fbb5 f1f3 	udiv	r1, r5, r3
 8006108:	fb03 5711 	mls	r7, r3, r1, r5
 800610c:	5dc7      	ldrb	r7, [r0, r7]
 800610e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006112:	462f      	mov	r7, r5
 8006114:	42bb      	cmp	r3, r7
 8006116:	460d      	mov	r5, r1
 8006118:	d9f4      	bls.n	8006104 <_printf_i+0x110>
 800611a:	2b08      	cmp	r3, #8
 800611c:	d10b      	bne.n	8006136 <_printf_i+0x142>
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	07df      	lsls	r7, r3, #31
 8006122:	d508      	bpl.n	8006136 <_printf_i+0x142>
 8006124:	6923      	ldr	r3, [r4, #16]
 8006126:	6861      	ldr	r1, [r4, #4]
 8006128:	4299      	cmp	r1, r3
 800612a:	bfde      	ittt	le
 800612c:	2330      	movle	r3, #48	@ 0x30
 800612e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006132:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006136:	1b92      	subs	r2, r2, r6
 8006138:	6122      	str	r2, [r4, #16]
 800613a:	464b      	mov	r3, r9
 800613c:	4621      	mov	r1, r4
 800613e:	4640      	mov	r0, r8
 8006140:	f8cd a000 	str.w	sl, [sp]
 8006144:	aa03      	add	r2, sp, #12
 8006146:	f7ff fee3 	bl	8005f10 <_printf_common>
 800614a:	3001      	adds	r0, #1
 800614c:	d14a      	bne.n	80061e4 <_printf_i+0x1f0>
 800614e:	f04f 30ff 	mov.w	r0, #4294967295
 8006152:	b004      	add	sp, #16
 8006154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	f043 0320 	orr.w	r3, r3, #32
 800615e:	6023      	str	r3, [r4, #0]
 8006160:	2778      	movs	r7, #120	@ 0x78
 8006162:	4832      	ldr	r0, [pc, #200]	@ (800622c <_printf_i+0x238>)
 8006164:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	6831      	ldr	r1, [r6, #0]
 800616c:	061f      	lsls	r7, r3, #24
 800616e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006172:	d402      	bmi.n	800617a <_printf_i+0x186>
 8006174:	065f      	lsls	r7, r3, #25
 8006176:	bf48      	it	mi
 8006178:	b2ad      	uxthmi	r5, r5
 800617a:	6031      	str	r1, [r6, #0]
 800617c:	07d9      	lsls	r1, r3, #31
 800617e:	bf44      	itt	mi
 8006180:	f043 0320 	orrmi.w	r3, r3, #32
 8006184:	6023      	strmi	r3, [r4, #0]
 8006186:	b11d      	cbz	r5, 8006190 <_printf_i+0x19c>
 8006188:	2310      	movs	r3, #16
 800618a:	e7ad      	b.n	80060e8 <_printf_i+0xf4>
 800618c:	4826      	ldr	r0, [pc, #152]	@ (8006228 <_printf_i+0x234>)
 800618e:	e7e9      	b.n	8006164 <_printf_i+0x170>
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	f023 0320 	bic.w	r3, r3, #32
 8006196:	6023      	str	r3, [r4, #0]
 8006198:	e7f6      	b.n	8006188 <_printf_i+0x194>
 800619a:	4616      	mov	r6, r2
 800619c:	e7bd      	b.n	800611a <_printf_i+0x126>
 800619e:	6833      	ldr	r3, [r6, #0]
 80061a0:	6825      	ldr	r5, [r4, #0]
 80061a2:	1d18      	adds	r0, r3, #4
 80061a4:	6961      	ldr	r1, [r4, #20]
 80061a6:	6030      	str	r0, [r6, #0]
 80061a8:	062e      	lsls	r6, r5, #24
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	d501      	bpl.n	80061b2 <_printf_i+0x1be>
 80061ae:	6019      	str	r1, [r3, #0]
 80061b0:	e002      	b.n	80061b8 <_printf_i+0x1c4>
 80061b2:	0668      	lsls	r0, r5, #25
 80061b4:	d5fb      	bpl.n	80061ae <_printf_i+0x1ba>
 80061b6:	8019      	strh	r1, [r3, #0]
 80061b8:	2300      	movs	r3, #0
 80061ba:	4616      	mov	r6, r2
 80061bc:	6123      	str	r3, [r4, #16]
 80061be:	e7bc      	b.n	800613a <_printf_i+0x146>
 80061c0:	6833      	ldr	r3, [r6, #0]
 80061c2:	2100      	movs	r1, #0
 80061c4:	1d1a      	adds	r2, r3, #4
 80061c6:	6032      	str	r2, [r6, #0]
 80061c8:	681e      	ldr	r6, [r3, #0]
 80061ca:	6862      	ldr	r2, [r4, #4]
 80061cc:	4630      	mov	r0, r6
 80061ce:	f000 f859 	bl	8006284 <memchr>
 80061d2:	b108      	cbz	r0, 80061d8 <_printf_i+0x1e4>
 80061d4:	1b80      	subs	r0, r0, r6
 80061d6:	6060      	str	r0, [r4, #4]
 80061d8:	6863      	ldr	r3, [r4, #4]
 80061da:	6123      	str	r3, [r4, #16]
 80061dc:	2300      	movs	r3, #0
 80061de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061e2:	e7aa      	b.n	800613a <_printf_i+0x146>
 80061e4:	4632      	mov	r2, r6
 80061e6:	4649      	mov	r1, r9
 80061e8:	4640      	mov	r0, r8
 80061ea:	6923      	ldr	r3, [r4, #16]
 80061ec:	47d0      	blx	sl
 80061ee:	3001      	adds	r0, #1
 80061f0:	d0ad      	beq.n	800614e <_printf_i+0x15a>
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	079b      	lsls	r3, r3, #30
 80061f6:	d413      	bmi.n	8006220 <_printf_i+0x22c>
 80061f8:	68e0      	ldr	r0, [r4, #12]
 80061fa:	9b03      	ldr	r3, [sp, #12]
 80061fc:	4298      	cmp	r0, r3
 80061fe:	bfb8      	it	lt
 8006200:	4618      	movlt	r0, r3
 8006202:	e7a6      	b.n	8006152 <_printf_i+0x15e>
 8006204:	2301      	movs	r3, #1
 8006206:	4632      	mov	r2, r6
 8006208:	4649      	mov	r1, r9
 800620a:	4640      	mov	r0, r8
 800620c:	47d0      	blx	sl
 800620e:	3001      	adds	r0, #1
 8006210:	d09d      	beq.n	800614e <_printf_i+0x15a>
 8006212:	3501      	adds	r5, #1
 8006214:	68e3      	ldr	r3, [r4, #12]
 8006216:	9903      	ldr	r1, [sp, #12]
 8006218:	1a5b      	subs	r3, r3, r1
 800621a:	42ab      	cmp	r3, r5
 800621c:	dcf2      	bgt.n	8006204 <_printf_i+0x210>
 800621e:	e7eb      	b.n	80061f8 <_printf_i+0x204>
 8006220:	2500      	movs	r5, #0
 8006222:	f104 0619 	add.w	r6, r4, #25
 8006226:	e7f5      	b.n	8006214 <_printf_i+0x220>
 8006228:	0800656b 	.word	0x0800656b
 800622c:	0800657c 	.word	0x0800657c

08006230 <memmove>:
 8006230:	4288      	cmp	r0, r1
 8006232:	b510      	push	{r4, lr}
 8006234:	eb01 0402 	add.w	r4, r1, r2
 8006238:	d902      	bls.n	8006240 <memmove+0x10>
 800623a:	4284      	cmp	r4, r0
 800623c:	4623      	mov	r3, r4
 800623e:	d807      	bhi.n	8006250 <memmove+0x20>
 8006240:	1e43      	subs	r3, r0, #1
 8006242:	42a1      	cmp	r1, r4
 8006244:	d008      	beq.n	8006258 <memmove+0x28>
 8006246:	f811 2b01 	ldrb.w	r2, [r1], #1
 800624a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800624e:	e7f8      	b.n	8006242 <memmove+0x12>
 8006250:	4601      	mov	r1, r0
 8006252:	4402      	add	r2, r0
 8006254:	428a      	cmp	r2, r1
 8006256:	d100      	bne.n	800625a <memmove+0x2a>
 8006258:	bd10      	pop	{r4, pc}
 800625a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800625e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006262:	e7f7      	b.n	8006254 <memmove+0x24>

08006264 <_sbrk_r>:
 8006264:	b538      	push	{r3, r4, r5, lr}
 8006266:	2300      	movs	r3, #0
 8006268:	4d05      	ldr	r5, [pc, #20]	@ (8006280 <_sbrk_r+0x1c>)
 800626a:	4604      	mov	r4, r0
 800626c:	4608      	mov	r0, r1
 800626e:	602b      	str	r3, [r5, #0]
 8006270:	f7fa fae0 	bl	8000834 <_sbrk>
 8006274:	1c43      	adds	r3, r0, #1
 8006276:	d102      	bne.n	800627e <_sbrk_r+0x1a>
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	b103      	cbz	r3, 800627e <_sbrk_r+0x1a>
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	bd38      	pop	{r3, r4, r5, pc}
 8006280:	20001c48 	.word	0x20001c48

08006284 <memchr>:
 8006284:	4603      	mov	r3, r0
 8006286:	b510      	push	{r4, lr}
 8006288:	b2c9      	uxtb	r1, r1
 800628a:	4402      	add	r2, r0
 800628c:	4293      	cmp	r3, r2
 800628e:	4618      	mov	r0, r3
 8006290:	d101      	bne.n	8006296 <memchr+0x12>
 8006292:	2000      	movs	r0, #0
 8006294:	e003      	b.n	800629e <memchr+0x1a>
 8006296:	7804      	ldrb	r4, [r0, #0]
 8006298:	3301      	adds	r3, #1
 800629a:	428c      	cmp	r4, r1
 800629c:	d1f6      	bne.n	800628c <memchr+0x8>
 800629e:	bd10      	pop	{r4, pc}

080062a0 <_realloc_r>:
 80062a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a4:	4607      	mov	r7, r0
 80062a6:	4614      	mov	r4, r2
 80062a8:	460d      	mov	r5, r1
 80062aa:	b921      	cbnz	r1, 80062b6 <_realloc_r+0x16>
 80062ac:	4611      	mov	r1, r2
 80062ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062b2:	f7ff bc49 	b.w	8005b48 <_malloc_r>
 80062b6:	b92a      	cbnz	r2, 80062c4 <_realloc_r+0x24>
 80062b8:	f7ff fbdc 	bl	8005a74 <_free_r>
 80062bc:	4625      	mov	r5, r4
 80062be:	4628      	mov	r0, r5
 80062c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c4:	f000 f81a 	bl	80062fc <_malloc_usable_size_r>
 80062c8:	4284      	cmp	r4, r0
 80062ca:	4606      	mov	r6, r0
 80062cc:	d802      	bhi.n	80062d4 <_realloc_r+0x34>
 80062ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80062d2:	d8f4      	bhi.n	80062be <_realloc_r+0x1e>
 80062d4:	4621      	mov	r1, r4
 80062d6:	4638      	mov	r0, r7
 80062d8:	f7ff fc36 	bl	8005b48 <_malloc_r>
 80062dc:	4680      	mov	r8, r0
 80062de:	b908      	cbnz	r0, 80062e4 <_realloc_r+0x44>
 80062e0:	4645      	mov	r5, r8
 80062e2:	e7ec      	b.n	80062be <_realloc_r+0x1e>
 80062e4:	42b4      	cmp	r4, r6
 80062e6:	4622      	mov	r2, r4
 80062e8:	4629      	mov	r1, r5
 80062ea:	bf28      	it	cs
 80062ec:	4632      	movcs	r2, r6
 80062ee:	f7ff fbb3 	bl	8005a58 <memcpy>
 80062f2:	4629      	mov	r1, r5
 80062f4:	4638      	mov	r0, r7
 80062f6:	f7ff fbbd 	bl	8005a74 <_free_r>
 80062fa:	e7f1      	b.n	80062e0 <_realloc_r+0x40>

080062fc <_malloc_usable_size_r>:
 80062fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006300:	1f18      	subs	r0, r3, #4
 8006302:	2b00      	cmp	r3, #0
 8006304:	bfbc      	itt	lt
 8006306:	580b      	ldrlt	r3, [r1, r0]
 8006308:	18c0      	addlt	r0, r0, r3
 800630a:	4770      	bx	lr

0800630c <_init>:
 800630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630e:	bf00      	nop
 8006310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006312:	bc08      	pop	{r3}
 8006314:	469e      	mov	lr, r3
 8006316:	4770      	bx	lr

08006318 <_fini>:
 8006318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631a:	bf00      	nop
 800631c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800631e:	bc08      	pop	{r3}
 8006320:	469e      	mov	lr, r3
 8006322:	4770      	bx	lr
